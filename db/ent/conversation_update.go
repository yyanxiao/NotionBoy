// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notionboy/db/ent/conversation"
	"notionboy/db/ent/conversationmessage"
	"notionboy/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ConversationUpdate is the builder for updating Conversation entities.
type ConversationUpdate struct {
	config
	hooks    []Hook
	mutation *ConversationMutation
}

// Where appends a list predicates to the ConversationUpdate builder.
func (cu *ConversationUpdate) Where(ps ...predicate.Conversation) *ConversationUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ConversationUpdate) SetUpdatedAt(t time.Time) *ConversationUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeleted sets the "deleted" field.
func (cu *ConversationUpdate) SetDeleted(b bool) *ConversationUpdate {
	cu.mutation.SetDeleted(b)
	return cu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableDeleted(b *bool) *ConversationUpdate {
	if b != nil {
		cu.SetDeleted(*b)
	}
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *ConversationUpdate) SetUserID(u uuid.UUID) *ConversationUpdate {
	cu.mutation.SetUserID(u)
	return cu
}

// SetInstruction sets the "instruction" field.
func (cu *ConversationUpdate) SetInstruction(s string) *ConversationUpdate {
	cu.mutation.SetInstruction(s)
	return cu
}

// SetNillableInstruction sets the "instruction" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableInstruction(s *string) *ConversationUpdate {
	if s != nil {
		cu.SetInstruction(*s)
	}
	return cu
}

// ClearInstruction clears the value of the "instruction" field.
func (cu *ConversationUpdate) ClearInstruction() *ConversationUpdate {
	cu.mutation.ClearInstruction()
	return cu
}

// SetTitle sets the "title" field.
func (cu *ConversationUpdate) SetTitle(s string) *ConversationUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableTitle(s *string) *ConversationUpdate {
	if s != nil {
		cu.SetTitle(*s)
	}
	return cu
}

// ClearTitle clears the value of the "title" field.
func (cu *ConversationUpdate) ClearTitle() *ConversationUpdate {
	cu.mutation.ClearTitle()
	return cu
}

// SetTokenUsage sets the "token_usage" field.
func (cu *ConversationUpdate) SetTokenUsage(i int64) *ConversationUpdate {
	cu.mutation.ResetTokenUsage()
	cu.mutation.SetTokenUsage(i)
	return cu
}

// SetNillableTokenUsage sets the "token_usage" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableTokenUsage(i *int64) *ConversationUpdate {
	if i != nil {
		cu.SetTokenUsage(*i)
	}
	return cu
}

// AddTokenUsage adds i to the "token_usage" field.
func (cu *ConversationUpdate) AddTokenUsage(i int64) *ConversationUpdate {
	cu.mutation.AddTokenUsage(i)
	return cu
}

// AddConversationMessageIDs adds the "conversation_messages" edge to the ConversationMessage entity by IDs.
func (cu *ConversationUpdate) AddConversationMessageIDs(ids ...int) *ConversationUpdate {
	cu.mutation.AddConversationMessageIDs(ids...)
	return cu
}

// AddConversationMessages adds the "conversation_messages" edges to the ConversationMessage entity.
func (cu *ConversationUpdate) AddConversationMessages(c ...*ConversationMessage) *ConversationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddConversationMessageIDs(ids...)
}

// Mutation returns the ConversationMutation object of the builder.
func (cu *ConversationUpdate) Mutation() *ConversationMutation {
	return cu.mutation
}

// ClearConversationMessages clears all "conversation_messages" edges to the ConversationMessage entity.
func (cu *ConversationUpdate) ClearConversationMessages() *ConversationUpdate {
	cu.mutation.ClearConversationMessages()
	return cu
}

// RemoveConversationMessageIDs removes the "conversation_messages" edge to ConversationMessage entities by IDs.
func (cu *ConversationUpdate) RemoveConversationMessageIDs(ids ...int) *ConversationUpdate {
	cu.mutation.RemoveConversationMessageIDs(ids...)
	return cu
}

// RemoveConversationMessages removes "conversation_messages" edges to ConversationMessage entities.
func (cu *ConversationUpdate) RemoveConversationMessages(c ...*ConversationMessage) *ConversationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveConversationMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConversationUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks[int, ConversationMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConversationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConversationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConversationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ConversationUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := conversation.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *ConversationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(conversation.Table, conversation.Columns, sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(conversation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Deleted(); ok {
		_spec.SetField(conversation.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := cu.mutation.UserID(); ok {
		_spec.SetField(conversation.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := cu.mutation.Instruction(); ok {
		_spec.SetField(conversation.FieldInstruction, field.TypeString, value)
	}
	if cu.mutation.InstructionCleared() {
		_spec.ClearField(conversation.FieldInstruction, field.TypeString)
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(conversation.FieldTitle, field.TypeString, value)
	}
	if cu.mutation.TitleCleared() {
		_spec.ClearField(conversation.FieldTitle, field.TypeString)
	}
	if value, ok := cu.mutation.TokenUsage(); ok {
		_spec.SetField(conversation.FieldTokenUsage, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedTokenUsage(); ok {
		_spec.AddField(conversation.FieldTokenUsage, field.TypeInt64, value)
	}
	if cu.mutation.ConversationMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ConversationMessagesTable,
			Columns: []string{conversation.ConversationMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationmessage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedConversationMessagesIDs(); len(nodes) > 0 && !cu.mutation.ConversationMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ConversationMessagesTable,
			Columns: []string{conversation.ConversationMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationmessage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ConversationMessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ConversationMessagesTable,
			Columns: []string{conversation.ConversationMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationmessage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ConversationUpdateOne is the builder for updating a single Conversation entity.
type ConversationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConversationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ConversationUpdateOne) SetUpdatedAt(t time.Time) *ConversationUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeleted sets the "deleted" field.
func (cuo *ConversationUpdateOne) SetDeleted(b bool) *ConversationUpdateOne {
	cuo.mutation.SetDeleted(b)
	return cuo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableDeleted(b *bool) *ConversationUpdateOne {
	if b != nil {
		cuo.SetDeleted(*b)
	}
	return cuo
}

// SetUserID sets the "user_id" field.
func (cuo *ConversationUpdateOne) SetUserID(u uuid.UUID) *ConversationUpdateOne {
	cuo.mutation.SetUserID(u)
	return cuo
}

// SetInstruction sets the "instruction" field.
func (cuo *ConversationUpdateOne) SetInstruction(s string) *ConversationUpdateOne {
	cuo.mutation.SetInstruction(s)
	return cuo
}

// SetNillableInstruction sets the "instruction" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableInstruction(s *string) *ConversationUpdateOne {
	if s != nil {
		cuo.SetInstruction(*s)
	}
	return cuo
}

// ClearInstruction clears the value of the "instruction" field.
func (cuo *ConversationUpdateOne) ClearInstruction() *ConversationUpdateOne {
	cuo.mutation.ClearInstruction()
	return cuo
}

// SetTitle sets the "title" field.
func (cuo *ConversationUpdateOne) SetTitle(s string) *ConversationUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableTitle(s *string) *ConversationUpdateOne {
	if s != nil {
		cuo.SetTitle(*s)
	}
	return cuo
}

// ClearTitle clears the value of the "title" field.
func (cuo *ConversationUpdateOne) ClearTitle() *ConversationUpdateOne {
	cuo.mutation.ClearTitle()
	return cuo
}

// SetTokenUsage sets the "token_usage" field.
func (cuo *ConversationUpdateOne) SetTokenUsage(i int64) *ConversationUpdateOne {
	cuo.mutation.ResetTokenUsage()
	cuo.mutation.SetTokenUsage(i)
	return cuo
}

// SetNillableTokenUsage sets the "token_usage" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableTokenUsage(i *int64) *ConversationUpdateOne {
	if i != nil {
		cuo.SetTokenUsage(*i)
	}
	return cuo
}

// AddTokenUsage adds i to the "token_usage" field.
func (cuo *ConversationUpdateOne) AddTokenUsage(i int64) *ConversationUpdateOne {
	cuo.mutation.AddTokenUsage(i)
	return cuo
}

// AddConversationMessageIDs adds the "conversation_messages" edge to the ConversationMessage entity by IDs.
func (cuo *ConversationUpdateOne) AddConversationMessageIDs(ids ...int) *ConversationUpdateOne {
	cuo.mutation.AddConversationMessageIDs(ids...)
	return cuo
}

// AddConversationMessages adds the "conversation_messages" edges to the ConversationMessage entity.
func (cuo *ConversationUpdateOne) AddConversationMessages(c ...*ConversationMessage) *ConversationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddConversationMessageIDs(ids...)
}

// Mutation returns the ConversationMutation object of the builder.
func (cuo *ConversationUpdateOne) Mutation() *ConversationMutation {
	return cuo.mutation
}

// ClearConversationMessages clears all "conversation_messages" edges to the ConversationMessage entity.
func (cuo *ConversationUpdateOne) ClearConversationMessages() *ConversationUpdateOne {
	cuo.mutation.ClearConversationMessages()
	return cuo
}

// RemoveConversationMessageIDs removes the "conversation_messages" edge to ConversationMessage entities by IDs.
func (cuo *ConversationUpdateOne) RemoveConversationMessageIDs(ids ...int) *ConversationUpdateOne {
	cuo.mutation.RemoveConversationMessageIDs(ids...)
	return cuo
}

// RemoveConversationMessages removes "conversation_messages" edges to ConversationMessage entities.
func (cuo *ConversationUpdateOne) RemoveConversationMessages(c ...*ConversationMessage) *ConversationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveConversationMessageIDs(ids...)
}

// Where appends a list predicates to the ConversationUpdate builder.
func (cuo *ConversationUpdateOne) Where(ps ...predicate.Conversation) *ConversationUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConversationUpdateOne) Select(field string, fields ...string) *ConversationUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Conversation entity.
func (cuo *ConversationUpdateOne) Save(ctx context.Context) (*Conversation, error) {
	cuo.defaults()
	return withHooks[*Conversation, ConversationMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConversationUpdateOne) SaveX(ctx context.Context) *Conversation {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConversationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConversationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ConversationUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := conversation.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *ConversationUpdateOne) sqlSave(ctx context.Context) (_node *Conversation, err error) {
	_spec := sqlgraph.NewUpdateSpec(conversation.Table, conversation.Columns, sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Conversation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, conversation.FieldID)
		for _, f := range fields {
			if !conversation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != conversation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(conversation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Deleted(); ok {
		_spec.SetField(conversation.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.UserID(); ok {
		_spec.SetField(conversation.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := cuo.mutation.Instruction(); ok {
		_spec.SetField(conversation.FieldInstruction, field.TypeString, value)
	}
	if cuo.mutation.InstructionCleared() {
		_spec.ClearField(conversation.FieldInstruction, field.TypeString)
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(conversation.FieldTitle, field.TypeString, value)
	}
	if cuo.mutation.TitleCleared() {
		_spec.ClearField(conversation.FieldTitle, field.TypeString)
	}
	if value, ok := cuo.mutation.TokenUsage(); ok {
		_spec.SetField(conversation.FieldTokenUsage, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedTokenUsage(); ok {
		_spec.AddField(conversation.FieldTokenUsage, field.TypeInt64, value)
	}
	if cuo.mutation.ConversationMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ConversationMessagesTable,
			Columns: []string{conversation.ConversationMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationmessage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedConversationMessagesIDs(); len(nodes) > 0 && !cuo.mutation.ConversationMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ConversationMessagesTable,
			Columns: []string{conversation.ConversationMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationmessage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ConversationMessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ConversationMessagesTable,
			Columns: []string{conversation.ConversationMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationmessage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Conversation{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
