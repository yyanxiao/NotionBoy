// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notionboy/db/ent/account"
	"notionboy/db/ent/chathistory"
	"notionboy/db/ent/conversation"
	"notionboy/db/ent/conversationmessage"
	"notionboy/db/ent/order"
	"notionboy/db/ent/predicate"
	"notionboy/db/ent/product"
	"notionboy/db/ent/prompt"
	"notionboy/db/ent/quota"
	"notionboy/db/ent/wechatsession"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccount             = "Account"
	TypeChatHistory         = "ChatHistory"
	TypeConversation        = "Conversation"
	TypeConversationMessage = "ConversationMessage"
	TypeOrder               = "Order"
	TypeProduct             = "Product"
	TypePrompt              = "Prompt"
	TypeQuota               = "Quota"
	TypeWechatSession       = "WechatSession"
)

// AccountMutation represents an operation that mutates the Account nodes in the graph.
type AccountMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	created_at         *time.Time
	updated_at         *time.Time
	deleted            *bool
	uuid               *uuid.UUID
	user_id            *string
	user_type          *account.UserType
	database_id        *string
	access_token       *string
	notion_user_id     *string
	notion_user_email  *string
	is_latest_schema   *bool
	is_openai_api_user *bool
	openai_api_key     *string
	api_key            *uuid.UUID
	is_admin           *bool
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*Account, error)
	predicates         []predicate.Account
}

var _ ent.Mutation = (*AccountMutation)(nil)

// accountOption allows management of the mutation configuration using functional options.
type accountOption func(*AccountMutation)

// newAccountMutation creates new mutation for the Account entity.
func newAccountMutation(c config, op Op, opts ...accountOption) *AccountMutation {
	m := &AccountMutation{
		config:        c,
		op:            op,
		typ:           TypeAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccountID sets the ID field of the mutation.
func withAccountID(id int) accountOption {
	return func(m *AccountMutation) {
		var (
			err   error
			once  sync.Once
			value *Account
		)
		m.oldValue = func(ctx context.Context) (*Account, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Account.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccount sets the old Account of the mutation.
func withAccount(node *Account) accountOption {
	return func(m *AccountMutation) {
		m.oldValue = func(context.Context) (*Account, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccountMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccountMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Account.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AccountMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AccountMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AccountMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AccountMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AccountMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AccountMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeleted sets the "deleted" field.
func (m *AccountMutation) SetDeleted(b bool) {
	m.deleted = &b
}

// Deleted returns the value of the "deleted" field in the mutation.
func (m *AccountMutation) Deleted() (r bool, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old "deleted" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// ResetDeleted resets all changes to the "deleted" field.
func (m *AccountMutation) ResetDeleted() {
	m.deleted = nil
}

// SetUUID sets the "uuid" field.
func (m *AccountMutation) SetUUID(u uuid.UUID) {
	m.uuid = &u
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *AccountMutation) UUID() (r uuid.UUID, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldUUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ClearUUID clears the value of the "uuid" field.
func (m *AccountMutation) ClearUUID() {
	m.uuid = nil
	m.clearedFields[account.FieldUUID] = struct{}{}
}

// UUIDCleared returns if the "uuid" field was cleared in this mutation.
func (m *AccountMutation) UUIDCleared() bool {
	_, ok := m.clearedFields[account.FieldUUID]
	return ok
}

// ResetUUID resets all changes to the "uuid" field.
func (m *AccountMutation) ResetUUID() {
	m.uuid = nil
	delete(m.clearedFields, account.FieldUUID)
}

// SetUserID sets the "user_id" field.
func (m *AccountMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *AccountMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *AccountMutation) ResetUserID() {
	m.user_id = nil
}

// SetUserType sets the "user_type" field.
func (m *AccountMutation) SetUserType(at account.UserType) {
	m.user_type = &at
}

// UserType returns the value of the "user_type" field in the mutation.
func (m *AccountMutation) UserType() (r account.UserType, exists bool) {
	v := m.user_type
	if v == nil {
		return
	}
	return *v, true
}

// OldUserType returns the old "user_type" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldUserType(ctx context.Context) (v account.UserType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserType: %w", err)
	}
	return oldValue.UserType, nil
}

// ClearUserType clears the value of the "user_type" field.
func (m *AccountMutation) ClearUserType() {
	m.user_type = nil
	m.clearedFields[account.FieldUserType] = struct{}{}
}

// UserTypeCleared returns if the "user_type" field was cleared in this mutation.
func (m *AccountMutation) UserTypeCleared() bool {
	_, ok := m.clearedFields[account.FieldUserType]
	return ok
}

// ResetUserType resets all changes to the "user_type" field.
func (m *AccountMutation) ResetUserType() {
	m.user_type = nil
	delete(m.clearedFields, account.FieldUserType)
}

// SetDatabaseID sets the "database_id" field.
func (m *AccountMutation) SetDatabaseID(s string) {
	m.database_id = &s
}

// DatabaseID returns the value of the "database_id" field in the mutation.
func (m *AccountMutation) DatabaseID() (r string, exists bool) {
	v := m.database_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDatabaseID returns the old "database_id" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldDatabaseID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDatabaseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDatabaseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDatabaseID: %w", err)
	}
	return oldValue.DatabaseID, nil
}

// ClearDatabaseID clears the value of the "database_id" field.
func (m *AccountMutation) ClearDatabaseID() {
	m.database_id = nil
	m.clearedFields[account.FieldDatabaseID] = struct{}{}
}

// DatabaseIDCleared returns if the "database_id" field was cleared in this mutation.
func (m *AccountMutation) DatabaseIDCleared() bool {
	_, ok := m.clearedFields[account.FieldDatabaseID]
	return ok
}

// ResetDatabaseID resets all changes to the "database_id" field.
func (m *AccountMutation) ResetDatabaseID() {
	m.database_id = nil
	delete(m.clearedFields, account.FieldDatabaseID)
}

// SetAccessToken sets the "access_token" field.
func (m *AccountMutation) SetAccessToken(s string) {
	m.access_token = &s
}

// AccessToken returns the value of the "access_token" field in the mutation.
func (m *AccountMutation) AccessToken() (r string, exists bool) {
	v := m.access_token
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessToken returns the old "access_token" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldAccessToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessToken: %w", err)
	}
	return oldValue.AccessToken, nil
}

// ClearAccessToken clears the value of the "access_token" field.
func (m *AccountMutation) ClearAccessToken() {
	m.access_token = nil
	m.clearedFields[account.FieldAccessToken] = struct{}{}
}

// AccessTokenCleared returns if the "access_token" field was cleared in this mutation.
func (m *AccountMutation) AccessTokenCleared() bool {
	_, ok := m.clearedFields[account.FieldAccessToken]
	return ok
}

// ResetAccessToken resets all changes to the "access_token" field.
func (m *AccountMutation) ResetAccessToken() {
	m.access_token = nil
	delete(m.clearedFields, account.FieldAccessToken)
}

// SetNotionUserID sets the "notion_user_id" field.
func (m *AccountMutation) SetNotionUserID(s string) {
	m.notion_user_id = &s
}

// NotionUserID returns the value of the "notion_user_id" field in the mutation.
func (m *AccountMutation) NotionUserID() (r string, exists bool) {
	v := m.notion_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldNotionUserID returns the old "notion_user_id" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldNotionUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotionUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotionUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotionUserID: %w", err)
	}
	return oldValue.NotionUserID, nil
}

// ClearNotionUserID clears the value of the "notion_user_id" field.
func (m *AccountMutation) ClearNotionUserID() {
	m.notion_user_id = nil
	m.clearedFields[account.FieldNotionUserID] = struct{}{}
}

// NotionUserIDCleared returns if the "notion_user_id" field was cleared in this mutation.
func (m *AccountMutation) NotionUserIDCleared() bool {
	_, ok := m.clearedFields[account.FieldNotionUserID]
	return ok
}

// ResetNotionUserID resets all changes to the "notion_user_id" field.
func (m *AccountMutation) ResetNotionUserID() {
	m.notion_user_id = nil
	delete(m.clearedFields, account.FieldNotionUserID)
}

// SetNotionUserEmail sets the "notion_user_email" field.
func (m *AccountMutation) SetNotionUserEmail(s string) {
	m.notion_user_email = &s
}

// NotionUserEmail returns the value of the "notion_user_email" field in the mutation.
func (m *AccountMutation) NotionUserEmail() (r string, exists bool) {
	v := m.notion_user_email
	if v == nil {
		return
	}
	return *v, true
}

// OldNotionUserEmail returns the old "notion_user_email" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldNotionUserEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotionUserEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotionUserEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotionUserEmail: %w", err)
	}
	return oldValue.NotionUserEmail, nil
}

// ClearNotionUserEmail clears the value of the "notion_user_email" field.
func (m *AccountMutation) ClearNotionUserEmail() {
	m.notion_user_email = nil
	m.clearedFields[account.FieldNotionUserEmail] = struct{}{}
}

// NotionUserEmailCleared returns if the "notion_user_email" field was cleared in this mutation.
func (m *AccountMutation) NotionUserEmailCleared() bool {
	_, ok := m.clearedFields[account.FieldNotionUserEmail]
	return ok
}

// ResetNotionUserEmail resets all changes to the "notion_user_email" field.
func (m *AccountMutation) ResetNotionUserEmail() {
	m.notion_user_email = nil
	delete(m.clearedFields, account.FieldNotionUserEmail)
}

// SetIsLatestSchema sets the "is_latest_schema" field.
func (m *AccountMutation) SetIsLatestSchema(b bool) {
	m.is_latest_schema = &b
}

// IsLatestSchema returns the value of the "is_latest_schema" field in the mutation.
func (m *AccountMutation) IsLatestSchema() (r bool, exists bool) {
	v := m.is_latest_schema
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLatestSchema returns the old "is_latest_schema" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldIsLatestSchema(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLatestSchema is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLatestSchema requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLatestSchema: %w", err)
	}
	return oldValue.IsLatestSchema, nil
}

// ResetIsLatestSchema resets all changes to the "is_latest_schema" field.
func (m *AccountMutation) ResetIsLatestSchema() {
	m.is_latest_schema = nil
}

// SetIsOpenaiAPIUser sets the "is_openai_api_user" field.
func (m *AccountMutation) SetIsOpenaiAPIUser(b bool) {
	m.is_openai_api_user = &b
}

// IsOpenaiAPIUser returns the value of the "is_openai_api_user" field in the mutation.
func (m *AccountMutation) IsOpenaiAPIUser() (r bool, exists bool) {
	v := m.is_openai_api_user
	if v == nil {
		return
	}
	return *v, true
}

// OldIsOpenaiAPIUser returns the old "is_openai_api_user" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldIsOpenaiAPIUser(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsOpenaiAPIUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsOpenaiAPIUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsOpenaiAPIUser: %w", err)
	}
	return oldValue.IsOpenaiAPIUser, nil
}

// ResetIsOpenaiAPIUser resets all changes to the "is_openai_api_user" field.
func (m *AccountMutation) ResetIsOpenaiAPIUser() {
	m.is_openai_api_user = nil
}

// SetOpenaiAPIKey sets the "openai_api_key" field.
func (m *AccountMutation) SetOpenaiAPIKey(s string) {
	m.openai_api_key = &s
}

// OpenaiAPIKey returns the value of the "openai_api_key" field in the mutation.
func (m *AccountMutation) OpenaiAPIKey() (r string, exists bool) {
	v := m.openai_api_key
	if v == nil {
		return
	}
	return *v, true
}

// OldOpenaiAPIKey returns the old "openai_api_key" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldOpenaiAPIKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOpenaiAPIKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOpenaiAPIKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOpenaiAPIKey: %w", err)
	}
	return oldValue.OpenaiAPIKey, nil
}

// ClearOpenaiAPIKey clears the value of the "openai_api_key" field.
func (m *AccountMutation) ClearOpenaiAPIKey() {
	m.openai_api_key = nil
	m.clearedFields[account.FieldOpenaiAPIKey] = struct{}{}
}

// OpenaiAPIKeyCleared returns if the "openai_api_key" field was cleared in this mutation.
func (m *AccountMutation) OpenaiAPIKeyCleared() bool {
	_, ok := m.clearedFields[account.FieldOpenaiAPIKey]
	return ok
}

// ResetOpenaiAPIKey resets all changes to the "openai_api_key" field.
func (m *AccountMutation) ResetOpenaiAPIKey() {
	m.openai_api_key = nil
	delete(m.clearedFields, account.FieldOpenaiAPIKey)
}

// SetAPIKey sets the "api_key" field.
func (m *AccountMutation) SetAPIKey(u uuid.UUID) {
	m.api_key = &u
}

// APIKey returns the value of the "api_key" field in the mutation.
func (m *AccountMutation) APIKey() (r uuid.UUID, exists bool) {
	v := m.api_key
	if v == nil {
		return
	}
	return *v, true
}

// OldAPIKey returns the old "api_key" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldAPIKey(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAPIKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAPIKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAPIKey: %w", err)
	}
	return oldValue.APIKey, nil
}

// ClearAPIKey clears the value of the "api_key" field.
func (m *AccountMutation) ClearAPIKey() {
	m.api_key = nil
	m.clearedFields[account.FieldAPIKey] = struct{}{}
}

// APIKeyCleared returns if the "api_key" field was cleared in this mutation.
func (m *AccountMutation) APIKeyCleared() bool {
	_, ok := m.clearedFields[account.FieldAPIKey]
	return ok
}

// ResetAPIKey resets all changes to the "api_key" field.
func (m *AccountMutation) ResetAPIKey() {
	m.api_key = nil
	delete(m.clearedFields, account.FieldAPIKey)
}

// SetIsAdmin sets the "is_admin" field.
func (m *AccountMutation) SetIsAdmin(b bool) {
	m.is_admin = &b
}

// IsAdmin returns the value of the "is_admin" field in the mutation.
func (m *AccountMutation) IsAdmin() (r bool, exists bool) {
	v := m.is_admin
	if v == nil {
		return
	}
	return *v, true
}

// OldIsAdmin returns the old "is_admin" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldIsAdmin(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsAdmin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsAdmin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsAdmin: %w", err)
	}
	return oldValue.IsAdmin, nil
}

// ResetIsAdmin resets all changes to the "is_admin" field.
func (m *AccountMutation) ResetIsAdmin() {
	m.is_admin = nil
}

// Where appends a list predicates to the AccountMutation builder.
func (m *AccountMutation) Where(ps ...predicate.Account) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AccountMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AccountMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Account, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AccountMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AccountMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Account).
func (m *AccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccountMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.created_at != nil {
		fields = append(fields, account.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, account.FieldUpdatedAt)
	}
	if m.deleted != nil {
		fields = append(fields, account.FieldDeleted)
	}
	if m.uuid != nil {
		fields = append(fields, account.FieldUUID)
	}
	if m.user_id != nil {
		fields = append(fields, account.FieldUserID)
	}
	if m.user_type != nil {
		fields = append(fields, account.FieldUserType)
	}
	if m.database_id != nil {
		fields = append(fields, account.FieldDatabaseID)
	}
	if m.access_token != nil {
		fields = append(fields, account.FieldAccessToken)
	}
	if m.notion_user_id != nil {
		fields = append(fields, account.FieldNotionUserID)
	}
	if m.notion_user_email != nil {
		fields = append(fields, account.FieldNotionUserEmail)
	}
	if m.is_latest_schema != nil {
		fields = append(fields, account.FieldIsLatestSchema)
	}
	if m.is_openai_api_user != nil {
		fields = append(fields, account.FieldIsOpenaiAPIUser)
	}
	if m.openai_api_key != nil {
		fields = append(fields, account.FieldOpenaiAPIKey)
	}
	if m.api_key != nil {
		fields = append(fields, account.FieldAPIKey)
	}
	if m.is_admin != nil {
		fields = append(fields, account.FieldIsAdmin)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case account.FieldCreatedAt:
		return m.CreatedAt()
	case account.FieldUpdatedAt:
		return m.UpdatedAt()
	case account.FieldDeleted:
		return m.Deleted()
	case account.FieldUUID:
		return m.UUID()
	case account.FieldUserID:
		return m.UserID()
	case account.FieldUserType:
		return m.UserType()
	case account.FieldDatabaseID:
		return m.DatabaseID()
	case account.FieldAccessToken:
		return m.AccessToken()
	case account.FieldNotionUserID:
		return m.NotionUserID()
	case account.FieldNotionUserEmail:
		return m.NotionUserEmail()
	case account.FieldIsLatestSchema:
		return m.IsLatestSchema()
	case account.FieldIsOpenaiAPIUser:
		return m.IsOpenaiAPIUser()
	case account.FieldOpenaiAPIKey:
		return m.OpenaiAPIKey()
	case account.FieldAPIKey:
		return m.APIKey()
	case account.FieldIsAdmin:
		return m.IsAdmin()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case account.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case account.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case account.FieldDeleted:
		return m.OldDeleted(ctx)
	case account.FieldUUID:
		return m.OldUUID(ctx)
	case account.FieldUserID:
		return m.OldUserID(ctx)
	case account.FieldUserType:
		return m.OldUserType(ctx)
	case account.FieldDatabaseID:
		return m.OldDatabaseID(ctx)
	case account.FieldAccessToken:
		return m.OldAccessToken(ctx)
	case account.FieldNotionUserID:
		return m.OldNotionUserID(ctx)
	case account.FieldNotionUserEmail:
		return m.OldNotionUserEmail(ctx)
	case account.FieldIsLatestSchema:
		return m.OldIsLatestSchema(ctx)
	case account.FieldIsOpenaiAPIUser:
		return m.OldIsOpenaiAPIUser(ctx)
	case account.FieldOpenaiAPIKey:
		return m.OldOpenaiAPIKey(ctx)
	case account.FieldAPIKey:
		return m.OldAPIKey(ctx)
	case account.FieldIsAdmin:
		return m.OldIsAdmin(ctx)
	}
	return nil, fmt.Errorf("unknown Account field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case account.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case account.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case account.FieldDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	case account.FieldUUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case account.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case account.FieldUserType:
		v, ok := value.(account.UserType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserType(v)
		return nil
	case account.FieldDatabaseID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDatabaseID(v)
		return nil
	case account.FieldAccessToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessToken(v)
		return nil
	case account.FieldNotionUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotionUserID(v)
		return nil
	case account.FieldNotionUserEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotionUserEmail(v)
		return nil
	case account.FieldIsLatestSchema:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLatestSchema(v)
		return nil
	case account.FieldIsOpenaiAPIUser:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsOpenaiAPIUser(v)
		return nil
	case account.FieldOpenaiAPIKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOpenaiAPIKey(v)
		return nil
	case account.FieldAPIKey:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAPIKey(v)
		return nil
	case account.FieldIsAdmin:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsAdmin(v)
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccountMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccountMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Account numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccountMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(account.FieldUUID) {
		fields = append(fields, account.FieldUUID)
	}
	if m.FieldCleared(account.FieldUserType) {
		fields = append(fields, account.FieldUserType)
	}
	if m.FieldCleared(account.FieldDatabaseID) {
		fields = append(fields, account.FieldDatabaseID)
	}
	if m.FieldCleared(account.FieldAccessToken) {
		fields = append(fields, account.FieldAccessToken)
	}
	if m.FieldCleared(account.FieldNotionUserID) {
		fields = append(fields, account.FieldNotionUserID)
	}
	if m.FieldCleared(account.FieldNotionUserEmail) {
		fields = append(fields, account.FieldNotionUserEmail)
	}
	if m.FieldCleared(account.FieldOpenaiAPIKey) {
		fields = append(fields, account.FieldOpenaiAPIKey)
	}
	if m.FieldCleared(account.FieldAPIKey) {
		fields = append(fields, account.FieldAPIKey)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccountMutation) ClearField(name string) error {
	switch name {
	case account.FieldUUID:
		m.ClearUUID()
		return nil
	case account.FieldUserType:
		m.ClearUserType()
		return nil
	case account.FieldDatabaseID:
		m.ClearDatabaseID()
		return nil
	case account.FieldAccessToken:
		m.ClearAccessToken()
		return nil
	case account.FieldNotionUserID:
		m.ClearNotionUserID()
		return nil
	case account.FieldNotionUserEmail:
		m.ClearNotionUserEmail()
		return nil
	case account.FieldOpenaiAPIKey:
		m.ClearOpenaiAPIKey()
		return nil
	case account.FieldAPIKey:
		m.ClearAPIKey()
		return nil
	}
	return fmt.Errorf("unknown Account nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccountMutation) ResetField(name string) error {
	switch name {
	case account.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case account.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case account.FieldDeleted:
		m.ResetDeleted()
		return nil
	case account.FieldUUID:
		m.ResetUUID()
		return nil
	case account.FieldUserID:
		m.ResetUserID()
		return nil
	case account.FieldUserType:
		m.ResetUserType()
		return nil
	case account.FieldDatabaseID:
		m.ResetDatabaseID()
		return nil
	case account.FieldAccessToken:
		m.ResetAccessToken()
		return nil
	case account.FieldNotionUserID:
		m.ResetNotionUserID()
		return nil
	case account.FieldNotionUserEmail:
		m.ResetNotionUserEmail()
		return nil
	case account.FieldIsLatestSchema:
		m.ResetIsLatestSchema()
		return nil
	case account.FieldIsOpenaiAPIUser:
		m.ResetIsOpenaiAPIUser()
		return nil
	case account.FieldOpenaiAPIKey:
		m.ResetOpenaiAPIKey()
		return nil
	case account.FieldAPIKey:
		m.ResetAPIKey()
		return nil
	case account.FieldIsAdmin:
		m.ResetIsAdmin()
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccountMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccountMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccountMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Account unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccountMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Account edge %s", name)
}

// ChatHistoryMutation represents an operation that mutates the ChatHistory nodes in the graph.
type ChatHistoryMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	created_at          *time.Time
	updated_at          *time.Time
	deleted             *bool
	user_id             *int
	adduser_id          *int
	conversation_idx    *int
	addconversation_idx *int
	conversation_id     *uuid.UUID
	message_id          *string
	message_idx         *int
	addmessage_idx      *int
	request             *string
	response            *string
	token_usage         *int
	addtoken_usage      *int
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*ChatHistory, error)
	predicates          []predicate.ChatHistory
}

var _ ent.Mutation = (*ChatHistoryMutation)(nil)

// chathistoryOption allows management of the mutation configuration using functional options.
type chathistoryOption func(*ChatHistoryMutation)

// newChatHistoryMutation creates new mutation for the ChatHistory entity.
func newChatHistoryMutation(c config, op Op, opts ...chathistoryOption) *ChatHistoryMutation {
	m := &ChatHistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeChatHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatHistoryID sets the ID field of the mutation.
func withChatHistoryID(id int) chathistoryOption {
	return func(m *ChatHistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *ChatHistory
		)
		m.oldValue = func(ctx context.Context) (*ChatHistory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChatHistory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChatHistory sets the old ChatHistory of the mutation.
func withChatHistory(node *ChatHistory) chathistoryOption {
	return func(m *ChatHistoryMutation) {
		m.oldValue = func(context.Context) (*ChatHistory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatHistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatHistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatHistoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChatHistoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ChatHistory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ChatHistoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ChatHistoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ChatHistory entity.
// If the ChatHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ChatHistoryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ChatHistoryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ChatHistoryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ChatHistory entity.
// If the ChatHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ChatHistoryMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeleted sets the "deleted" field.
func (m *ChatHistoryMutation) SetDeleted(b bool) {
	m.deleted = &b
}

// Deleted returns the value of the "deleted" field in the mutation.
func (m *ChatHistoryMutation) Deleted() (r bool, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old "deleted" field's value of the ChatHistory entity.
// If the ChatHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoryMutation) OldDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// ResetDeleted resets all changes to the "deleted" field.
func (m *ChatHistoryMutation) ResetDeleted() {
	m.deleted = nil
}

// SetUserID sets the "user_id" field.
func (m *ChatHistoryMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ChatHistoryMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ChatHistory entity.
// If the ChatHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoryMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *ChatHistoryMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *ChatHistoryMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ChatHistoryMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetConversationIdx sets the "conversation_idx" field.
func (m *ChatHistoryMutation) SetConversationIdx(i int) {
	m.conversation_idx = &i
	m.addconversation_idx = nil
}

// ConversationIdx returns the value of the "conversation_idx" field in the mutation.
func (m *ChatHistoryMutation) ConversationIdx() (r int, exists bool) {
	v := m.conversation_idx
	if v == nil {
		return
	}
	return *v, true
}

// OldConversationIdx returns the old "conversation_idx" field's value of the ChatHistory entity.
// If the ChatHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoryMutation) OldConversationIdx(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConversationIdx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConversationIdx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConversationIdx: %w", err)
	}
	return oldValue.ConversationIdx, nil
}

// AddConversationIdx adds i to the "conversation_idx" field.
func (m *ChatHistoryMutation) AddConversationIdx(i int) {
	if m.addconversation_idx != nil {
		*m.addconversation_idx += i
	} else {
		m.addconversation_idx = &i
	}
}

// AddedConversationIdx returns the value that was added to the "conversation_idx" field in this mutation.
func (m *ChatHistoryMutation) AddedConversationIdx() (r int, exists bool) {
	v := m.addconversation_idx
	if v == nil {
		return
	}
	return *v, true
}

// ResetConversationIdx resets all changes to the "conversation_idx" field.
func (m *ChatHistoryMutation) ResetConversationIdx() {
	m.conversation_idx = nil
	m.addconversation_idx = nil
}

// SetConversationID sets the "conversation_id" field.
func (m *ChatHistoryMutation) SetConversationID(u uuid.UUID) {
	m.conversation_id = &u
}

// ConversationID returns the value of the "conversation_id" field in the mutation.
func (m *ChatHistoryMutation) ConversationID() (r uuid.UUID, exists bool) {
	v := m.conversation_id
	if v == nil {
		return
	}
	return *v, true
}

// OldConversationID returns the old "conversation_id" field's value of the ChatHistory entity.
// If the ChatHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoryMutation) OldConversationID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConversationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConversationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConversationID: %w", err)
	}
	return oldValue.ConversationID, nil
}

// ResetConversationID resets all changes to the "conversation_id" field.
func (m *ChatHistoryMutation) ResetConversationID() {
	m.conversation_id = nil
}

// SetMessageID sets the "message_id" field.
func (m *ChatHistoryMutation) SetMessageID(s string) {
	m.message_id = &s
}

// MessageID returns the value of the "message_id" field in the mutation.
func (m *ChatHistoryMutation) MessageID() (r string, exists bool) {
	v := m.message_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMessageID returns the old "message_id" field's value of the ChatHistory entity.
// If the ChatHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoryMutation) OldMessageID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessageID: %w", err)
	}
	return oldValue.MessageID, nil
}

// ClearMessageID clears the value of the "message_id" field.
func (m *ChatHistoryMutation) ClearMessageID() {
	m.message_id = nil
	m.clearedFields[chathistory.FieldMessageID] = struct{}{}
}

// MessageIDCleared returns if the "message_id" field was cleared in this mutation.
func (m *ChatHistoryMutation) MessageIDCleared() bool {
	_, ok := m.clearedFields[chathistory.FieldMessageID]
	return ok
}

// ResetMessageID resets all changes to the "message_id" field.
func (m *ChatHistoryMutation) ResetMessageID() {
	m.message_id = nil
	delete(m.clearedFields, chathistory.FieldMessageID)
}

// SetMessageIdx sets the "message_idx" field.
func (m *ChatHistoryMutation) SetMessageIdx(i int) {
	m.message_idx = &i
	m.addmessage_idx = nil
}

// MessageIdx returns the value of the "message_idx" field in the mutation.
func (m *ChatHistoryMutation) MessageIdx() (r int, exists bool) {
	v := m.message_idx
	if v == nil {
		return
	}
	return *v, true
}

// OldMessageIdx returns the old "message_idx" field's value of the ChatHistory entity.
// If the ChatHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoryMutation) OldMessageIdx(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessageIdx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessageIdx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessageIdx: %w", err)
	}
	return oldValue.MessageIdx, nil
}

// AddMessageIdx adds i to the "message_idx" field.
func (m *ChatHistoryMutation) AddMessageIdx(i int) {
	if m.addmessage_idx != nil {
		*m.addmessage_idx += i
	} else {
		m.addmessage_idx = &i
	}
}

// AddedMessageIdx returns the value that was added to the "message_idx" field in this mutation.
func (m *ChatHistoryMutation) AddedMessageIdx() (r int, exists bool) {
	v := m.addmessage_idx
	if v == nil {
		return
	}
	return *v, true
}

// ClearMessageIdx clears the value of the "message_idx" field.
func (m *ChatHistoryMutation) ClearMessageIdx() {
	m.message_idx = nil
	m.addmessage_idx = nil
	m.clearedFields[chathistory.FieldMessageIdx] = struct{}{}
}

// MessageIdxCleared returns if the "message_idx" field was cleared in this mutation.
func (m *ChatHistoryMutation) MessageIdxCleared() bool {
	_, ok := m.clearedFields[chathistory.FieldMessageIdx]
	return ok
}

// ResetMessageIdx resets all changes to the "message_idx" field.
func (m *ChatHistoryMutation) ResetMessageIdx() {
	m.message_idx = nil
	m.addmessage_idx = nil
	delete(m.clearedFields, chathistory.FieldMessageIdx)
}

// SetRequest sets the "request" field.
func (m *ChatHistoryMutation) SetRequest(s string) {
	m.request = &s
}

// Request returns the value of the "request" field in the mutation.
func (m *ChatHistoryMutation) Request() (r string, exists bool) {
	v := m.request
	if v == nil {
		return
	}
	return *v, true
}

// OldRequest returns the old "request" field's value of the ChatHistory entity.
// If the ChatHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoryMutation) OldRequest(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequest is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequest requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequest: %w", err)
	}
	return oldValue.Request, nil
}

// ClearRequest clears the value of the "request" field.
func (m *ChatHistoryMutation) ClearRequest() {
	m.request = nil
	m.clearedFields[chathistory.FieldRequest] = struct{}{}
}

// RequestCleared returns if the "request" field was cleared in this mutation.
func (m *ChatHistoryMutation) RequestCleared() bool {
	_, ok := m.clearedFields[chathistory.FieldRequest]
	return ok
}

// ResetRequest resets all changes to the "request" field.
func (m *ChatHistoryMutation) ResetRequest() {
	m.request = nil
	delete(m.clearedFields, chathistory.FieldRequest)
}

// SetResponse sets the "response" field.
func (m *ChatHistoryMutation) SetResponse(s string) {
	m.response = &s
}

// Response returns the value of the "response" field in the mutation.
func (m *ChatHistoryMutation) Response() (r string, exists bool) {
	v := m.response
	if v == nil {
		return
	}
	return *v, true
}

// OldResponse returns the old "response" field's value of the ChatHistory entity.
// If the ChatHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoryMutation) OldResponse(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResponse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResponse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResponse: %w", err)
	}
	return oldValue.Response, nil
}

// ClearResponse clears the value of the "response" field.
func (m *ChatHistoryMutation) ClearResponse() {
	m.response = nil
	m.clearedFields[chathistory.FieldResponse] = struct{}{}
}

// ResponseCleared returns if the "response" field was cleared in this mutation.
func (m *ChatHistoryMutation) ResponseCleared() bool {
	_, ok := m.clearedFields[chathistory.FieldResponse]
	return ok
}

// ResetResponse resets all changes to the "response" field.
func (m *ChatHistoryMutation) ResetResponse() {
	m.response = nil
	delete(m.clearedFields, chathistory.FieldResponse)
}

// SetTokenUsage sets the "token_usage" field.
func (m *ChatHistoryMutation) SetTokenUsage(i int) {
	m.token_usage = &i
	m.addtoken_usage = nil
}

// TokenUsage returns the value of the "token_usage" field in the mutation.
func (m *ChatHistoryMutation) TokenUsage() (r int, exists bool) {
	v := m.token_usage
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenUsage returns the old "token_usage" field's value of the ChatHistory entity.
// If the ChatHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatHistoryMutation) OldTokenUsage(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenUsage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenUsage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenUsage: %w", err)
	}
	return oldValue.TokenUsage, nil
}

// AddTokenUsage adds i to the "token_usage" field.
func (m *ChatHistoryMutation) AddTokenUsage(i int) {
	if m.addtoken_usage != nil {
		*m.addtoken_usage += i
	} else {
		m.addtoken_usage = &i
	}
}

// AddedTokenUsage returns the value that was added to the "token_usage" field in this mutation.
func (m *ChatHistoryMutation) AddedTokenUsage() (r int, exists bool) {
	v := m.addtoken_usage
	if v == nil {
		return
	}
	return *v, true
}

// ClearTokenUsage clears the value of the "token_usage" field.
func (m *ChatHistoryMutation) ClearTokenUsage() {
	m.token_usage = nil
	m.addtoken_usage = nil
	m.clearedFields[chathistory.FieldTokenUsage] = struct{}{}
}

// TokenUsageCleared returns if the "token_usage" field was cleared in this mutation.
func (m *ChatHistoryMutation) TokenUsageCleared() bool {
	_, ok := m.clearedFields[chathistory.FieldTokenUsage]
	return ok
}

// ResetTokenUsage resets all changes to the "token_usage" field.
func (m *ChatHistoryMutation) ResetTokenUsage() {
	m.token_usage = nil
	m.addtoken_usage = nil
	delete(m.clearedFields, chathistory.FieldTokenUsage)
}

// Where appends a list predicates to the ChatHistoryMutation builder.
func (m *ChatHistoryMutation) Where(ps ...predicate.ChatHistory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChatHistoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChatHistoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ChatHistory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChatHistoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChatHistoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ChatHistory).
func (m *ChatHistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatHistoryMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, chathistory.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, chathistory.FieldUpdatedAt)
	}
	if m.deleted != nil {
		fields = append(fields, chathistory.FieldDeleted)
	}
	if m.user_id != nil {
		fields = append(fields, chathistory.FieldUserID)
	}
	if m.conversation_idx != nil {
		fields = append(fields, chathistory.FieldConversationIdx)
	}
	if m.conversation_id != nil {
		fields = append(fields, chathistory.FieldConversationID)
	}
	if m.message_id != nil {
		fields = append(fields, chathistory.FieldMessageID)
	}
	if m.message_idx != nil {
		fields = append(fields, chathistory.FieldMessageIdx)
	}
	if m.request != nil {
		fields = append(fields, chathistory.FieldRequest)
	}
	if m.response != nil {
		fields = append(fields, chathistory.FieldResponse)
	}
	if m.token_usage != nil {
		fields = append(fields, chathistory.FieldTokenUsage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatHistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chathistory.FieldCreatedAt:
		return m.CreatedAt()
	case chathistory.FieldUpdatedAt:
		return m.UpdatedAt()
	case chathistory.FieldDeleted:
		return m.Deleted()
	case chathistory.FieldUserID:
		return m.UserID()
	case chathistory.FieldConversationIdx:
		return m.ConversationIdx()
	case chathistory.FieldConversationID:
		return m.ConversationID()
	case chathistory.FieldMessageID:
		return m.MessageID()
	case chathistory.FieldMessageIdx:
		return m.MessageIdx()
	case chathistory.FieldRequest:
		return m.Request()
	case chathistory.FieldResponse:
		return m.Response()
	case chathistory.FieldTokenUsage:
		return m.TokenUsage()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatHistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chathistory.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case chathistory.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case chathistory.FieldDeleted:
		return m.OldDeleted(ctx)
	case chathistory.FieldUserID:
		return m.OldUserID(ctx)
	case chathistory.FieldConversationIdx:
		return m.OldConversationIdx(ctx)
	case chathistory.FieldConversationID:
		return m.OldConversationID(ctx)
	case chathistory.FieldMessageID:
		return m.OldMessageID(ctx)
	case chathistory.FieldMessageIdx:
		return m.OldMessageIdx(ctx)
	case chathistory.FieldRequest:
		return m.OldRequest(ctx)
	case chathistory.FieldResponse:
		return m.OldResponse(ctx)
	case chathistory.FieldTokenUsage:
		return m.OldTokenUsage(ctx)
	}
	return nil, fmt.Errorf("unknown ChatHistory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatHistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chathistory.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case chathistory.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case chathistory.FieldDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	case chathistory.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case chathistory.FieldConversationIdx:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConversationIdx(v)
		return nil
	case chathistory.FieldConversationID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConversationID(v)
		return nil
	case chathistory.FieldMessageID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessageID(v)
		return nil
	case chathistory.FieldMessageIdx:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessageIdx(v)
		return nil
	case chathistory.FieldRequest:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequest(v)
		return nil
	case chathistory.FieldResponse:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResponse(v)
		return nil
	case chathistory.FieldTokenUsage:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenUsage(v)
		return nil
	}
	return fmt.Errorf("unknown ChatHistory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatHistoryMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, chathistory.FieldUserID)
	}
	if m.addconversation_idx != nil {
		fields = append(fields, chathistory.FieldConversationIdx)
	}
	if m.addmessage_idx != nil {
		fields = append(fields, chathistory.FieldMessageIdx)
	}
	if m.addtoken_usage != nil {
		fields = append(fields, chathistory.FieldTokenUsage)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatHistoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case chathistory.FieldUserID:
		return m.AddedUserID()
	case chathistory.FieldConversationIdx:
		return m.AddedConversationIdx()
	case chathistory.FieldMessageIdx:
		return m.AddedMessageIdx()
	case chathistory.FieldTokenUsage:
		return m.AddedTokenUsage()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatHistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case chathistory.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case chathistory.FieldConversationIdx:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddConversationIdx(v)
		return nil
	case chathistory.FieldMessageIdx:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMessageIdx(v)
		return nil
	case chathistory.FieldTokenUsage:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTokenUsage(v)
		return nil
	}
	return fmt.Errorf("unknown ChatHistory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatHistoryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(chathistory.FieldMessageID) {
		fields = append(fields, chathistory.FieldMessageID)
	}
	if m.FieldCleared(chathistory.FieldMessageIdx) {
		fields = append(fields, chathistory.FieldMessageIdx)
	}
	if m.FieldCleared(chathistory.FieldRequest) {
		fields = append(fields, chathistory.FieldRequest)
	}
	if m.FieldCleared(chathistory.FieldResponse) {
		fields = append(fields, chathistory.FieldResponse)
	}
	if m.FieldCleared(chathistory.FieldTokenUsage) {
		fields = append(fields, chathistory.FieldTokenUsage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatHistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatHistoryMutation) ClearField(name string) error {
	switch name {
	case chathistory.FieldMessageID:
		m.ClearMessageID()
		return nil
	case chathistory.FieldMessageIdx:
		m.ClearMessageIdx()
		return nil
	case chathistory.FieldRequest:
		m.ClearRequest()
		return nil
	case chathistory.FieldResponse:
		m.ClearResponse()
		return nil
	case chathistory.FieldTokenUsage:
		m.ClearTokenUsage()
		return nil
	}
	return fmt.Errorf("unknown ChatHistory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatHistoryMutation) ResetField(name string) error {
	switch name {
	case chathistory.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case chathistory.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case chathistory.FieldDeleted:
		m.ResetDeleted()
		return nil
	case chathistory.FieldUserID:
		m.ResetUserID()
		return nil
	case chathistory.FieldConversationIdx:
		m.ResetConversationIdx()
		return nil
	case chathistory.FieldConversationID:
		m.ResetConversationID()
		return nil
	case chathistory.FieldMessageID:
		m.ResetMessageID()
		return nil
	case chathistory.FieldMessageIdx:
		m.ResetMessageIdx()
		return nil
	case chathistory.FieldRequest:
		m.ResetRequest()
		return nil
	case chathistory.FieldResponse:
		m.ResetResponse()
		return nil
	case chathistory.FieldTokenUsage:
		m.ResetTokenUsage()
		return nil
	}
	return fmt.Errorf("unknown ChatHistory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatHistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatHistoryMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatHistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatHistoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatHistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatHistoryMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatHistoryMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ChatHistory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatHistoryMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ChatHistory edge %s", name)
}

// ConversationMutation represents an operation that mutates the Conversation nodes in the graph.
type ConversationMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	created_at                   *time.Time
	updated_at                   *time.Time
	deleted                      *bool
	uuid                         *uuid.UUID
	user_id                      *uuid.UUID
	instruction                  *string
	title                        *string
	token_usage                  *int64
	addtoken_usage               *int64
	clearedFields                map[string]struct{}
	conversation_messages        map[int]struct{}
	removedconversation_messages map[int]struct{}
	clearedconversation_messages bool
	done                         bool
	oldValue                     func(context.Context) (*Conversation, error)
	predicates                   []predicate.Conversation
}

var _ ent.Mutation = (*ConversationMutation)(nil)

// conversationOption allows management of the mutation configuration using functional options.
type conversationOption func(*ConversationMutation)

// newConversationMutation creates new mutation for the Conversation entity.
func newConversationMutation(c config, op Op, opts ...conversationOption) *ConversationMutation {
	m := &ConversationMutation{
		config:        c,
		op:            op,
		typ:           TypeConversation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withConversationID sets the ID field of the mutation.
func withConversationID(id int) conversationOption {
	return func(m *ConversationMutation) {
		var (
			err   error
			once  sync.Once
			value *Conversation
		)
		m.oldValue = func(ctx context.Context) (*Conversation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Conversation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withConversation sets the old Conversation of the mutation.
func withConversation(node *Conversation) conversationOption {
	return func(m *ConversationMutation) {
		m.oldValue = func(context.Context) (*Conversation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ConversationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ConversationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ConversationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ConversationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Conversation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ConversationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ConversationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Conversation entity.
// If the Conversation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ConversationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ConversationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ConversationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Conversation entity.
// If the Conversation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ConversationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeleted sets the "deleted" field.
func (m *ConversationMutation) SetDeleted(b bool) {
	m.deleted = &b
}

// Deleted returns the value of the "deleted" field in the mutation.
func (m *ConversationMutation) Deleted() (r bool, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old "deleted" field's value of the Conversation entity.
// If the Conversation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMutation) OldDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// ResetDeleted resets all changes to the "deleted" field.
func (m *ConversationMutation) ResetDeleted() {
	m.deleted = nil
}

// SetUUID sets the "uuid" field.
func (m *ConversationMutation) SetUUID(u uuid.UUID) {
	m.uuid = &u
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *ConversationMutation) UUID() (r uuid.UUID, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the Conversation entity.
// If the Conversation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMutation) OldUUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *ConversationMutation) ResetUUID() {
	m.uuid = nil
}

// SetUserID sets the "user_id" field.
func (m *ConversationMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ConversationMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Conversation entity.
// If the Conversation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ConversationMutation) ResetUserID() {
	m.user_id = nil
}

// SetInstruction sets the "instruction" field.
func (m *ConversationMutation) SetInstruction(s string) {
	m.instruction = &s
}

// Instruction returns the value of the "instruction" field in the mutation.
func (m *ConversationMutation) Instruction() (r string, exists bool) {
	v := m.instruction
	if v == nil {
		return
	}
	return *v, true
}

// OldInstruction returns the old "instruction" field's value of the Conversation entity.
// If the Conversation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMutation) OldInstruction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstruction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstruction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstruction: %w", err)
	}
	return oldValue.Instruction, nil
}

// ClearInstruction clears the value of the "instruction" field.
func (m *ConversationMutation) ClearInstruction() {
	m.instruction = nil
	m.clearedFields[conversation.FieldInstruction] = struct{}{}
}

// InstructionCleared returns if the "instruction" field was cleared in this mutation.
func (m *ConversationMutation) InstructionCleared() bool {
	_, ok := m.clearedFields[conversation.FieldInstruction]
	return ok
}

// ResetInstruction resets all changes to the "instruction" field.
func (m *ConversationMutation) ResetInstruction() {
	m.instruction = nil
	delete(m.clearedFields, conversation.FieldInstruction)
}

// SetTitle sets the "title" field.
func (m *ConversationMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ConversationMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Conversation entity.
// If the Conversation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *ConversationMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[conversation.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *ConversationMutation) TitleCleared() bool {
	_, ok := m.clearedFields[conversation.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *ConversationMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, conversation.FieldTitle)
}

// SetTokenUsage sets the "token_usage" field.
func (m *ConversationMutation) SetTokenUsage(i int64) {
	m.token_usage = &i
	m.addtoken_usage = nil
}

// TokenUsage returns the value of the "token_usage" field in the mutation.
func (m *ConversationMutation) TokenUsage() (r int64, exists bool) {
	v := m.token_usage
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenUsage returns the old "token_usage" field's value of the Conversation entity.
// If the Conversation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMutation) OldTokenUsage(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenUsage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenUsage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenUsage: %w", err)
	}
	return oldValue.TokenUsage, nil
}

// AddTokenUsage adds i to the "token_usage" field.
func (m *ConversationMutation) AddTokenUsage(i int64) {
	if m.addtoken_usage != nil {
		*m.addtoken_usage += i
	} else {
		m.addtoken_usage = &i
	}
}

// AddedTokenUsage returns the value that was added to the "token_usage" field in this mutation.
func (m *ConversationMutation) AddedTokenUsage() (r int64, exists bool) {
	v := m.addtoken_usage
	if v == nil {
		return
	}
	return *v, true
}

// ResetTokenUsage resets all changes to the "token_usage" field.
func (m *ConversationMutation) ResetTokenUsage() {
	m.token_usage = nil
	m.addtoken_usage = nil
}

// AddConversationMessageIDs adds the "conversation_messages" edge to the ConversationMessage entity by ids.
func (m *ConversationMutation) AddConversationMessageIDs(ids ...int) {
	if m.conversation_messages == nil {
		m.conversation_messages = make(map[int]struct{})
	}
	for i := range ids {
		m.conversation_messages[ids[i]] = struct{}{}
	}
}

// ClearConversationMessages clears the "conversation_messages" edge to the ConversationMessage entity.
func (m *ConversationMutation) ClearConversationMessages() {
	m.clearedconversation_messages = true
}

// ConversationMessagesCleared reports if the "conversation_messages" edge to the ConversationMessage entity was cleared.
func (m *ConversationMutation) ConversationMessagesCleared() bool {
	return m.clearedconversation_messages
}

// RemoveConversationMessageIDs removes the "conversation_messages" edge to the ConversationMessage entity by IDs.
func (m *ConversationMutation) RemoveConversationMessageIDs(ids ...int) {
	if m.removedconversation_messages == nil {
		m.removedconversation_messages = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.conversation_messages, ids[i])
		m.removedconversation_messages[ids[i]] = struct{}{}
	}
}

// RemovedConversationMessages returns the removed IDs of the "conversation_messages" edge to the ConversationMessage entity.
func (m *ConversationMutation) RemovedConversationMessagesIDs() (ids []int) {
	for id := range m.removedconversation_messages {
		ids = append(ids, id)
	}
	return
}

// ConversationMessagesIDs returns the "conversation_messages" edge IDs in the mutation.
func (m *ConversationMutation) ConversationMessagesIDs() (ids []int) {
	for id := range m.conversation_messages {
		ids = append(ids, id)
	}
	return
}

// ResetConversationMessages resets all changes to the "conversation_messages" edge.
func (m *ConversationMutation) ResetConversationMessages() {
	m.conversation_messages = nil
	m.clearedconversation_messages = false
	m.removedconversation_messages = nil
}

// Where appends a list predicates to the ConversationMutation builder.
func (m *ConversationMutation) Where(ps ...predicate.Conversation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ConversationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ConversationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Conversation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ConversationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ConversationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Conversation).
func (m *ConversationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ConversationMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, conversation.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, conversation.FieldUpdatedAt)
	}
	if m.deleted != nil {
		fields = append(fields, conversation.FieldDeleted)
	}
	if m.uuid != nil {
		fields = append(fields, conversation.FieldUUID)
	}
	if m.user_id != nil {
		fields = append(fields, conversation.FieldUserID)
	}
	if m.instruction != nil {
		fields = append(fields, conversation.FieldInstruction)
	}
	if m.title != nil {
		fields = append(fields, conversation.FieldTitle)
	}
	if m.token_usage != nil {
		fields = append(fields, conversation.FieldTokenUsage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ConversationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case conversation.FieldCreatedAt:
		return m.CreatedAt()
	case conversation.FieldUpdatedAt:
		return m.UpdatedAt()
	case conversation.FieldDeleted:
		return m.Deleted()
	case conversation.FieldUUID:
		return m.UUID()
	case conversation.FieldUserID:
		return m.UserID()
	case conversation.FieldInstruction:
		return m.Instruction()
	case conversation.FieldTitle:
		return m.Title()
	case conversation.FieldTokenUsage:
		return m.TokenUsage()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ConversationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case conversation.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case conversation.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case conversation.FieldDeleted:
		return m.OldDeleted(ctx)
	case conversation.FieldUUID:
		return m.OldUUID(ctx)
	case conversation.FieldUserID:
		return m.OldUserID(ctx)
	case conversation.FieldInstruction:
		return m.OldInstruction(ctx)
	case conversation.FieldTitle:
		return m.OldTitle(ctx)
	case conversation.FieldTokenUsage:
		return m.OldTokenUsage(ctx)
	}
	return nil, fmt.Errorf("unknown Conversation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConversationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case conversation.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case conversation.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case conversation.FieldDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	case conversation.FieldUUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case conversation.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case conversation.FieldInstruction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstruction(v)
		return nil
	case conversation.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case conversation.FieldTokenUsage:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenUsage(v)
		return nil
	}
	return fmt.Errorf("unknown Conversation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ConversationMutation) AddedFields() []string {
	var fields []string
	if m.addtoken_usage != nil {
		fields = append(fields, conversation.FieldTokenUsage)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ConversationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case conversation.FieldTokenUsage:
		return m.AddedTokenUsage()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConversationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case conversation.FieldTokenUsage:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTokenUsage(v)
		return nil
	}
	return fmt.Errorf("unknown Conversation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ConversationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(conversation.FieldInstruction) {
		fields = append(fields, conversation.FieldInstruction)
	}
	if m.FieldCleared(conversation.FieldTitle) {
		fields = append(fields, conversation.FieldTitle)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ConversationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ConversationMutation) ClearField(name string) error {
	switch name {
	case conversation.FieldInstruction:
		m.ClearInstruction()
		return nil
	case conversation.FieldTitle:
		m.ClearTitle()
		return nil
	}
	return fmt.Errorf("unknown Conversation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ConversationMutation) ResetField(name string) error {
	switch name {
	case conversation.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case conversation.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case conversation.FieldDeleted:
		m.ResetDeleted()
		return nil
	case conversation.FieldUUID:
		m.ResetUUID()
		return nil
	case conversation.FieldUserID:
		m.ResetUserID()
		return nil
	case conversation.FieldInstruction:
		m.ResetInstruction()
		return nil
	case conversation.FieldTitle:
		m.ResetTitle()
		return nil
	case conversation.FieldTokenUsage:
		m.ResetTokenUsage()
		return nil
	}
	return fmt.Errorf("unknown Conversation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ConversationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.conversation_messages != nil {
		edges = append(edges, conversation.EdgeConversationMessages)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ConversationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case conversation.EdgeConversationMessages:
		ids := make([]ent.Value, 0, len(m.conversation_messages))
		for id := range m.conversation_messages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ConversationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedconversation_messages != nil {
		edges = append(edges, conversation.EdgeConversationMessages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ConversationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case conversation.EdgeConversationMessages:
		ids := make([]ent.Value, 0, len(m.removedconversation_messages))
		for id := range m.removedconversation_messages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ConversationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedconversation_messages {
		edges = append(edges, conversation.EdgeConversationMessages)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ConversationMutation) EdgeCleared(name string) bool {
	switch name {
	case conversation.EdgeConversationMessages:
		return m.clearedconversation_messages
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ConversationMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Conversation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ConversationMutation) ResetEdge(name string) error {
	switch name {
	case conversation.EdgeConversationMessages:
		m.ResetConversationMessages()
		return nil
	}
	return fmt.Errorf("unknown Conversation edge %s", name)
}

// ConversationMessageMutation represents an operation that mutates the ConversationMessage nodes in the graph.
type ConversationMessageMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	created_at           *time.Time
	updated_at           *time.Time
	deleted              *bool
	uuid                 *uuid.UUID
	user_id              *uuid.UUID
	conversation_id      *uuid.UUID
	request              *string
	response             *string
	token_usage          *int64
	addtoken_usage       *int64
	model                *string
	clearedFields        map[string]struct{}
	conversations        *int
	clearedconversations bool
	done                 bool
	oldValue             func(context.Context) (*ConversationMessage, error)
	predicates           []predicate.ConversationMessage
}

var _ ent.Mutation = (*ConversationMessageMutation)(nil)

// conversationmessageOption allows management of the mutation configuration using functional options.
type conversationmessageOption func(*ConversationMessageMutation)

// newConversationMessageMutation creates new mutation for the ConversationMessage entity.
func newConversationMessageMutation(c config, op Op, opts ...conversationmessageOption) *ConversationMessageMutation {
	m := &ConversationMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeConversationMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withConversationMessageID sets the ID field of the mutation.
func withConversationMessageID(id int) conversationmessageOption {
	return func(m *ConversationMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *ConversationMessage
		)
		m.oldValue = func(ctx context.Context) (*ConversationMessage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ConversationMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withConversationMessage sets the old ConversationMessage of the mutation.
func withConversationMessage(node *ConversationMessage) conversationmessageOption {
	return func(m *ConversationMessageMutation) {
		m.oldValue = func(context.Context) (*ConversationMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ConversationMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ConversationMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ConversationMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ConversationMessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ConversationMessage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ConversationMessageMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ConversationMessageMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ConversationMessage entity.
// If the ConversationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMessageMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ConversationMessageMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ConversationMessageMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ConversationMessageMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ConversationMessage entity.
// If the ConversationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMessageMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ConversationMessageMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeleted sets the "deleted" field.
func (m *ConversationMessageMutation) SetDeleted(b bool) {
	m.deleted = &b
}

// Deleted returns the value of the "deleted" field in the mutation.
func (m *ConversationMessageMutation) Deleted() (r bool, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old "deleted" field's value of the ConversationMessage entity.
// If the ConversationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMessageMutation) OldDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// ResetDeleted resets all changes to the "deleted" field.
func (m *ConversationMessageMutation) ResetDeleted() {
	m.deleted = nil
}

// SetUUID sets the "uuid" field.
func (m *ConversationMessageMutation) SetUUID(u uuid.UUID) {
	m.uuid = &u
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *ConversationMessageMutation) UUID() (r uuid.UUID, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the ConversationMessage entity.
// If the ConversationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMessageMutation) OldUUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *ConversationMessageMutation) ResetUUID() {
	m.uuid = nil
}

// SetUserID sets the "user_id" field.
func (m *ConversationMessageMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ConversationMessageMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ConversationMessage entity.
// If the ConversationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMessageMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ConversationMessageMutation) ResetUserID() {
	m.user_id = nil
}

// SetConversationID sets the "conversation_id" field.
func (m *ConversationMessageMutation) SetConversationID(u uuid.UUID) {
	m.conversation_id = &u
}

// ConversationID returns the value of the "conversation_id" field in the mutation.
func (m *ConversationMessageMutation) ConversationID() (r uuid.UUID, exists bool) {
	v := m.conversation_id
	if v == nil {
		return
	}
	return *v, true
}

// OldConversationID returns the old "conversation_id" field's value of the ConversationMessage entity.
// If the ConversationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMessageMutation) OldConversationID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConversationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConversationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConversationID: %w", err)
	}
	return oldValue.ConversationID, nil
}

// ResetConversationID resets all changes to the "conversation_id" field.
func (m *ConversationMessageMutation) ResetConversationID() {
	m.conversation_id = nil
}

// SetRequest sets the "request" field.
func (m *ConversationMessageMutation) SetRequest(s string) {
	m.request = &s
}

// Request returns the value of the "request" field in the mutation.
func (m *ConversationMessageMutation) Request() (r string, exists bool) {
	v := m.request
	if v == nil {
		return
	}
	return *v, true
}

// OldRequest returns the old "request" field's value of the ConversationMessage entity.
// If the ConversationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMessageMutation) OldRequest(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequest is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequest requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequest: %w", err)
	}
	return oldValue.Request, nil
}

// ClearRequest clears the value of the "request" field.
func (m *ConversationMessageMutation) ClearRequest() {
	m.request = nil
	m.clearedFields[conversationmessage.FieldRequest] = struct{}{}
}

// RequestCleared returns if the "request" field was cleared in this mutation.
func (m *ConversationMessageMutation) RequestCleared() bool {
	_, ok := m.clearedFields[conversationmessage.FieldRequest]
	return ok
}

// ResetRequest resets all changes to the "request" field.
func (m *ConversationMessageMutation) ResetRequest() {
	m.request = nil
	delete(m.clearedFields, conversationmessage.FieldRequest)
}

// SetResponse sets the "response" field.
func (m *ConversationMessageMutation) SetResponse(s string) {
	m.response = &s
}

// Response returns the value of the "response" field in the mutation.
func (m *ConversationMessageMutation) Response() (r string, exists bool) {
	v := m.response
	if v == nil {
		return
	}
	return *v, true
}

// OldResponse returns the old "response" field's value of the ConversationMessage entity.
// If the ConversationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMessageMutation) OldResponse(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResponse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResponse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResponse: %w", err)
	}
	return oldValue.Response, nil
}

// ClearResponse clears the value of the "response" field.
func (m *ConversationMessageMutation) ClearResponse() {
	m.response = nil
	m.clearedFields[conversationmessage.FieldResponse] = struct{}{}
}

// ResponseCleared returns if the "response" field was cleared in this mutation.
func (m *ConversationMessageMutation) ResponseCleared() bool {
	_, ok := m.clearedFields[conversationmessage.FieldResponse]
	return ok
}

// ResetResponse resets all changes to the "response" field.
func (m *ConversationMessageMutation) ResetResponse() {
	m.response = nil
	delete(m.clearedFields, conversationmessage.FieldResponse)
}

// SetTokenUsage sets the "token_usage" field.
func (m *ConversationMessageMutation) SetTokenUsage(i int64) {
	m.token_usage = &i
	m.addtoken_usage = nil
}

// TokenUsage returns the value of the "token_usage" field in the mutation.
func (m *ConversationMessageMutation) TokenUsage() (r int64, exists bool) {
	v := m.token_usage
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenUsage returns the old "token_usage" field's value of the ConversationMessage entity.
// If the ConversationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMessageMutation) OldTokenUsage(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenUsage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenUsage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenUsage: %w", err)
	}
	return oldValue.TokenUsage, nil
}

// AddTokenUsage adds i to the "token_usage" field.
func (m *ConversationMessageMutation) AddTokenUsage(i int64) {
	if m.addtoken_usage != nil {
		*m.addtoken_usage += i
	} else {
		m.addtoken_usage = &i
	}
}

// AddedTokenUsage returns the value that was added to the "token_usage" field in this mutation.
func (m *ConversationMessageMutation) AddedTokenUsage() (r int64, exists bool) {
	v := m.addtoken_usage
	if v == nil {
		return
	}
	return *v, true
}

// ClearTokenUsage clears the value of the "token_usage" field.
func (m *ConversationMessageMutation) ClearTokenUsage() {
	m.token_usage = nil
	m.addtoken_usage = nil
	m.clearedFields[conversationmessage.FieldTokenUsage] = struct{}{}
}

// TokenUsageCleared returns if the "token_usage" field was cleared in this mutation.
func (m *ConversationMessageMutation) TokenUsageCleared() bool {
	_, ok := m.clearedFields[conversationmessage.FieldTokenUsage]
	return ok
}

// ResetTokenUsage resets all changes to the "token_usage" field.
func (m *ConversationMessageMutation) ResetTokenUsage() {
	m.token_usage = nil
	m.addtoken_usage = nil
	delete(m.clearedFields, conversationmessage.FieldTokenUsage)
}

// SetModel sets the "model" field.
func (m *ConversationMessageMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *ConversationMessageMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the ConversationMessage entity.
// If the ConversationMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMessageMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ResetModel resets all changes to the "model" field.
func (m *ConversationMessageMutation) ResetModel() {
	m.model = nil
}

// SetConversationsID sets the "conversations" edge to the Conversation entity by id.
func (m *ConversationMessageMutation) SetConversationsID(id int) {
	m.conversations = &id
}

// ClearConversations clears the "conversations" edge to the Conversation entity.
func (m *ConversationMessageMutation) ClearConversations() {
	m.clearedconversations = true
}

// ConversationsCleared reports if the "conversations" edge to the Conversation entity was cleared.
func (m *ConversationMessageMutation) ConversationsCleared() bool {
	return m.clearedconversations
}

// ConversationsID returns the "conversations" edge ID in the mutation.
func (m *ConversationMessageMutation) ConversationsID() (id int, exists bool) {
	if m.conversations != nil {
		return *m.conversations, true
	}
	return
}

// ConversationsIDs returns the "conversations" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ConversationsID instead. It exists only for internal usage by the builders.
func (m *ConversationMessageMutation) ConversationsIDs() (ids []int) {
	if id := m.conversations; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetConversations resets all changes to the "conversations" edge.
func (m *ConversationMessageMutation) ResetConversations() {
	m.conversations = nil
	m.clearedconversations = false
}

// Where appends a list predicates to the ConversationMessageMutation builder.
func (m *ConversationMessageMutation) Where(ps ...predicate.ConversationMessage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ConversationMessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ConversationMessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ConversationMessage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ConversationMessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ConversationMessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ConversationMessage).
func (m *ConversationMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ConversationMessageMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, conversationmessage.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, conversationmessage.FieldUpdatedAt)
	}
	if m.deleted != nil {
		fields = append(fields, conversationmessage.FieldDeleted)
	}
	if m.uuid != nil {
		fields = append(fields, conversationmessage.FieldUUID)
	}
	if m.user_id != nil {
		fields = append(fields, conversationmessage.FieldUserID)
	}
	if m.conversation_id != nil {
		fields = append(fields, conversationmessage.FieldConversationID)
	}
	if m.request != nil {
		fields = append(fields, conversationmessage.FieldRequest)
	}
	if m.response != nil {
		fields = append(fields, conversationmessage.FieldResponse)
	}
	if m.token_usage != nil {
		fields = append(fields, conversationmessage.FieldTokenUsage)
	}
	if m.model != nil {
		fields = append(fields, conversationmessage.FieldModel)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ConversationMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case conversationmessage.FieldCreatedAt:
		return m.CreatedAt()
	case conversationmessage.FieldUpdatedAt:
		return m.UpdatedAt()
	case conversationmessage.FieldDeleted:
		return m.Deleted()
	case conversationmessage.FieldUUID:
		return m.UUID()
	case conversationmessage.FieldUserID:
		return m.UserID()
	case conversationmessage.FieldConversationID:
		return m.ConversationID()
	case conversationmessage.FieldRequest:
		return m.Request()
	case conversationmessage.FieldResponse:
		return m.Response()
	case conversationmessage.FieldTokenUsage:
		return m.TokenUsage()
	case conversationmessage.FieldModel:
		return m.Model()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ConversationMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case conversationmessage.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case conversationmessage.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case conversationmessage.FieldDeleted:
		return m.OldDeleted(ctx)
	case conversationmessage.FieldUUID:
		return m.OldUUID(ctx)
	case conversationmessage.FieldUserID:
		return m.OldUserID(ctx)
	case conversationmessage.FieldConversationID:
		return m.OldConversationID(ctx)
	case conversationmessage.FieldRequest:
		return m.OldRequest(ctx)
	case conversationmessage.FieldResponse:
		return m.OldResponse(ctx)
	case conversationmessage.FieldTokenUsage:
		return m.OldTokenUsage(ctx)
	case conversationmessage.FieldModel:
		return m.OldModel(ctx)
	}
	return nil, fmt.Errorf("unknown ConversationMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConversationMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case conversationmessage.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case conversationmessage.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case conversationmessage.FieldDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	case conversationmessage.FieldUUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case conversationmessage.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case conversationmessage.FieldConversationID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConversationID(v)
		return nil
	case conversationmessage.FieldRequest:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequest(v)
		return nil
	case conversationmessage.FieldResponse:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResponse(v)
		return nil
	case conversationmessage.FieldTokenUsage:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenUsage(v)
		return nil
	case conversationmessage.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	}
	return fmt.Errorf("unknown ConversationMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ConversationMessageMutation) AddedFields() []string {
	var fields []string
	if m.addtoken_usage != nil {
		fields = append(fields, conversationmessage.FieldTokenUsage)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ConversationMessageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case conversationmessage.FieldTokenUsage:
		return m.AddedTokenUsage()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConversationMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case conversationmessage.FieldTokenUsage:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTokenUsage(v)
		return nil
	}
	return fmt.Errorf("unknown ConversationMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ConversationMessageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(conversationmessage.FieldRequest) {
		fields = append(fields, conversationmessage.FieldRequest)
	}
	if m.FieldCleared(conversationmessage.FieldResponse) {
		fields = append(fields, conversationmessage.FieldResponse)
	}
	if m.FieldCleared(conversationmessage.FieldTokenUsage) {
		fields = append(fields, conversationmessage.FieldTokenUsage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ConversationMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ConversationMessageMutation) ClearField(name string) error {
	switch name {
	case conversationmessage.FieldRequest:
		m.ClearRequest()
		return nil
	case conversationmessage.FieldResponse:
		m.ClearResponse()
		return nil
	case conversationmessage.FieldTokenUsage:
		m.ClearTokenUsage()
		return nil
	}
	return fmt.Errorf("unknown ConversationMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ConversationMessageMutation) ResetField(name string) error {
	switch name {
	case conversationmessage.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case conversationmessage.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case conversationmessage.FieldDeleted:
		m.ResetDeleted()
		return nil
	case conversationmessage.FieldUUID:
		m.ResetUUID()
		return nil
	case conversationmessage.FieldUserID:
		m.ResetUserID()
		return nil
	case conversationmessage.FieldConversationID:
		m.ResetConversationID()
		return nil
	case conversationmessage.FieldRequest:
		m.ResetRequest()
		return nil
	case conversationmessage.FieldResponse:
		m.ResetResponse()
		return nil
	case conversationmessage.FieldTokenUsage:
		m.ResetTokenUsage()
		return nil
	case conversationmessage.FieldModel:
		m.ResetModel()
		return nil
	}
	return fmt.Errorf("unknown ConversationMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ConversationMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.conversations != nil {
		edges = append(edges, conversationmessage.EdgeConversations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ConversationMessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case conversationmessage.EdgeConversations:
		if id := m.conversations; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ConversationMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ConversationMessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ConversationMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedconversations {
		edges = append(edges, conversationmessage.EdgeConversations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ConversationMessageMutation) EdgeCleared(name string) bool {
	switch name {
	case conversationmessage.EdgeConversations:
		return m.clearedconversations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ConversationMessageMutation) ClearEdge(name string) error {
	switch name {
	case conversationmessage.EdgeConversations:
		m.ClearConversations()
		return nil
	}
	return fmt.Errorf("unknown ConversationMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ConversationMessageMutation) ResetEdge(name string) error {
	switch name {
	case conversationmessage.EdgeConversations:
		m.ResetConversations()
		return nil
	}
	return fmt.Errorf("unknown ConversationMessage edge %s", name)
}

// OrderMutation represents an operation that mutates the Order nodes in the graph.
type OrderMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	deleted       *bool
	uuid          *uuid.UUID
	user_id       *uuid.UUID
	product_id    *uuid.UUID
	price         *float64
	addprice      *float64
	status        *order.Status
	note          *string
	payment_info  *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Order, error)
	predicates    []predicate.Order
}

var _ ent.Mutation = (*OrderMutation)(nil)

// orderOption allows management of the mutation configuration using functional options.
type orderOption func(*OrderMutation)

// newOrderMutation creates new mutation for the Order entity.
func newOrderMutation(c config, op Op, opts ...orderOption) *OrderMutation {
	m := &OrderMutation{
		config:        c,
		op:            op,
		typ:           TypeOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderID sets the ID field of the mutation.
func withOrderID(id int) orderOption {
	return func(m *OrderMutation) {
		var (
			err   error
			once  sync.Once
			value *Order
		)
		m.oldValue = func(ctx context.Context) (*Order, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Order.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrder sets the old Order of the mutation.
func withOrder(node *Order) orderOption {
	return func(m *OrderMutation) {
		m.oldValue = func(context.Context) (*Order, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Order.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeleted sets the "deleted" field.
func (m *OrderMutation) SetDeleted(b bool) {
	m.deleted = &b
}

// Deleted returns the value of the "deleted" field in the mutation.
func (m *OrderMutation) Deleted() (r bool, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old "deleted" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// ResetDeleted resets all changes to the "deleted" field.
func (m *OrderMutation) ResetDeleted() {
	m.deleted = nil
}

// SetUUID sets the "uuid" field.
func (m *OrderMutation) SetUUID(u uuid.UUID) {
	m.uuid = &u
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *OrderMutation) UUID() (r uuid.UUID, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *OrderMutation) ResetUUID() {
	m.uuid = nil
}

// SetUserID sets the "user_id" field.
func (m *OrderMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *OrderMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *OrderMutation) ResetUserID() {
	m.user_id = nil
}

// SetProductID sets the "product_id" field.
func (m *OrderMutation) SetProductID(u uuid.UUID) {
	m.product_id = &u
}

// ProductID returns the value of the "product_id" field in the mutation.
func (m *OrderMutation) ProductID() (r uuid.UUID, exists bool) {
	v := m.product_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old "product_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldProductID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// ResetProductID resets all changes to the "product_id" field.
func (m *OrderMutation) ResetProductID() {
	m.product_id = nil
}

// SetPrice sets the "price" field.
func (m *OrderMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *OrderMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *OrderMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *OrderMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *OrderMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetStatus sets the "status" field.
func (m *OrderMutation) SetStatus(o order.Status) {
	m.status = &o
}

// Status returns the value of the "status" field in the mutation.
func (m *OrderMutation) Status() (r order.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldStatus(ctx context.Context) (v order.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *OrderMutation) ResetStatus() {
	m.status = nil
}

// SetNote sets the "note" field.
func (m *OrderMutation) SetNote(s string) {
	m.note = &s
}

// Note returns the value of the "note" field in the mutation.
func (m *OrderMutation) Note() (r string, exists bool) {
	v := m.note
	if v == nil {
		return
	}
	return *v, true
}

// OldNote returns the old "note" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldNote(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNote is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNote: %w", err)
	}
	return oldValue.Note, nil
}

// ClearNote clears the value of the "note" field.
func (m *OrderMutation) ClearNote() {
	m.note = nil
	m.clearedFields[order.FieldNote] = struct{}{}
}

// NoteCleared returns if the "note" field was cleared in this mutation.
func (m *OrderMutation) NoteCleared() bool {
	_, ok := m.clearedFields[order.FieldNote]
	return ok
}

// ResetNote resets all changes to the "note" field.
func (m *OrderMutation) ResetNote() {
	m.note = nil
	delete(m.clearedFields, order.FieldNote)
}

// SetPaymentInfo sets the "payment_info" field.
func (m *OrderMutation) SetPaymentInfo(s string) {
	m.payment_info = &s
}

// PaymentInfo returns the value of the "payment_info" field in the mutation.
func (m *OrderMutation) PaymentInfo() (r string, exists bool) {
	v := m.payment_info
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentInfo returns the old "payment_info" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPaymentInfo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentInfo: %w", err)
	}
	return oldValue.PaymentInfo, nil
}

// ClearPaymentInfo clears the value of the "payment_info" field.
func (m *OrderMutation) ClearPaymentInfo() {
	m.payment_info = nil
	m.clearedFields[order.FieldPaymentInfo] = struct{}{}
}

// PaymentInfoCleared returns if the "payment_info" field was cleared in this mutation.
func (m *OrderMutation) PaymentInfoCleared() bool {
	_, ok := m.clearedFields[order.FieldPaymentInfo]
	return ok
}

// ResetPaymentInfo resets all changes to the "payment_info" field.
func (m *OrderMutation) ResetPaymentInfo() {
	m.payment_info = nil
	delete(m.clearedFields, order.FieldPaymentInfo)
}

// Where appends a list predicates to the OrderMutation builder.
func (m *OrderMutation) Where(ps ...predicate.Order) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Order, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Order).
func (m *OrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, order.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, order.FieldUpdatedAt)
	}
	if m.deleted != nil {
		fields = append(fields, order.FieldDeleted)
	}
	if m.uuid != nil {
		fields = append(fields, order.FieldUUID)
	}
	if m.user_id != nil {
		fields = append(fields, order.FieldUserID)
	}
	if m.product_id != nil {
		fields = append(fields, order.FieldProductID)
	}
	if m.price != nil {
		fields = append(fields, order.FieldPrice)
	}
	if m.status != nil {
		fields = append(fields, order.FieldStatus)
	}
	if m.note != nil {
		fields = append(fields, order.FieldNote)
	}
	if m.payment_info != nil {
		fields = append(fields, order.FieldPaymentInfo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case order.FieldCreatedAt:
		return m.CreatedAt()
	case order.FieldUpdatedAt:
		return m.UpdatedAt()
	case order.FieldDeleted:
		return m.Deleted()
	case order.FieldUUID:
		return m.UUID()
	case order.FieldUserID:
		return m.UserID()
	case order.FieldProductID:
		return m.ProductID()
	case order.FieldPrice:
		return m.Price()
	case order.FieldStatus:
		return m.Status()
	case order.FieldNote:
		return m.Note()
	case order.FieldPaymentInfo:
		return m.PaymentInfo()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case order.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case order.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case order.FieldDeleted:
		return m.OldDeleted(ctx)
	case order.FieldUUID:
		return m.OldUUID(ctx)
	case order.FieldUserID:
		return m.OldUserID(ctx)
	case order.FieldProductID:
		return m.OldProductID(ctx)
	case order.FieldPrice:
		return m.OldPrice(ctx)
	case order.FieldStatus:
		return m.OldStatus(ctx)
	case order.FieldNote:
		return m.OldNote(ctx)
	case order.FieldPaymentInfo:
		return m.OldPaymentInfo(ctx)
	}
	return nil, fmt.Errorf("unknown Order field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case order.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case order.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case order.FieldDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	case order.FieldUUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case order.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case order.FieldProductID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	case order.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case order.FieldStatus:
		v, ok := value.(order.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case order.FieldNote:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNote(v)
		return nil
	case order.FieldPaymentInfo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentInfo(v)
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, order.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case order.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case order.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown Order numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(order.FieldNote) {
		fields = append(fields, order.FieldNote)
	}
	if m.FieldCleared(order.FieldPaymentInfo) {
		fields = append(fields, order.FieldPaymentInfo)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderMutation) ClearField(name string) error {
	switch name {
	case order.FieldNote:
		m.ClearNote()
		return nil
	case order.FieldPaymentInfo:
		m.ClearPaymentInfo()
		return nil
	}
	return fmt.Errorf("unknown Order nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderMutation) ResetField(name string) error {
	switch name {
	case order.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case order.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case order.FieldDeleted:
		m.ResetDeleted()
		return nil
	case order.FieldUUID:
		m.ResetUUID()
		return nil
	case order.FieldUserID:
		m.ResetUserID()
		return nil
	case order.FieldProductID:
		m.ResetProductID()
		return nil
	case order.FieldPrice:
		m.ResetPrice()
		return nil
	case order.FieldStatus:
		m.ResetStatus()
		return nil
	case order.FieldNote:
		m.ResetNote()
		return nil
	case order.FieldPaymentInfo:
		m.ResetPaymentInfo()
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Order unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Order edge %s", name)
}

// ProductMutation represents an operation that mutates the Product nodes in the graph.
type ProductMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	deleted       *bool
	uuid          *uuid.UUID
	name          *string
	description   *string
	price         *float64
	addprice      *float64
	token         *int64
	addtoken      *int64
	storage       *int64
	addstorage    *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Product, error)
	predicates    []predicate.Product
}

var _ ent.Mutation = (*ProductMutation)(nil)

// productOption allows management of the mutation configuration using functional options.
type productOption func(*ProductMutation)

// newProductMutation creates new mutation for the Product entity.
func newProductMutation(c config, op Op, opts ...productOption) *ProductMutation {
	m := &ProductMutation{
		config:        c,
		op:            op,
		typ:           TypeProduct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductID sets the ID field of the mutation.
func withProductID(id int) productOption {
	return func(m *ProductMutation) {
		var (
			err   error
			once  sync.Once
			value *Product
		)
		m.oldValue = func(ctx context.Context) (*Product, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Product.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProduct sets the old Product of the mutation.
func withProduct(node *Product) productOption {
	return func(m *ProductMutation) {
		m.oldValue = func(context.Context) (*Product, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProductMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProductMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Product.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ProductMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProductMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProductMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProductMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProductMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProductMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeleted sets the "deleted" field.
func (m *ProductMutation) SetDeleted(b bool) {
	m.deleted = &b
}

// Deleted returns the value of the "deleted" field in the mutation.
func (m *ProductMutation) Deleted() (r bool, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old "deleted" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// ResetDeleted resets all changes to the "deleted" field.
func (m *ProductMutation) ResetDeleted() {
	m.deleted = nil
}

// SetUUID sets the "uuid" field.
func (m *ProductMutation) SetUUID(u uuid.UUID) {
	m.uuid = &u
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *ProductMutation) UUID() (r uuid.UUID, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldUUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *ProductMutation) ResetUUID() {
	m.uuid = nil
}

// SetName sets the "name" field.
func (m *ProductMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProductMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProductMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ProductMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProductMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ProductMutation) ResetDescription() {
	m.description = nil
}

// SetPrice sets the "price" field.
func (m *ProductMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *ProductMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *ProductMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *ProductMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *ProductMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetToken sets the "token" field.
func (m *ProductMutation) SetToken(i int64) {
	m.token = &i
	m.addtoken = nil
}

// Token returns the value of the "token" field in the mutation.
func (m *ProductMutation) Token() (r int64, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldToken(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// AddToken adds i to the "token" field.
func (m *ProductMutation) AddToken(i int64) {
	if m.addtoken != nil {
		*m.addtoken += i
	} else {
		m.addtoken = &i
	}
}

// AddedToken returns the value that was added to the "token" field in this mutation.
func (m *ProductMutation) AddedToken() (r int64, exists bool) {
	v := m.addtoken
	if v == nil {
		return
	}
	return *v, true
}

// ResetToken resets all changes to the "token" field.
func (m *ProductMutation) ResetToken() {
	m.token = nil
	m.addtoken = nil
}

// SetStorage sets the "storage" field.
func (m *ProductMutation) SetStorage(i int64) {
	m.storage = &i
	m.addstorage = nil
}

// Storage returns the value of the "storage" field in the mutation.
func (m *ProductMutation) Storage() (r int64, exists bool) {
	v := m.storage
	if v == nil {
		return
	}
	return *v, true
}

// OldStorage returns the old "storage" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldStorage(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStorage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStorage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStorage: %w", err)
	}
	return oldValue.Storage, nil
}

// AddStorage adds i to the "storage" field.
func (m *ProductMutation) AddStorage(i int64) {
	if m.addstorage != nil {
		*m.addstorage += i
	} else {
		m.addstorage = &i
	}
}

// AddedStorage returns the value that was added to the "storage" field in this mutation.
func (m *ProductMutation) AddedStorage() (r int64, exists bool) {
	v := m.addstorage
	if v == nil {
		return
	}
	return *v, true
}

// ResetStorage resets all changes to the "storage" field.
func (m *ProductMutation) ResetStorage() {
	m.storage = nil
	m.addstorage = nil
}

// Where appends a list predicates to the ProductMutation builder.
func (m *ProductMutation) Where(ps ...predicate.Product) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProductMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProductMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Product, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProductMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProductMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Product).
func (m *ProductMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProductMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, product.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, product.FieldUpdatedAt)
	}
	if m.deleted != nil {
		fields = append(fields, product.FieldDeleted)
	}
	if m.uuid != nil {
		fields = append(fields, product.FieldUUID)
	}
	if m.name != nil {
		fields = append(fields, product.FieldName)
	}
	if m.description != nil {
		fields = append(fields, product.FieldDescription)
	}
	if m.price != nil {
		fields = append(fields, product.FieldPrice)
	}
	if m.token != nil {
		fields = append(fields, product.FieldToken)
	}
	if m.storage != nil {
		fields = append(fields, product.FieldStorage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProductMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case product.FieldCreatedAt:
		return m.CreatedAt()
	case product.FieldUpdatedAt:
		return m.UpdatedAt()
	case product.FieldDeleted:
		return m.Deleted()
	case product.FieldUUID:
		return m.UUID()
	case product.FieldName:
		return m.Name()
	case product.FieldDescription:
		return m.Description()
	case product.FieldPrice:
		return m.Price()
	case product.FieldToken:
		return m.Token()
	case product.FieldStorage:
		return m.Storage()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProductMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case product.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case product.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case product.FieldDeleted:
		return m.OldDeleted(ctx)
	case product.FieldUUID:
		return m.OldUUID(ctx)
	case product.FieldName:
		return m.OldName(ctx)
	case product.FieldDescription:
		return m.OldDescription(ctx)
	case product.FieldPrice:
		return m.OldPrice(ctx)
	case product.FieldToken:
		return m.OldToken(ctx)
	case product.FieldStorage:
		return m.OldStorage(ctx)
	}
	return nil, fmt.Errorf("unknown Product field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) SetField(name string, value ent.Value) error {
	switch name {
	case product.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case product.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case product.FieldDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	case product.FieldUUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case product.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case product.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case product.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case product.FieldToken:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case product.FieldStorage:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStorage(v)
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProductMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, product.FieldPrice)
	}
	if m.addtoken != nil {
		fields = append(fields, product.FieldToken)
	}
	if m.addstorage != nil {
		fields = append(fields, product.FieldStorage)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProductMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case product.FieldPrice:
		return m.AddedPrice()
	case product.FieldToken:
		return m.AddedToken()
	case product.FieldStorage:
		return m.AddedStorage()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) AddField(name string, value ent.Value) error {
	switch name {
	case product.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case product.FieldToken:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddToken(v)
		return nil
	case product.FieldStorage:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStorage(v)
		return nil
	}
	return fmt.Errorf("unknown Product numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProductMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProductMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Product nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProductMutation) ResetField(name string) error {
	switch name {
	case product.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case product.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case product.FieldDeleted:
		m.ResetDeleted()
		return nil
	case product.FieldUUID:
		m.ResetUUID()
		return nil
	case product.FieldName:
		m.ResetName()
		return nil
	case product.FieldDescription:
		m.ResetDescription()
		return nil
	case product.FieldPrice:
		m.ResetPrice()
		return nil
	case product.FieldToken:
		m.ResetToken()
		return nil
	case product.FieldStorage:
		m.ResetStorage()
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProductMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProductMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProductMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProductMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProductMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProductMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProductMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Product unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProductMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Product edge %s", name)
}

// PromptMutation represents an operation that mutates the Prompt nodes in the graph.
type PromptMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	deleted       *bool
	uuid          *uuid.UUID
	user_id       *uuid.UUID
	act           *string
	prompt        *string
	is_custom     *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Prompt, error)
	predicates    []predicate.Prompt
}

var _ ent.Mutation = (*PromptMutation)(nil)

// promptOption allows management of the mutation configuration using functional options.
type promptOption func(*PromptMutation)

// newPromptMutation creates new mutation for the Prompt entity.
func newPromptMutation(c config, op Op, opts ...promptOption) *PromptMutation {
	m := &PromptMutation{
		config:        c,
		op:            op,
		typ:           TypePrompt,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPromptID sets the ID field of the mutation.
func withPromptID(id int) promptOption {
	return func(m *PromptMutation) {
		var (
			err   error
			once  sync.Once
			value *Prompt
		)
		m.oldValue = func(ctx context.Context) (*Prompt, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Prompt.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPrompt sets the old Prompt of the mutation.
func withPrompt(node *Prompt) promptOption {
	return func(m *PromptMutation) {
		m.oldValue = func(context.Context) (*Prompt, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PromptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PromptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PromptMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PromptMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Prompt.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PromptMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PromptMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Prompt entity.
// If the Prompt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromptMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PromptMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PromptMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PromptMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Prompt entity.
// If the Prompt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromptMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PromptMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeleted sets the "deleted" field.
func (m *PromptMutation) SetDeleted(b bool) {
	m.deleted = &b
}

// Deleted returns the value of the "deleted" field in the mutation.
func (m *PromptMutation) Deleted() (r bool, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old "deleted" field's value of the Prompt entity.
// If the Prompt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromptMutation) OldDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// ResetDeleted resets all changes to the "deleted" field.
func (m *PromptMutation) ResetDeleted() {
	m.deleted = nil
}

// SetUUID sets the "uuid" field.
func (m *PromptMutation) SetUUID(u uuid.UUID) {
	m.uuid = &u
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *PromptMutation) UUID() (r uuid.UUID, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the Prompt entity.
// If the Prompt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromptMutation) OldUUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *PromptMutation) ResetUUID() {
	m.uuid = nil
}

// SetUserID sets the "user_id" field.
func (m *PromptMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *PromptMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Prompt entity.
// If the Prompt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromptMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *PromptMutation) ResetUserID() {
	m.user_id = nil
}

// SetAct sets the "act" field.
func (m *PromptMutation) SetAct(s string) {
	m.act = &s
}

// Act returns the value of the "act" field in the mutation.
func (m *PromptMutation) Act() (r string, exists bool) {
	v := m.act
	if v == nil {
		return
	}
	return *v, true
}

// OldAct returns the old "act" field's value of the Prompt entity.
// If the Prompt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromptMutation) OldAct(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAct is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAct requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAct: %w", err)
	}
	return oldValue.Act, nil
}

// ResetAct resets all changes to the "act" field.
func (m *PromptMutation) ResetAct() {
	m.act = nil
}

// SetPrompt sets the "prompt" field.
func (m *PromptMutation) SetPrompt(s string) {
	m.prompt = &s
}

// Prompt returns the value of the "prompt" field in the mutation.
func (m *PromptMutation) Prompt() (r string, exists bool) {
	v := m.prompt
	if v == nil {
		return
	}
	return *v, true
}

// OldPrompt returns the old "prompt" field's value of the Prompt entity.
// If the Prompt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromptMutation) OldPrompt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrompt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrompt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrompt: %w", err)
	}
	return oldValue.Prompt, nil
}

// ResetPrompt resets all changes to the "prompt" field.
func (m *PromptMutation) ResetPrompt() {
	m.prompt = nil
}

// SetIsCustom sets the "is_custom" field.
func (m *PromptMutation) SetIsCustom(b bool) {
	m.is_custom = &b
}

// IsCustom returns the value of the "is_custom" field in the mutation.
func (m *PromptMutation) IsCustom() (r bool, exists bool) {
	v := m.is_custom
	if v == nil {
		return
	}
	return *v, true
}

// OldIsCustom returns the old "is_custom" field's value of the Prompt entity.
// If the Prompt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromptMutation) OldIsCustom(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsCustom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsCustom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsCustom: %w", err)
	}
	return oldValue.IsCustom, nil
}

// ResetIsCustom resets all changes to the "is_custom" field.
func (m *PromptMutation) ResetIsCustom() {
	m.is_custom = nil
}

// Where appends a list predicates to the PromptMutation builder.
func (m *PromptMutation) Where(ps ...predicate.Prompt) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PromptMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PromptMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Prompt, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PromptMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PromptMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Prompt).
func (m *PromptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PromptMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, prompt.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, prompt.FieldUpdatedAt)
	}
	if m.deleted != nil {
		fields = append(fields, prompt.FieldDeleted)
	}
	if m.uuid != nil {
		fields = append(fields, prompt.FieldUUID)
	}
	if m.user_id != nil {
		fields = append(fields, prompt.FieldUserID)
	}
	if m.act != nil {
		fields = append(fields, prompt.FieldAct)
	}
	if m.prompt != nil {
		fields = append(fields, prompt.FieldPrompt)
	}
	if m.is_custom != nil {
		fields = append(fields, prompt.FieldIsCustom)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PromptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case prompt.FieldCreatedAt:
		return m.CreatedAt()
	case prompt.FieldUpdatedAt:
		return m.UpdatedAt()
	case prompt.FieldDeleted:
		return m.Deleted()
	case prompt.FieldUUID:
		return m.UUID()
	case prompt.FieldUserID:
		return m.UserID()
	case prompt.FieldAct:
		return m.Act()
	case prompt.FieldPrompt:
		return m.Prompt()
	case prompt.FieldIsCustom:
		return m.IsCustom()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PromptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case prompt.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case prompt.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case prompt.FieldDeleted:
		return m.OldDeleted(ctx)
	case prompt.FieldUUID:
		return m.OldUUID(ctx)
	case prompt.FieldUserID:
		return m.OldUserID(ctx)
	case prompt.FieldAct:
		return m.OldAct(ctx)
	case prompt.FieldPrompt:
		return m.OldPrompt(ctx)
	case prompt.FieldIsCustom:
		return m.OldIsCustom(ctx)
	}
	return nil, fmt.Errorf("unknown Prompt field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PromptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case prompt.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case prompt.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case prompt.FieldDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	case prompt.FieldUUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case prompt.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case prompt.FieldAct:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAct(v)
		return nil
	case prompt.FieldPrompt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrompt(v)
		return nil
	case prompt.FieldIsCustom:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsCustom(v)
		return nil
	}
	return fmt.Errorf("unknown Prompt field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PromptMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PromptMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PromptMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Prompt numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PromptMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PromptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PromptMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Prompt nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PromptMutation) ResetField(name string) error {
	switch name {
	case prompt.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case prompt.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case prompt.FieldDeleted:
		m.ResetDeleted()
		return nil
	case prompt.FieldUUID:
		m.ResetUUID()
		return nil
	case prompt.FieldUserID:
		m.ResetUserID()
		return nil
	case prompt.FieldAct:
		m.ResetAct()
		return nil
	case prompt.FieldPrompt:
		m.ResetPrompt()
		return nil
	case prompt.FieldIsCustom:
		m.ResetIsCustom()
		return nil
	}
	return fmt.Errorf("unknown Prompt field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PromptMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PromptMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PromptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PromptMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PromptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PromptMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PromptMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Prompt unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PromptMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Prompt edge %s", name)
}

// QuotaMutation represents an operation that mutates the Quota nodes in the graph.
type QuotaMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	deleted       *bool
	user_id       *int
	adduser_id    *int
	plan          *string
	reset_time    *time.Time
	token         *int64
	addtoken      *int64
	token_used    *int64
	addtoken_used *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Quota, error)
	predicates    []predicate.Quota
}

var _ ent.Mutation = (*QuotaMutation)(nil)

// quotaOption allows management of the mutation configuration using functional options.
type quotaOption func(*QuotaMutation)

// newQuotaMutation creates new mutation for the Quota entity.
func newQuotaMutation(c config, op Op, opts ...quotaOption) *QuotaMutation {
	m := &QuotaMutation{
		config:        c,
		op:            op,
		typ:           TypeQuota,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuotaID sets the ID field of the mutation.
func withQuotaID(id int) quotaOption {
	return func(m *QuotaMutation) {
		var (
			err   error
			once  sync.Once
			value *Quota
		)
		m.oldValue = func(ctx context.Context) (*Quota, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Quota.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuota sets the old Quota of the mutation.
func withQuota(node *Quota) quotaOption {
	return func(m *QuotaMutation) {
		m.oldValue = func(context.Context) (*Quota, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuotaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuotaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuotaMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuotaMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Quota.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *QuotaMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QuotaMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Quota entity.
// If the Quota object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuotaMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QuotaMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *QuotaMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *QuotaMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Quota entity.
// If the Quota object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuotaMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *QuotaMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeleted sets the "deleted" field.
func (m *QuotaMutation) SetDeleted(b bool) {
	m.deleted = &b
}

// Deleted returns the value of the "deleted" field in the mutation.
func (m *QuotaMutation) Deleted() (r bool, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old "deleted" field's value of the Quota entity.
// If the Quota object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuotaMutation) OldDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// ResetDeleted resets all changes to the "deleted" field.
func (m *QuotaMutation) ResetDeleted() {
	m.deleted = nil
}

// SetUserID sets the "user_id" field.
func (m *QuotaMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *QuotaMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Quota entity.
// If the Quota object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuotaMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *QuotaMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *QuotaMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *QuotaMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetPlan sets the "plan" field.
func (m *QuotaMutation) SetPlan(s string) {
	m.plan = &s
}

// Plan returns the value of the "plan" field in the mutation.
func (m *QuotaMutation) Plan() (r string, exists bool) {
	v := m.plan
	if v == nil {
		return
	}
	return *v, true
}

// OldPlan returns the old "plan" field's value of the Quota entity.
// If the Quota object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuotaMutation) OldPlan(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlan is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlan requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlan: %w", err)
	}
	return oldValue.Plan, nil
}

// ResetPlan resets all changes to the "plan" field.
func (m *QuotaMutation) ResetPlan() {
	m.plan = nil
}

// SetResetTime sets the "reset_time" field.
func (m *QuotaMutation) SetResetTime(t time.Time) {
	m.reset_time = &t
}

// ResetTime returns the value of the "reset_time" field in the mutation.
func (m *QuotaMutation) ResetTime() (r time.Time, exists bool) {
	v := m.reset_time
	if v == nil {
		return
	}
	return *v, true
}

// OldResetTime returns the old "reset_time" field's value of the Quota entity.
// If the Quota object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuotaMutation) OldResetTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResetTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResetTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResetTime: %w", err)
	}
	return oldValue.ResetTime, nil
}

// ResetResetTime resets all changes to the "reset_time" field.
func (m *QuotaMutation) ResetResetTime() {
	m.reset_time = nil
}

// SetToken sets the "token" field.
func (m *QuotaMutation) SetToken(i int64) {
	m.token = &i
	m.addtoken = nil
}

// Token returns the value of the "token" field in the mutation.
func (m *QuotaMutation) Token() (r int64, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the Quota entity.
// If the Quota object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuotaMutation) OldToken(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// AddToken adds i to the "token" field.
func (m *QuotaMutation) AddToken(i int64) {
	if m.addtoken != nil {
		*m.addtoken += i
	} else {
		m.addtoken = &i
	}
}

// AddedToken returns the value that was added to the "token" field in this mutation.
func (m *QuotaMutation) AddedToken() (r int64, exists bool) {
	v := m.addtoken
	if v == nil {
		return
	}
	return *v, true
}

// ResetToken resets all changes to the "token" field.
func (m *QuotaMutation) ResetToken() {
	m.token = nil
	m.addtoken = nil
}

// SetTokenUsed sets the "token_used" field.
func (m *QuotaMutation) SetTokenUsed(i int64) {
	m.token_used = &i
	m.addtoken_used = nil
}

// TokenUsed returns the value of the "token_used" field in the mutation.
func (m *QuotaMutation) TokenUsed() (r int64, exists bool) {
	v := m.token_used
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenUsed returns the old "token_used" field's value of the Quota entity.
// If the Quota object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuotaMutation) OldTokenUsed(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenUsed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenUsed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenUsed: %w", err)
	}
	return oldValue.TokenUsed, nil
}

// AddTokenUsed adds i to the "token_used" field.
func (m *QuotaMutation) AddTokenUsed(i int64) {
	if m.addtoken_used != nil {
		*m.addtoken_used += i
	} else {
		m.addtoken_used = &i
	}
}

// AddedTokenUsed returns the value that was added to the "token_used" field in this mutation.
func (m *QuotaMutation) AddedTokenUsed() (r int64, exists bool) {
	v := m.addtoken_used
	if v == nil {
		return
	}
	return *v, true
}

// ResetTokenUsed resets all changes to the "token_used" field.
func (m *QuotaMutation) ResetTokenUsed() {
	m.token_used = nil
	m.addtoken_used = nil
}

// Where appends a list predicates to the QuotaMutation builder.
func (m *QuotaMutation) Where(ps ...predicate.Quota) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QuotaMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QuotaMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Quota, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QuotaMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QuotaMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Quota).
func (m *QuotaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuotaMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, quota.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, quota.FieldUpdatedAt)
	}
	if m.deleted != nil {
		fields = append(fields, quota.FieldDeleted)
	}
	if m.user_id != nil {
		fields = append(fields, quota.FieldUserID)
	}
	if m.plan != nil {
		fields = append(fields, quota.FieldPlan)
	}
	if m.reset_time != nil {
		fields = append(fields, quota.FieldResetTime)
	}
	if m.token != nil {
		fields = append(fields, quota.FieldToken)
	}
	if m.token_used != nil {
		fields = append(fields, quota.FieldTokenUsed)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuotaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case quota.FieldCreatedAt:
		return m.CreatedAt()
	case quota.FieldUpdatedAt:
		return m.UpdatedAt()
	case quota.FieldDeleted:
		return m.Deleted()
	case quota.FieldUserID:
		return m.UserID()
	case quota.FieldPlan:
		return m.Plan()
	case quota.FieldResetTime:
		return m.ResetTime()
	case quota.FieldToken:
		return m.Token()
	case quota.FieldTokenUsed:
		return m.TokenUsed()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuotaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case quota.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case quota.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case quota.FieldDeleted:
		return m.OldDeleted(ctx)
	case quota.FieldUserID:
		return m.OldUserID(ctx)
	case quota.FieldPlan:
		return m.OldPlan(ctx)
	case quota.FieldResetTime:
		return m.OldResetTime(ctx)
	case quota.FieldToken:
		return m.OldToken(ctx)
	case quota.FieldTokenUsed:
		return m.OldTokenUsed(ctx)
	}
	return nil, fmt.Errorf("unknown Quota field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuotaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case quota.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case quota.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case quota.FieldDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	case quota.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case quota.FieldPlan:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlan(v)
		return nil
	case quota.FieldResetTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResetTime(v)
		return nil
	case quota.FieldToken:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case quota.FieldTokenUsed:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenUsed(v)
		return nil
	}
	return fmt.Errorf("unknown Quota field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuotaMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, quota.FieldUserID)
	}
	if m.addtoken != nil {
		fields = append(fields, quota.FieldToken)
	}
	if m.addtoken_used != nil {
		fields = append(fields, quota.FieldTokenUsed)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuotaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case quota.FieldUserID:
		return m.AddedUserID()
	case quota.FieldToken:
		return m.AddedToken()
	case quota.FieldTokenUsed:
		return m.AddedTokenUsed()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuotaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case quota.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case quota.FieldToken:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddToken(v)
		return nil
	case quota.FieldTokenUsed:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTokenUsed(v)
		return nil
	}
	return fmt.Errorf("unknown Quota numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuotaMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuotaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuotaMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Quota nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuotaMutation) ResetField(name string) error {
	switch name {
	case quota.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case quota.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case quota.FieldDeleted:
		m.ResetDeleted()
		return nil
	case quota.FieldUserID:
		m.ResetUserID()
		return nil
	case quota.FieldPlan:
		m.ResetPlan()
		return nil
	case quota.FieldResetTime:
		m.ResetResetTime()
		return nil
	case quota.FieldToken:
		m.ResetToken()
		return nil
	case quota.FieldTokenUsed:
		m.ResetTokenUsed()
		return nil
	}
	return fmt.Errorf("unknown Quota field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuotaMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuotaMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuotaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuotaMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuotaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuotaMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuotaMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Quota unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuotaMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Quota edge %s", name)
}

// WechatSessionMutation represents an operation that mutates the WechatSession nodes in the graph.
type WechatSessionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	deleted       *bool
	session       *[]byte
	dummy_user_id *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*WechatSession, error)
	predicates    []predicate.WechatSession
}

var _ ent.Mutation = (*WechatSessionMutation)(nil)

// wechatsessionOption allows management of the mutation configuration using functional options.
type wechatsessionOption func(*WechatSessionMutation)

// newWechatSessionMutation creates new mutation for the WechatSession entity.
func newWechatSessionMutation(c config, op Op, opts ...wechatsessionOption) *WechatSessionMutation {
	m := &WechatSessionMutation{
		config:        c,
		op:            op,
		typ:           TypeWechatSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWechatSessionID sets the ID field of the mutation.
func withWechatSessionID(id int) wechatsessionOption {
	return func(m *WechatSessionMutation) {
		var (
			err   error
			once  sync.Once
			value *WechatSession
		)
		m.oldValue = func(ctx context.Context) (*WechatSession, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WechatSession.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWechatSession sets the old WechatSession of the mutation.
func withWechatSession(node *WechatSession) wechatsessionOption {
	return func(m *WechatSessionMutation) {
		m.oldValue = func(context.Context) (*WechatSession, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WechatSessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WechatSessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WechatSessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WechatSessionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WechatSession.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *WechatSessionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WechatSessionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WechatSession entity.
// If the WechatSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WechatSessionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WechatSessionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WechatSessionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WechatSessionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the WechatSession entity.
// If the WechatSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WechatSessionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WechatSessionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeleted sets the "deleted" field.
func (m *WechatSessionMutation) SetDeleted(b bool) {
	m.deleted = &b
}

// Deleted returns the value of the "deleted" field in the mutation.
func (m *WechatSessionMutation) Deleted() (r bool, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old "deleted" field's value of the WechatSession entity.
// If the WechatSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WechatSessionMutation) OldDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// ResetDeleted resets all changes to the "deleted" field.
func (m *WechatSessionMutation) ResetDeleted() {
	m.deleted = nil
}

// SetSession sets the "session" field.
func (m *WechatSessionMutation) SetSession(b []byte) {
	m.session = &b
}

// Session returns the value of the "session" field in the mutation.
func (m *WechatSessionMutation) Session() (r []byte, exists bool) {
	v := m.session
	if v == nil {
		return
	}
	return *v, true
}

// OldSession returns the old "session" field's value of the WechatSession entity.
// If the WechatSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WechatSessionMutation) OldSession(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSession is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSession requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSession: %w", err)
	}
	return oldValue.Session, nil
}

// ResetSession resets all changes to the "session" field.
func (m *WechatSessionMutation) ResetSession() {
	m.session = nil
}

// SetDummyUserID sets the "dummy_user_id" field.
func (m *WechatSessionMutation) SetDummyUserID(s string) {
	m.dummy_user_id = &s
}

// DummyUserID returns the value of the "dummy_user_id" field in the mutation.
func (m *WechatSessionMutation) DummyUserID() (r string, exists bool) {
	v := m.dummy_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDummyUserID returns the old "dummy_user_id" field's value of the WechatSession entity.
// If the WechatSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WechatSessionMutation) OldDummyUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDummyUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDummyUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDummyUserID: %w", err)
	}
	return oldValue.DummyUserID, nil
}

// ResetDummyUserID resets all changes to the "dummy_user_id" field.
func (m *WechatSessionMutation) ResetDummyUserID() {
	m.dummy_user_id = nil
}

// Where appends a list predicates to the WechatSessionMutation builder.
func (m *WechatSessionMutation) Where(ps ...predicate.WechatSession) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WechatSessionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WechatSessionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WechatSession, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WechatSessionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WechatSessionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WechatSession).
func (m *WechatSessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WechatSessionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, wechatsession.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, wechatsession.FieldUpdatedAt)
	}
	if m.deleted != nil {
		fields = append(fields, wechatsession.FieldDeleted)
	}
	if m.session != nil {
		fields = append(fields, wechatsession.FieldSession)
	}
	if m.dummy_user_id != nil {
		fields = append(fields, wechatsession.FieldDummyUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WechatSessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case wechatsession.FieldCreatedAt:
		return m.CreatedAt()
	case wechatsession.FieldUpdatedAt:
		return m.UpdatedAt()
	case wechatsession.FieldDeleted:
		return m.Deleted()
	case wechatsession.FieldSession:
		return m.Session()
	case wechatsession.FieldDummyUserID:
		return m.DummyUserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WechatSessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case wechatsession.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case wechatsession.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case wechatsession.FieldDeleted:
		return m.OldDeleted(ctx)
	case wechatsession.FieldSession:
		return m.OldSession(ctx)
	case wechatsession.FieldDummyUserID:
		return m.OldDummyUserID(ctx)
	}
	return nil, fmt.Errorf("unknown WechatSession field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WechatSessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case wechatsession.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case wechatsession.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case wechatsession.FieldDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	case wechatsession.FieldSession:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSession(v)
		return nil
	case wechatsession.FieldDummyUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDummyUserID(v)
		return nil
	}
	return fmt.Errorf("unknown WechatSession field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WechatSessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WechatSessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WechatSessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WechatSession numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WechatSessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WechatSessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WechatSessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WechatSession nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WechatSessionMutation) ResetField(name string) error {
	switch name {
	case wechatsession.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case wechatsession.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case wechatsession.FieldDeleted:
		m.ResetDeleted()
		return nil
	case wechatsession.FieldSession:
		m.ResetSession()
		return nil
	case wechatsession.FieldDummyUserID:
		m.ResetDummyUserID()
		return nil
	}
	return fmt.Errorf("unknown WechatSession field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WechatSessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WechatSessionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WechatSessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WechatSessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WechatSessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WechatSessionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WechatSessionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown WechatSession unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WechatSessionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown WechatSession edge %s", name)
}
