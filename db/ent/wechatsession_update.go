// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notionboy/db/ent/predicate"
	"notionboy/db/ent/wechatsession"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WechatSessionUpdate is the builder for updating WechatSession entities.
type WechatSessionUpdate struct {
	config
	hooks    []Hook
	mutation *WechatSessionMutation
}

// Where appends a list predicates to the WechatSessionUpdate builder.
func (wsu *WechatSessionUpdate) Where(ps ...predicate.WechatSession) *WechatSessionUpdate {
	wsu.mutation.Where(ps...)
	return wsu
}

// SetUpdatedAt sets the "updated_at" field.
func (wsu *WechatSessionUpdate) SetUpdatedAt(t time.Time) *WechatSessionUpdate {
	wsu.mutation.SetUpdatedAt(t)
	return wsu
}

// SetDeleted sets the "deleted" field.
func (wsu *WechatSessionUpdate) SetDeleted(b bool) *WechatSessionUpdate {
	wsu.mutation.SetDeleted(b)
	return wsu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (wsu *WechatSessionUpdate) SetNillableDeleted(b *bool) *WechatSessionUpdate {
	if b != nil {
		wsu.SetDeleted(*b)
	}
	return wsu
}

// SetSession sets the "session" field.
func (wsu *WechatSessionUpdate) SetSession(b []byte) *WechatSessionUpdate {
	wsu.mutation.SetSession(b)
	return wsu
}

// SetDummyUserID sets the "dummy_user_id" field.
func (wsu *WechatSessionUpdate) SetDummyUserID(s string) *WechatSessionUpdate {
	wsu.mutation.SetDummyUserID(s)
	return wsu
}

// Mutation returns the WechatSessionMutation object of the builder.
func (wsu *WechatSessionUpdate) Mutation() *WechatSessionMutation {
	return wsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wsu *WechatSessionUpdate) Save(ctx context.Context) (int, error) {
	wsu.defaults()
	return withHooks[int, WechatSessionMutation](ctx, wsu.sqlSave, wsu.mutation, wsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsu *WechatSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := wsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wsu *WechatSessionUpdate) Exec(ctx context.Context) error {
	_, err := wsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsu *WechatSessionUpdate) ExecX(ctx context.Context) {
	if err := wsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wsu *WechatSessionUpdate) defaults() {
	if _, ok := wsu.mutation.UpdatedAt(); !ok {
		v := wechatsession.UpdateDefaultUpdatedAt()
		wsu.mutation.SetUpdatedAt(v)
	}
}

func (wsu *WechatSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(wechatsession.Table, wechatsession.Columns, sqlgraph.NewFieldSpec(wechatsession.FieldID, field.TypeInt))
	if ps := wsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wsu.mutation.UpdatedAt(); ok {
		_spec.SetField(wechatsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wsu.mutation.Deleted(); ok {
		_spec.SetField(wechatsession.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := wsu.mutation.Session(); ok {
		_spec.SetField(wechatsession.FieldSession, field.TypeBytes, value)
	}
	if value, ok := wsu.mutation.DummyUserID(); ok {
		_spec.SetField(wechatsession.FieldDummyUserID, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wechatsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wsu.mutation.done = true
	return n, nil
}

// WechatSessionUpdateOne is the builder for updating a single WechatSession entity.
type WechatSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WechatSessionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (wsuo *WechatSessionUpdateOne) SetUpdatedAt(t time.Time) *WechatSessionUpdateOne {
	wsuo.mutation.SetUpdatedAt(t)
	return wsuo
}

// SetDeleted sets the "deleted" field.
func (wsuo *WechatSessionUpdateOne) SetDeleted(b bool) *WechatSessionUpdateOne {
	wsuo.mutation.SetDeleted(b)
	return wsuo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (wsuo *WechatSessionUpdateOne) SetNillableDeleted(b *bool) *WechatSessionUpdateOne {
	if b != nil {
		wsuo.SetDeleted(*b)
	}
	return wsuo
}

// SetSession sets the "session" field.
func (wsuo *WechatSessionUpdateOne) SetSession(b []byte) *WechatSessionUpdateOne {
	wsuo.mutation.SetSession(b)
	return wsuo
}

// SetDummyUserID sets the "dummy_user_id" field.
func (wsuo *WechatSessionUpdateOne) SetDummyUserID(s string) *WechatSessionUpdateOne {
	wsuo.mutation.SetDummyUserID(s)
	return wsuo
}

// Mutation returns the WechatSessionMutation object of the builder.
func (wsuo *WechatSessionUpdateOne) Mutation() *WechatSessionMutation {
	return wsuo.mutation
}

// Where appends a list predicates to the WechatSessionUpdate builder.
func (wsuo *WechatSessionUpdateOne) Where(ps ...predicate.WechatSession) *WechatSessionUpdateOne {
	wsuo.mutation.Where(ps...)
	return wsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wsuo *WechatSessionUpdateOne) Select(field string, fields ...string) *WechatSessionUpdateOne {
	wsuo.fields = append([]string{field}, fields...)
	return wsuo
}

// Save executes the query and returns the updated WechatSession entity.
func (wsuo *WechatSessionUpdateOne) Save(ctx context.Context) (*WechatSession, error) {
	wsuo.defaults()
	return withHooks[*WechatSession, WechatSessionMutation](ctx, wsuo.sqlSave, wsuo.mutation, wsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsuo *WechatSessionUpdateOne) SaveX(ctx context.Context) *WechatSession {
	node, err := wsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wsuo *WechatSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := wsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsuo *WechatSessionUpdateOne) ExecX(ctx context.Context) {
	if err := wsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wsuo *WechatSessionUpdateOne) defaults() {
	if _, ok := wsuo.mutation.UpdatedAt(); !ok {
		v := wechatsession.UpdateDefaultUpdatedAt()
		wsuo.mutation.SetUpdatedAt(v)
	}
}

func (wsuo *WechatSessionUpdateOne) sqlSave(ctx context.Context) (_node *WechatSession, err error) {
	_spec := sqlgraph.NewUpdateSpec(wechatsession.Table, wechatsession.Columns, sqlgraph.NewFieldSpec(wechatsession.FieldID, field.TypeInt))
	id, ok := wsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WechatSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wechatsession.FieldID)
		for _, f := range fields {
			if !wechatsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wechatsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(wechatsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wsuo.mutation.Deleted(); ok {
		_spec.SetField(wechatsession.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := wsuo.mutation.Session(); ok {
		_spec.SetField(wechatsession.FieldSession, field.TypeBytes, value)
	}
	if value, ok := wsuo.mutation.DummyUserID(); ok {
		_spec.SetField(wechatsession.FieldDummyUserID, field.TypeString, value)
	}
	_node = &WechatSession{config: wsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wechatsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wsuo.mutation.done = true
	return _node, nil
}
