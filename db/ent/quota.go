// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"notionboy/db/ent/quota"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Quota is the model entity for the Quota schema.
type Quota struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted bool `json:"deleted,omitempty"`
	// user id
	UserID int `json:"user_id,omitempty"`
	// plan name
	Plan string `json:"plan,omitempty"`
	// Time to reset quota
	ResetTime time.Time `json:"reset_time,omitempty"`
	// total openai token
	Token int64 `json:"token,omitempty"`
	// used openai token
	TokenUsed int64 `json:"token_used,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Quota) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case quota.FieldDeleted:
			values[i] = new(sql.NullBool)
		case quota.FieldID, quota.FieldUserID, quota.FieldToken, quota.FieldTokenUsed:
			values[i] = new(sql.NullInt64)
		case quota.FieldPlan:
			values[i] = new(sql.NullString)
		case quota.FieldCreatedAt, quota.FieldUpdatedAt, quota.FieldResetTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Quota", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Quota fields.
func (q *Quota) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case quota.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			q.ID = int(value.Int64)
		case quota.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				q.CreatedAt = value.Time
			}
		case quota.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				q.UpdatedAt = value.Time
			}
		case quota.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				q.Deleted = value.Bool
			}
		case quota.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				q.UserID = int(value.Int64)
			}
		case quota.FieldPlan:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plan", values[i])
			} else if value.Valid {
				q.Plan = value.String
			}
		case quota.FieldResetTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field reset_time", values[i])
			} else if value.Valid {
				q.ResetTime = value.Time
			}
		case quota.FieldToken:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				q.Token = value.Int64
			}
		case quota.FieldTokenUsed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field token_used", values[i])
			} else if value.Valid {
				q.TokenUsed = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Quota.
// Note that you need to call Quota.Unwrap() before calling this method if this Quota
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Quota) Update() *QuotaUpdateOne {
	return NewQuotaClient(q.config).UpdateOne(q)
}

// Unwrap unwraps the Quota entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Quota) Unwrap() *Quota {
	_tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Quota is not a transactional entity")
	}
	q.config.driver = _tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Quota) String() string {
	var builder strings.Builder
	builder.WriteString("Quota(")
	builder.WriteString(fmt.Sprintf("id=%v, ", q.ID))
	builder.WriteString("created_at=")
	builder.WriteString(q.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(q.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", q.Deleted))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", q.UserID))
	builder.WriteString(", ")
	builder.WriteString("plan=")
	builder.WriteString(q.Plan)
	builder.WriteString(", ")
	builder.WriteString("reset_time=")
	builder.WriteString(q.ResetTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(fmt.Sprintf("%v", q.Token))
	builder.WriteString(", ")
	builder.WriteString("token_used=")
	builder.WriteString(fmt.Sprintf("%v", q.TokenUsed))
	builder.WriteByte(')')
	return builder.String()
}

// QuotaSlice is a parsable slice of Quota.
type QuotaSlice []*Quota
