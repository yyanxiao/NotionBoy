// Code generated by ent, DO NOT EDIT.

package wechatsession

import (
	"notionboy/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v bool) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldEQ(FieldDeleted, v))
}

// Session applies equality check predicate on the "session" field. It's identical to SessionEQ.
func Session(v []byte) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldEQ(FieldSession, v))
}

// DummyUserID applies equality check predicate on the "dummy_user_id" field. It's identical to DummyUserIDEQ.
func DummyUserID(v string) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldEQ(FieldDummyUserID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v bool) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldEQ(FieldDeleted, v))
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v bool) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldNEQ(FieldDeleted, v))
}

// SessionEQ applies the EQ predicate on the "session" field.
func SessionEQ(v []byte) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldEQ(FieldSession, v))
}

// SessionNEQ applies the NEQ predicate on the "session" field.
func SessionNEQ(v []byte) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldNEQ(FieldSession, v))
}

// SessionIn applies the In predicate on the "session" field.
func SessionIn(vs ...[]byte) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldIn(FieldSession, vs...))
}

// SessionNotIn applies the NotIn predicate on the "session" field.
func SessionNotIn(vs ...[]byte) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldNotIn(FieldSession, vs...))
}

// SessionGT applies the GT predicate on the "session" field.
func SessionGT(v []byte) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldGT(FieldSession, v))
}

// SessionGTE applies the GTE predicate on the "session" field.
func SessionGTE(v []byte) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldGTE(FieldSession, v))
}

// SessionLT applies the LT predicate on the "session" field.
func SessionLT(v []byte) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldLT(FieldSession, v))
}

// SessionLTE applies the LTE predicate on the "session" field.
func SessionLTE(v []byte) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldLTE(FieldSession, v))
}

// DummyUserIDEQ applies the EQ predicate on the "dummy_user_id" field.
func DummyUserIDEQ(v string) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldEQ(FieldDummyUserID, v))
}

// DummyUserIDNEQ applies the NEQ predicate on the "dummy_user_id" field.
func DummyUserIDNEQ(v string) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldNEQ(FieldDummyUserID, v))
}

// DummyUserIDIn applies the In predicate on the "dummy_user_id" field.
func DummyUserIDIn(vs ...string) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldIn(FieldDummyUserID, vs...))
}

// DummyUserIDNotIn applies the NotIn predicate on the "dummy_user_id" field.
func DummyUserIDNotIn(vs ...string) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldNotIn(FieldDummyUserID, vs...))
}

// DummyUserIDGT applies the GT predicate on the "dummy_user_id" field.
func DummyUserIDGT(v string) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldGT(FieldDummyUserID, v))
}

// DummyUserIDGTE applies the GTE predicate on the "dummy_user_id" field.
func DummyUserIDGTE(v string) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldGTE(FieldDummyUserID, v))
}

// DummyUserIDLT applies the LT predicate on the "dummy_user_id" field.
func DummyUserIDLT(v string) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldLT(FieldDummyUserID, v))
}

// DummyUserIDLTE applies the LTE predicate on the "dummy_user_id" field.
func DummyUserIDLTE(v string) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldLTE(FieldDummyUserID, v))
}

// DummyUserIDContains applies the Contains predicate on the "dummy_user_id" field.
func DummyUserIDContains(v string) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldContains(FieldDummyUserID, v))
}

// DummyUserIDHasPrefix applies the HasPrefix predicate on the "dummy_user_id" field.
func DummyUserIDHasPrefix(v string) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldHasPrefix(FieldDummyUserID, v))
}

// DummyUserIDHasSuffix applies the HasSuffix predicate on the "dummy_user_id" field.
func DummyUserIDHasSuffix(v string) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldHasSuffix(FieldDummyUserID, v))
}

// DummyUserIDEqualFold applies the EqualFold predicate on the "dummy_user_id" field.
func DummyUserIDEqualFold(v string) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldEqualFold(FieldDummyUserID, v))
}

// DummyUserIDContainsFold applies the ContainsFold predicate on the "dummy_user_id" field.
func DummyUserIDContainsFold(v string) predicate.WechatSession {
	return predicate.WechatSession(sql.FieldContainsFold(FieldDummyUserID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WechatSession) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WechatSession) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WechatSession) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		p(s.Not())
	})
}
