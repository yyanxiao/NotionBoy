// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notionboy/db/ent/prompt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PromptCreate is the builder for creating a Prompt entity.
type PromptCreate struct {
	config
	mutation *PromptMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PromptCreate) SetCreatedAt(t time.Time) *PromptCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PromptCreate) SetNillableCreatedAt(t *time.Time) *PromptCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PromptCreate) SetUpdatedAt(t time.Time) *PromptCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PromptCreate) SetNillableUpdatedAt(t *time.Time) *PromptCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeleted sets the "deleted" field.
func (pc *PromptCreate) SetDeleted(b bool) *PromptCreate {
	pc.mutation.SetDeleted(b)
	return pc
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (pc *PromptCreate) SetNillableDeleted(b *bool) *PromptCreate {
	if b != nil {
		pc.SetDeleted(*b)
	}
	return pc
}

// SetUUID sets the "uuid" field.
func (pc *PromptCreate) SetUUID(u uuid.UUID) *PromptCreate {
	pc.mutation.SetUUID(u)
	return pc
}

// SetUserID sets the "user_id" field.
func (pc *PromptCreate) SetUserID(u uuid.UUID) *PromptCreate {
	pc.mutation.SetUserID(u)
	return pc
}

// SetAct sets the "act" field.
func (pc *PromptCreate) SetAct(s string) *PromptCreate {
	pc.mutation.SetAct(s)
	return pc
}

// SetPrompt sets the "prompt" field.
func (pc *PromptCreate) SetPrompt(s string) *PromptCreate {
	pc.mutation.SetPrompt(s)
	return pc
}

// SetIsCustom sets the "is_custom" field.
func (pc *PromptCreate) SetIsCustom(b bool) *PromptCreate {
	pc.mutation.SetIsCustom(b)
	return pc
}

// Mutation returns the PromptMutation object of the builder.
func (pc *PromptCreate) Mutation() *PromptMutation {
	return pc.mutation
}

// Save creates the Prompt in the database.
func (pc *PromptCreate) Save(ctx context.Context) (*Prompt, error) {
	pc.defaults()
	return withHooks[*Prompt, PromptMutation](ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PromptCreate) SaveX(ctx context.Context) *Prompt {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PromptCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PromptCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PromptCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := prompt.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := prompt.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Deleted(); !ok {
		v := prompt.DefaultDeleted
		pc.mutation.SetDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PromptCreate) check() error {
	if _, ok := pc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Prompt.deleted"`)}
	}
	if _, ok := pc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Prompt.uuid"`)}
	}
	if _, ok := pc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Prompt.user_id"`)}
	}
	if _, ok := pc.mutation.Act(); !ok {
		return &ValidationError{Name: "act", err: errors.New(`ent: missing required field "Prompt.act"`)}
	}
	if _, ok := pc.mutation.Prompt(); !ok {
		return &ValidationError{Name: "prompt", err: errors.New(`ent: missing required field "Prompt.prompt"`)}
	}
	if _, ok := pc.mutation.IsCustom(); !ok {
		return &ValidationError{Name: "is_custom", err: errors.New(`ent: missing required field "Prompt.is_custom"`)}
	}
	return nil
}

func (pc *PromptCreate) sqlSave(ctx context.Context) (*Prompt, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PromptCreate) createSpec() (*Prompt, *sqlgraph.CreateSpec) {
	var (
		_node = &Prompt{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(prompt.Table, sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(prompt.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(prompt.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Deleted(); ok {
		_spec.SetField(prompt.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if value, ok := pc.mutation.UUID(); ok {
		_spec.SetField(prompt.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := pc.mutation.UserID(); ok {
		_spec.SetField(prompt.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := pc.mutation.Act(); ok {
		_spec.SetField(prompt.FieldAct, field.TypeString, value)
		_node.Act = value
	}
	if value, ok := pc.mutation.Prompt(); ok {
		_spec.SetField(prompt.FieldPrompt, field.TypeString, value)
		_node.Prompt = value
	}
	if value, ok := pc.mutation.IsCustom(); ok {
		_spec.SetField(prompt.FieldIsCustom, field.TypeBool, value)
		_node.IsCustom = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Prompt.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromptUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PromptCreate) OnConflict(opts ...sql.ConflictOption) *PromptUpsertOne {
	pc.conflict = opts
	return &PromptUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Prompt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PromptCreate) OnConflictColumns(columns ...string) *PromptUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PromptUpsertOne{
		create: pc,
	}
}

type (
	// PromptUpsertOne is the builder for "upsert"-ing
	//  one Prompt node.
	PromptUpsertOne struct {
		create *PromptCreate
	}

	// PromptUpsert is the "OnConflict" setter.
	PromptUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PromptUpsert) SetUpdatedAt(v time.Time) *PromptUpsert {
	u.Set(prompt.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromptUpsert) UpdateUpdatedAt() *PromptUpsert {
	u.SetExcluded(prompt.FieldUpdatedAt)
	return u
}

// SetDeleted sets the "deleted" field.
func (u *PromptUpsert) SetDeleted(v bool) *PromptUpsert {
	u.Set(prompt.FieldDeleted, v)
	return u
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *PromptUpsert) UpdateDeleted() *PromptUpsert {
	u.SetExcluded(prompt.FieldDeleted)
	return u
}

// SetUserID sets the "user_id" field.
func (u *PromptUpsert) SetUserID(v uuid.UUID) *PromptUpsert {
	u.Set(prompt.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PromptUpsert) UpdateUserID() *PromptUpsert {
	u.SetExcluded(prompt.FieldUserID)
	return u
}

// SetAct sets the "act" field.
func (u *PromptUpsert) SetAct(v string) *PromptUpsert {
	u.Set(prompt.FieldAct, v)
	return u
}

// UpdateAct sets the "act" field to the value that was provided on create.
func (u *PromptUpsert) UpdateAct() *PromptUpsert {
	u.SetExcluded(prompt.FieldAct)
	return u
}

// SetPrompt sets the "prompt" field.
func (u *PromptUpsert) SetPrompt(v string) *PromptUpsert {
	u.Set(prompt.FieldPrompt, v)
	return u
}

// UpdatePrompt sets the "prompt" field to the value that was provided on create.
func (u *PromptUpsert) UpdatePrompt() *PromptUpsert {
	u.SetExcluded(prompt.FieldPrompt)
	return u
}

// SetIsCustom sets the "is_custom" field.
func (u *PromptUpsert) SetIsCustom(v bool) *PromptUpsert {
	u.Set(prompt.FieldIsCustom, v)
	return u
}

// UpdateIsCustom sets the "is_custom" field to the value that was provided on create.
func (u *PromptUpsert) UpdateIsCustom() *PromptUpsert {
	u.SetExcluded(prompt.FieldIsCustom)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Prompt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromptUpsertOne) UpdateNewValues() *PromptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(prompt.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UUID(); exists {
			s.SetIgnore(prompt.FieldUUID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Prompt.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PromptUpsertOne) Ignore() *PromptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromptUpsertOne) DoNothing() *PromptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromptCreate.OnConflict
// documentation for more info.
func (u *PromptUpsertOne) Update(set func(*PromptUpsert)) *PromptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromptUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromptUpsertOne) SetUpdatedAt(v time.Time) *PromptUpsertOne {
	return u.Update(func(s *PromptUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromptUpsertOne) UpdateUpdatedAt() *PromptUpsertOne {
	return u.Update(func(s *PromptUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeleted sets the "deleted" field.
func (u *PromptUpsertOne) SetDeleted(v bool) *PromptUpsertOne {
	return u.Update(func(s *PromptUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *PromptUpsertOne) UpdateDeleted() *PromptUpsertOne {
	return u.Update(func(s *PromptUpsert) {
		s.UpdateDeleted()
	})
}

// SetUserID sets the "user_id" field.
func (u *PromptUpsertOne) SetUserID(v uuid.UUID) *PromptUpsertOne {
	return u.Update(func(s *PromptUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PromptUpsertOne) UpdateUserID() *PromptUpsertOne {
	return u.Update(func(s *PromptUpsert) {
		s.UpdateUserID()
	})
}

// SetAct sets the "act" field.
func (u *PromptUpsertOne) SetAct(v string) *PromptUpsertOne {
	return u.Update(func(s *PromptUpsert) {
		s.SetAct(v)
	})
}

// UpdateAct sets the "act" field to the value that was provided on create.
func (u *PromptUpsertOne) UpdateAct() *PromptUpsertOne {
	return u.Update(func(s *PromptUpsert) {
		s.UpdateAct()
	})
}

// SetPrompt sets the "prompt" field.
func (u *PromptUpsertOne) SetPrompt(v string) *PromptUpsertOne {
	return u.Update(func(s *PromptUpsert) {
		s.SetPrompt(v)
	})
}

// UpdatePrompt sets the "prompt" field to the value that was provided on create.
func (u *PromptUpsertOne) UpdatePrompt() *PromptUpsertOne {
	return u.Update(func(s *PromptUpsert) {
		s.UpdatePrompt()
	})
}

// SetIsCustom sets the "is_custom" field.
func (u *PromptUpsertOne) SetIsCustom(v bool) *PromptUpsertOne {
	return u.Update(func(s *PromptUpsert) {
		s.SetIsCustom(v)
	})
}

// UpdateIsCustom sets the "is_custom" field to the value that was provided on create.
func (u *PromptUpsertOne) UpdateIsCustom() *PromptUpsertOne {
	return u.Update(func(s *PromptUpsert) {
		s.UpdateIsCustom()
	})
}

// Exec executes the query.
func (u *PromptUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromptCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromptUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PromptUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PromptUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PromptCreateBulk is the builder for creating many Prompt entities in bulk.
type PromptCreateBulk struct {
	config
	builders []*PromptCreate
	conflict []sql.ConflictOption
}

// Save creates the Prompt entities in the database.
func (pcb *PromptCreateBulk) Save(ctx context.Context) ([]*Prompt, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Prompt, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PromptCreateBulk) SaveX(ctx context.Context) []*Prompt {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PromptCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PromptCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Prompt.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromptUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PromptCreateBulk) OnConflict(opts ...sql.ConflictOption) *PromptUpsertBulk {
	pcb.conflict = opts
	return &PromptUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Prompt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PromptCreateBulk) OnConflictColumns(columns ...string) *PromptUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PromptUpsertBulk{
		create: pcb,
	}
}

// PromptUpsertBulk is the builder for "upsert"-ing
// a bulk of Prompt nodes.
type PromptUpsertBulk struct {
	create *PromptCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Prompt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromptUpsertBulk) UpdateNewValues() *PromptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(prompt.FieldCreatedAt)
			}
			if _, exists := b.mutation.UUID(); exists {
				s.SetIgnore(prompt.FieldUUID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Prompt.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PromptUpsertBulk) Ignore() *PromptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromptUpsertBulk) DoNothing() *PromptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromptCreateBulk.OnConflict
// documentation for more info.
func (u *PromptUpsertBulk) Update(set func(*PromptUpsert)) *PromptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromptUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromptUpsertBulk) SetUpdatedAt(v time.Time) *PromptUpsertBulk {
	return u.Update(func(s *PromptUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromptUpsertBulk) UpdateUpdatedAt() *PromptUpsertBulk {
	return u.Update(func(s *PromptUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeleted sets the "deleted" field.
func (u *PromptUpsertBulk) SetDeleted(v bool) *PromptUpsertBulk {
	return u.Update(func(s *PromptUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *PromptUpsertBulk) UpdateDeleted() *PromptUpsertBulk {
	return u.Update(func(s *PromptUpsert) {
		s.UpdateDeleted()
	})
}

// SetUserID sets the "user_id" field.
func (u *PromptUpsertBulk) SetUserID(v uuid.UUID) *PromptUpsertBulk {
	return u.Update(func(s *PromptUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PromptUpsertBulk) UpdateUserID() *PromptUpsertBulk {
	return u.Update(func(s *PromptUpsert) {
		s.UpdateUserID()
	})
}

// SetAct sets the "act" field.
func (u *PromptUpsertBulk) SetAct(v string) *PromptUpsertBulk {
	return u.Update(func(s *PromptUpsert) {
		s.SetAct(v)
	})
}

// UpdateAct sets the "act" field to the value that was provided on create.
func (u *PromptUpsertBulk) UpdateAct() *PromptUpsertBulk {
	return u.Update(func(s *PromptUpsert) {
		s.UpdateAct()
	})
}

// SetPrompt sets the "prompt" field.
func (u *PromptUpsertBulk) SetPrompt(v string) *PromptUpsertBulk {
	return u.Update(func(s *PromptUpsert) {
		s.SetPrompt(v)
	})
}

// UpdatePrompt sets the "prompt" field to the value that was provided on create.
func (u *PromptUpsertBulk) UpdatePrompt() *PromptUpsertBulk {
	return u.Update(func(s *PromptUpsert) {
		s.UpdatePrompt()
	})
}

// SetIsCustom sets the "is_custom" field.
func (u *PromptUpsertBulk) SetIsCustom(v bool) *PromptUpsertBulk {
	return u.Update(func(s *PromptUpsert) {
		s.SetIsCustom(v)
	})
}

// UpdateIsCustom sets the "is_custom" field to the value that was provided on create.
func (u *PromptUpsertBulk) UpdateIsCustom() *PromptUpsertBulk {
	return u.Update(func(s *PromptUpsert) {
		s.UpdateIsCustom()
	})
}

// Exec executes the query.
func (u *PromptUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PromptCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromptCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromptUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
