// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notionboy/db/ent/predicate"
	"notionboy/db/ent/prompt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PromptUpdate is the builder for updating Prompt entities.
type PromptUpdate struct {
	config
	hooks    []Hook
	mutation *PromptMutation
}

// Where appends a list predicates to the PromptUpdate builder.
func (pu *PromptUpdate) Where(ps ...predicate.Prompt) *PromptUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PromptUpdate) SetUpdatedAt(t time.Time) *PromptUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeleted sets the "deleted" field.
func (pu *PromptUpdate) SetDeleted(b bool) *PromptUpdate {
	pu.mutation.SetDeleted(b)
	return pu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (pu *PromptUpdate) SetNillableDeleted(b *bool) *PromptUpdate {
	if b != nil {
		pu.SetDeleted(*b)
	}
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *PromptUpdate) SetUserID(u uuid.UUID) *PromptUpdate {
	pu.mutation.SetUserID(u)
	return pu
}

// SetAct sets the "act" field.
func (pu *PromptUpdate) SetAct(s string) *PromptUpdate {
	pu.mutation.SetAct(s)
	return pu
}

// SetPrompt sets the "prompt" field.
func (pu *PromptUpdate) SetPrompt(s string) *PromptUpdate {
	pu.mutation.SetPrompt(s)
	return pu
}

// SetIsCustom sets the "is_custom" field.
func (pu *PromptUpdate) SetIsCustom(b bool) *PromptUpdate {
	pu.mutation.SetIsCustom(b)
	return pu
}

// Mutation returns the PromptMutation object of the builder.
func (pu *PromptUpdate) Mutation() *PromptMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PromptUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks[int, PromptMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PromptUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PromptUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PromptUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PromptUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := prompt.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

func (pu *PromptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(prompt.Table, prompt.Columns, sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(prompt.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Deleted(); ok {
		_spec.SetField(prompt.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := pu.mutation.UserID(); ok {
		_spec.SetField(prompt.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.Act(); ok {
		_spec.SetField(prompt.FieldAct, field.TypeString, value)
	}
	if value, ok := pu.mutation.Prompt(); ok {
		_spec.SetField(prompt.FieldPrompt, field.TypeString, value)
	}
	if value, ok := pu.mutation.IsCustom(); ok {
		_spec.SetField(prompt.FieldIsCustom, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prompt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PromptUpdateOne is the builder for updating a single Prompt entity.
type PromptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PromptMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PromptUpdateOne) SetUpdatedAt(t time.Time) *PromptUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeleted sets the "deleted" field.
func (puo *PromptUpdateOne) SetDeleted(b bool) *PromptUpdateOne {
	puo.mutation.SetDeleted(b)
	return puo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (puo *PromptUpdateOne) SetNillableDeleted(b *bool) *PromptUpdateOne {
	if b != nil {
		puo.SetDeleted(*b)
	}
	return puo
}

// SetUserID sets the "user_id" field.
func (puo *PromptUpdateOne) SetUserID(u uuid.UUID) *PromptUpdateOne {
	puo.mutation.SetUserID(u)
	return puo
}

// SetAct sets the "act" field.
func (puo *PromptUpdateOne) SetAct(s string) *PromptUpdateOne {
	puo.mutation.SetAct(s)
	return puo
}

// SetPrompt sets the "prompt" field.
func (puo *PromptUpdateOne) SetPrompt(s string) *PromptUpdateOne {
	puo.mutation.SetPrompt(s)
	return puo
}

// SetIsCustom sets the "is_custom" field.
func (puo *PromptUpdateOne) SetIsCustom(b bool) *PromptUpdateOne {
	puo.mutation.SetIsCustom(b)
	return puo
}

// Mutation returns the PromptMutation object of the builder.
func (puo *PromptUpdateOne) Mutation() *PromptMutation {
	return puo.mutation
}

// Where appends a list predicates to the PromptUpdate builder.
func (puo *PromptUpdateOne) Where(ps ...predicate.Prompt) *PromptUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PromptUpdateOne) Select(field string, fields ...string) *PromptUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Prompt entity.
func (puo *PromptUpdateOne) Save(ctx context.Context) (*Prompt, error) {
	puo.defaults()
	return withHooks[*Prompt, PromptMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PromptUpdateOne) SaveX(ctx context.Context) *Prompt {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PromptUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PromptUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PromptUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := prompt.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

func (puo *PromptUpdateOne) sqlSave(ctx context.Context) (_node *Prompt, err error) {
	_spec := sqlgraph.NewUpdateSpec(prompt.Table, prompt.Columns, sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Prompt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, prompt.FieldID)
		for _, f := range fields {
			if !prompt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != prompt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(prompt.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Deleted(); ok {
		_spec.SetField(prompt.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := puo.mutation.UserID(); ok {
		_spec.SetField(prompt.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.Act(); ok {
		_spec.SetField(prompt.FieldAct, field.TypeString, value)
	}
	if value, ok := puo.mutation.Prompt(); ok {
		_spec.SetField(prompt.FieldPrompt, field.TypeString, value)
	}
	if value, ok := puo.mutation.IsCustom(); ok {
		_spec.SetField(prompt.FieldIsCustom, field.TypeBool, value)
	}
	_node = &Prompt{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prompt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
