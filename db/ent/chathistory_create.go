// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notionboy/db/ent/chathistory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ChatHistoryCreate is the builder for creating a ChatHistory entity.
type ChatHistoryCreate struct {
	config
	mutation *ChatHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (chc *ChatHistoryCreate) SetCreatedAt(t time.Time) *ChatHistoryCreate {
	chc.mutation.SetCreatedAt(t)
	return chc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (chc *ChatHistoryCreate) SetNillableCreatedAt(t *time.Time) *ChatHistoryCreate {
	if t != nil {
		chc.SetCreatedAt(*t)
	}
	return chc
}

// SetUpdatedAt sets the "updated_at" field.
func (chc *ChatHistoryCreate) SetUpdatedAt(t time.Time) *ChatHistoryCreate {
	chc.mutation.SetUpdatedAt(t)
	return chc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (chc *ChatHistoryCreate) SetNillableUpdatedAt(t *time.Time) *ChatHistoryCreate {
	if t != nil {
		chc.SetUpdatedAt(*t)
	}
	return chc
}

// SetDeleted sets the "deleted" field.
func (chc *ChatHistoryCreate) SetDeleted(b bool) *ChatHistoryCreate {
	chc.mutation.SetDeleted(b)
	return chc
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (chc *ChatHistoryCreate) SetNillableDeleted(b *bool) *ChatHistoryCreate {
	if b != nil {
		chc.SetDeleted(*b)
	}
	return chc
}

// SetUserID sets the "user_id" field.
func (chc *ChatHistoryCreate) SetUserID(i int) *ChatHistoryCreate {
	chc.mutation.SetUserID(i)
	return chc
}

// SetConversationIdx sets the "conversation_idx" field.
func (chc *ChatHistoryCreate) SetConversationIdx(i int) *ChatHistoryCreate {
	chc.mutation.SetConversationIdx(i)
	return chc
}

// SetConversationID sets the "conversation_id" field.
func (chc *ChatHistoryCreate) SetConversationID(u uuid.UUID) *ChatHistoryCreate {
	chc.mutation.SetConversationID(u)
	return chc
}

// SetMessageID sets the "message_id" field.
func (chc *ChatHistoryCreate) SetMessageID(s string) *ChatHistoryCreate {
	chc.mutation.SetMessageID(s)
	return chc
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (chc *ChatHistoryCreate) SetNillableMessageID(s *string) *ChatHistoryCreate {
	if s != nil {
		chc.SetMessageID(*s)
	}
	return chc
}

// SetMessageIdx sets the "message_idx" field.
func (chc *ChatHistoryCreate) SetMessageIdx(i int) *ChatHistoryCreate {
	chc.mutation.SetMessageIdx(i)
	return chc
}

// SetNillableMessageIdx sets the "message_idx" field if the given value is not nil.
func (chc *ChatHistoryCreate) SetNillableMessageIdx(i *int) *ChatHistoryCreate {
	if i != nil {
		chc.SetMessageIdx(*i)
	}
	return chc
}

// SetRequest sets the "request" field.
func (chc *ChatHistoryCreate) SetRequest(s string) *ChatHistoryCreate {
	chc.mutation.SetRequest(s)
	return chc
}

// SetNillableRequest sets the "request" field if the given value is not nil.
func (chc *ChatHistoryCreate) SetNillableRequest(s *string) *ChatHistoryCreate {
	if s != nil {
		chc.SetRequest(*s)
	}
	return chc
}

// SetResponse sets the "response" field.
func (chc *ChatHistoryCreate) SetResponse(s string) *ChatHistoryCreate {
	chc.mutation.SetResponse(s)
	return chc
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (chc *ChatHistoryCreate) SetNillableResponse(s *string) *ChatHistoryCreate {
	if s != nil {
		chc.SetResponse(*s)
	}
	return chc
}

// SetTokenUsage sets the "token_usage" field.
func (chc *ChatHistoryCreate) SetTokenUsage(i int) *ChatHistoryCreate {
	chc.mutation.SetTokenUsage(i)
	return chc
}

// SetNillableTokenUsage sets the "token_usage" field if the given value is not nil.
func (chc *ChatHistoryCreate) SetNillableTokenUsage(i *int) *ChatHistoryCreate {
	if i != nil {
		chc.SetTokenUsage(*i)
	}
	return chc
}

// Mutation returns the ChatHistoryMutation object of the builder.
func (chc *ChatHistoryCreate) Mutation() *ChatHistoryMutation {
	return chc.mutation
}

// Save creates the ChatHistory in the database.
func (chc *ChatHistoryCreate) Save(ctx context.Context) (*ChatHistory, error) {
	chc.defaults()
	return withHooks[*ChatHistory, ChatHistoryMutation](ctx, chc.sqlSave, chc.mutation, chc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (chc *ChatHistoryCreate) SaveX(ctx context.Context) *ChatHistory {
	v, err := chc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (chc *ChatHistoryCreate) Exec(ctx context.Context) error {
	_, err := chc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chc *ChatHistoryCreate) ExecX(ctx context.Context) {
	if err := chc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (chc *ChatHistoryCreate) defaults() {
	if _, ok := chc.mutation.CreatedAt(); !ok {
		v := chathistory.DefaultCreatedAt()
		chc.mutation.SetCreatedAt(v)
	}
	if _, ok := chc.mutation.UpdatedAt(); !ok {
		v := chathistory.DefaultUpdatedAt()
		chc.mutation.SetUpdatedAt(v)
	}
	if _, ok := chc.mutation.Deleted(); !ok {
		v := chathistory.DefaultDeleted
		chc.mutation.SetDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (chc *ChatHistoryCreate) check() error {
	if _, ok := chc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "ChatHistory.deleted"`)}
	}
	if _, ok := chc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ChatHistory.user_id"`)}
	}
	if _, ok := chc.mutation.ConversationIdx(); !ok {
		return &ValidationError{Name: "conversation_idx", err: errors.New(`ent: missing required field "ChatHistory.conversation_idx"`)}
	}
	if _, ok := chc.mutation.ConversationID(); !ok {
		return &ValidationError{Name: "conversation_id", err: errors.New(`ent: missing required field "ChatHistory.conversation_id"`)}
	}
	return nil
}

func (chc *ChatHistoryCreate) sqlSave(ctx context.Context) (*ChatHistory, error) {
	if err := chc.check(); err != nil {
		return nil, err
	}
	_node, _spec := chc.createSpec()
	if err := sqlgraph.CreateNode(ctx, chc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	chc.mutation.id = &_node.ID
	chc.mutation.done = true
	return _node, nil
}

func (chc *ChatHistoryCreate) createSpec() (*ChatHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ChatHistory{config: chc.config}
		_spec = sqlgraph.NewCreateSpec(chathistory.Table, sqlgraph.NewFieldSpec(chathistory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = chc.conflict
	if value, ok := chc.mutation.CreatedAt(); ok {
		_spec.SetField(chathistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := chc.mutation.UpdatedAt(); ok {
		_spec.SetField(chathistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := chc.mutation.Deleted(); ok {
		_spec.SetField(chathistory.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if value, ok := chc.mutation.UserID(); ok {
		_spec.SetField(chathistory.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := chc.mutation.ConversationIdx(); ok {
		_spec.SetField(chathistory.FieldConversationIdx, field.TypeInt, value)
		_node.ConversationIdx = value
	}
	if value, ok := chc.mutation.ConversationID(); ok {
		_spec.SetField(chathistory.FieldConversationID, field.TypeUUID, value)
		_node.ConversationID = value
	}
	if value, ok := chc.mutation.MessageID(); ok {
		_spec.SetField(chathistory.FieldMessageID, field.TypeString, value)
		_node.MessageID = value
	}
	if value, ok := chc.mutation.MessageIdx(); ok {
		_spec.SetField(chathistory.FieldMessageIdx, field.TypeInt, value)
		_node.MessageIdx = value
	}
	if value, ok := chc.mutation.Request(); ok {
		_spec.SetField(chathistory.FieldRequest, field.TypeString, value)
		_node.Request = value
	}
	if value, ok := chc.mutation.Response(); ok {
		_spec.SetField(chathistory.FieldResponse, field.TypeString, value)
		_node.Response = value
	}
	if value, ok := chc.mutation.TokenUsage(); ok {
		_spec.SetField(chathistory.FieldTokenUsage, field.TypeInt, value)
		_node.TokenUsage = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChatHistory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChatHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (chc *ChatHistoryCreate) OnConflict(opts ...sql.ConflictOption) *ChatHistoryUpsertOne {
	chc.conflict = opts
	return &ChatHistoryUpsertOne{
		create: chc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChatHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (chc *ChatHistoryCreate) OnConflictColumns(columns ...string) *ChatHistoryUpsertOne {
	chc.conflict = append(chc.conflict, sql.ConflictColumns(columns...))
	return &ChatHistoryUpsertOne{
		create: chc,
	}
}

type (
	// ChatHistoryUpsertOne is the builder for "upsert"-ing
	//  one ChatHistory node.
	ChatHistoryUpsertOne struct {
		create *ChatHistoryCreate
	}

	// ChatHistoryUpsert is the "OnConflict" setter.
	ChatHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ChatHistoryUpsert) SetUpdatedAt(v time.Time) *ChatHistoryUpsert {
	u.Set(chathistory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChatHistoryUpsert) UpdateUpdatedAt() *ChatHistoryUpsert {
	u.SetExcluded(chathistory.FieldUpdatedAt)
	return u
}

// SetDeleted sets the "deleted" field.
func (u *ChatHistoryUpsert) SetDeleted(v bool) *ChatHistoryUpsert {
	u.Set(chathistory.FieldDeleted, v)
	return u
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *ChatHistoryUpsert) UpdateDeleted() *ChatHistoryUpsert {
	u.SetExcluded(chathistory.FieldDeleted)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ChatHistoryUpsert) SetUserID(v int) *ChatHistoryUpsert {
	u.Set(chathistory.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ChatHistoryUpsert) UpdateUserID() *ChatHistoryUpsert {
	u.SetExcluded(chathistory.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *ChatHistoryUpsert) AddUserID(v int) *ChatHistoryUpsert {
	u.Add(chathistory.FieldUserID, v)
	return u
}

// SetConversationIdx sets the "conversation_idx" field.
func (u *ChatHistoryUpsert) SetConversationIdx(v int) *ChatHistoryUpsert {
	u.Set(chathistory.FieldConversationIdx, v)
	return u
}

// UpdateConversationIdx sets the "conversation_idx" field to the value that was provided on create.
func (u *ChatHistoryUpsert) UpdateConversationIdx() *ChatHistoryUpsert {
	u.SetExcluded(chathistory.FieldConversationIdx)
	return u
}

// AddConversationIdx adds v to the "conversation_idx" field.
func (u *ChatHistoryUpsert) AddConversationIdx(v int) *ChatHistoryUpsert {
	u.Add(chathistory.FieldConversationIdx, v)
	return u
}

// SetConversationID sets the "conversation_id" field.
func (u *ChatHistoryUpsert) SetConversationID(v uuid.UUID) *ChatHistoryUpsert {
	u.Set(chathistory.FieldConversationID, v)
	return u
}

// UpdateConversationID sets the "conversation_id" field to the value that was provided on create.
func (u *ChatHistoryUpsert) UpdateConversationID() *ChatHistoryUpsert {
	u.SetExcluded(chathistory.FieldConversationID)
	return u
}

// SetMessageID sets the "message_id" field.
func (u *ChatHistoryUpsert) SetMessageID(v string) *ChatHistoryUpsert {
	u.Set(chathistory.FieldMessageID, v)
	return u
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *ChatHistoryUpsert) UpdateMessageID() *ChatHistoryUpsert {
	u.SetExcluded(chathistory.FieldMessageID)
	return u
}

// ClearMessageID clears the value of the "message_id" field.
func (u *ChatHistoryUpsert) ClearMessageID() *ChatHistoryUpsert {
	u.SetNull(chathistory.FieldMessageID)
	return u
}

// SetMessageIdx sets the "message_idx" field.
func (u *ChatHistoryUpsert) SetMessageIdx(v int) *ChatHistoryUpsert {
	u.Set(chathistory.FieldMessageIdx, v)
	return u
}

// UpdateMessageIdx sets the "message_idx" field to the value that was provided on create.
func (u *ChatHistoryUpsert) UpdateMessageIdx() *ChatHistoryUpsert {
	u.SetExcluded(chathistory.FieldMessageIdx)
	return u
}

// AddMessageIdx adds v to the "message_idx" field.
func (u *ChatHistoryUpsert) AddMessageIdx(v int) *ChatHistoryUpsert {
	u.Add(chathistory.FieldMessageIdx, v)
	return u
}

// ClearMessageIdx clears the value of the "message_idx" field.
func (u *ChatHistoryUpsert) ClearMessageIdx() *ChatHistoryUpsert {
	u.SetNull(chathistory.FieldMessageIdx)
	return u
}

// SetRequest sets the "request" field.
func (u *ChatHistoryUpsert) SetRequest(v string) *ChatHistoryUpsert {
	u.Set(chathistory.FieldRequest, v)
	return u
}

// UpdateRequest sets the "request" field to the value that was provided on create.
func (u *ChatHistoryUpsert) UpdateRequest() *ChatHistoryUpsert {
	u.SetExcluded(chathistory.FieldRequest)
	return u
}

// ClearRequest clears the value of the "request" field.
func (u *ChatHistoryUpsert) ClearRequest() *ChatHistoryUpsert {
	u.SetNull(chathistory.FieldRequest)
	return u
}

// SetResponse sets the "response" field.
func (u *ChatHistoryUpsert) SetResponse(v string) *ChatHistoryUpsert {
	u.Set(chathistory.FieldResponse, v)
	return u
}

// UpdateResponse sets the "response" field to the value that was provided on create.
func (u *ChatHistoryUpsert) UpdateResponse() *ChatHistoryUpsert {
	u.SetExcluded(chathistory.FieldResponse)
	return u
}

// ClearResponse clears the value of the "response" field.
func (u *ChatHistoryUpsert) ClearResponse() *ChatHistoryUpsert {
	u.SetNull(chathistory.FieldResponse)
	return u
}

// SetTokenUsage sets the "token_usage" field.
func (u *ChatHistoryUpsert) SetTokenUsage(v int) *ChatHistoryUpsert {
	u.Set(chathistory.FieldTokenUsage, v)
	return u
}

// UpdateTokenUsage sets the "token_usage" field to the value that was provided on create.
func (u *ChatHistoryUpsert) UpdateTokenUsage() *ChatHistoryUpsert {
	u.SetExcluded(chathistory.FieldTokenUsage)
	return u
}

// AddTokenUsage adds v to the "token_usage" field.
func (u *ChatHistoryUpsert) AddTokenUsage(v int) *ChatHistoryUpsert {
	u.Add(chathistory.FieldTokenUsage, v)
	return u
}

// ClearTokenUsage clears the value of the "token_usage" field.
func (u *ChatHistoryUpsert) ClearTokenUsage() *ChatHistoryUpsert {
	u.SetNull(chathistory.FieldTokenUsage)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ChatHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ChatHistoryUpsertOne) UpdateNewValues() *ChatHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(chathistory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChatHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ChatHistoryUpsertOne) Ignore() *ChatHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChatHistoryUpsertOne) DoNothing() *ChatHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChatHistoryCreate.OnConflict
// documentation for more info.
func (u *ChatHistoryUpsertOne) Update(set func(*ChatHistoryUpsert)) *ChatHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChatHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChatHistoryUpsertOne) SetUpdatedAt(v time.Time) *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChatHistoryUpsertOne) UpdateUpdatedAt() *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeleted sets the "deleted" field.
func (u *ChatHistoryUpsertOne) SetDeleted(v bool) *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *ChatHistoryUpsertOne) UpdateDeleted() *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateDeleted()
	})
}

// SetUserID sets the "user_id" field.
func (u *ChatHistoryUpsertOne) SetUserID(v int) *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *ChatHistoryUpsertOne) AddUserID(v int) *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ChatHistoryUpsertOne) UpdateUserID() *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateUserID()
	})
}

// SetConversationIdx sets the "conversation_idx" field.
func (u *ChatHistoryUpsertOne) SetConversationIdx(v int) *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetConversationIdx(v)
	})
}

// AddConversationIdx adds v to the "conversation_idx" field.
func (u *ChatHistoryUpsertOne) AddConversationIdx(v int) *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.AddConversationIdx(v)
	})
}

// UpdateConversationIdx sets the "conversation_idx" field to the value that was provided on create.
func (u *ChatHistoryUpsertOne) UpdateConversationIdx() *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateConversationIdx()
	})
}

// SetConversationID sets the "conversation_id" field.
func (u *ChatHistoryUpsertOne) SetConversationID(v uuid.UUID) *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetConversationID(v)
	})
}

// UpdateConversationID sets the "conversation_id" field to the value that was provided on create.
func (u *ChatHistoryUpsertOne) UpdateConversationID() *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateConversationID()
	})
}

// SetMessageID sets the "message_id" field.
func (u *ChatHistoryUpsertOne) SetMessageID(v string) *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetMessageID(v)
	})
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *ChatHistoryUpsertOne) UpdateMessageID() *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateMessageID()
	})
}

// ClearMessageID clears the value of the "message_id" field.
func (u *ChatHistoryUpsertOne) ClearMessageID() *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.ClearMessageID()
	})
}

// SetMessageIdx sets the "message_idx" field.
func (u *ChatHistoryUpsertOne) SetMessageIdx(v int) *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetMessageIdx(v)
	})
}

// AddMessageIdx adds v to the "message_idx" field.
func (u *ChatHistoryUpsertOne) AddMessageIdx(v int) *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.AddMessageIdx(v)
	})
}

// UpdateMessageIdx sets the "message_idx" field to the value that was provided on create.
func (u *ChatHistoryUpsertOne) UpdateMessageIdx() *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateMessageIdx()
	})
}

// ClearMessageIdx clears the value of the "message_idx" field.
func (u *ChatHistoryUpsertOne) ClearMessageIdx() *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.ClearMessageIdx()
	})
}

// SetRequest sets the "request" field.
func (u *ChatHistoryUpsertOne) SetRequest(v string) *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetRequest(v)
	})
}

// UpdateRequest sets the "request" field to the value that was provided on create.
func (u *ChatHistoryUpsertOne) UpdateRequest() *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateRequest()
	})
}

// ClearRequest clears the value of the "request" field.
func (u *ChatHistoryUpsertOne) ClearRequest() *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.ClearRequest()
	})
}

// SetResponse sets the "response" field.
func (u *ChatHistoryUpsertOne) SetResponse(v string) *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetResponse(v)
	})
}

// UpdateResponse sets the "response" field to the value that was provided on create.
func (u *ChatHistoryUpsertOne) UpdateResponse() *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateResponse()
	})
}

// ClearResponse clears the value of the "response" field.
func (u *ChatHistoryUpsertOne) ClearResponse() *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.ClearResponse()
	})
}

// SetTokenUsage sets the "token_usage" field.
func (u *ChatHistoryUpsertOne) SetTokenUsage(v int) *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetTokenUsage(v)
	})
}

// AddTokenUsage adds v to the "token_usage" field.
func (u *ChatHistoryUpsertOne) AddTokenUsage(v int) *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.AddTokenUsage(v)
	})
}

// UpdateTokenUsage sets the "token_usage" field to the value that was provided on create.
func (u *ChatHistoryUpsertOne) UpdateTokenUsage() *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateTokenUsage()
	})
}

// ClearTokenUsage clears the value of the "token_usage" field.
func (u *ChatHistoryUpsertOne) ClearTokenUsage() *ChatHistoryUpsertOne {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.ClearTokenUsage()
	})
}

// Exec executes the query.
func (u *ChatHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChatHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChatHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChatHistoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChatHistoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChatHistoryCreateBulk is the builder for creating many ChatHistory entities in bulk.
type ChatHistoryCreateBulk struct {
	config
	builders []*ChatHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the ChatHistory entities in the database.
func (chcb *ChatHistoryCreateBulk) Save(ctx context.Context) ([]*ChatHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(chcb.builders))
	nodes := make([]*ChatHistory, len(chcb.builders))
	mutators := make([]Mutator, len(chcb.builders))
	for i := range chcb.builders {
		func(i int, root context.Context) {
			builder := chcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChatHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, chcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = chcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, chcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, chcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (chcb *ChatHistoryCreateBulk) SaveX(ctx context.Context) []*ChatHistory {
	v, err := chcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (chcb *ChatHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := chcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chcb *ChatHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := chcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChatHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChatHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (chcb *ChatHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChatHistoryUpsertBulk {
	chcb.conflict = opts
	return &ChatHistoryUpsertBulk{
		create: chcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChatHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (chcb *ChatHistoryCreateBulk) OnConflictColumns(columns ...string) *ChatHistoryUpsertBulk {
	chcb.conflict = append(chcb.conflict, sql.ConflictColumns(columns...))
	return &ChatHistoryUpsertBulk{
		create: chcb,
	}
}

// ChatHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of ChatHistory nodes.
type ChatHistoryUpsertBulk struct {
	create *ChatHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ChatHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ChatHistoryUpsertBulk) UpdateNewValues() *ChatHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(chathistory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChatHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ChatHistoryUpsertBulk) Ignore() *ChatHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChatHistoryUpsertBulk) DoNothing() *ChatHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChatHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *ChatHistoryUpsertBulk) Update(set func(*ChatHistoryUpsert)) *ChatHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChatHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChatHistoryUpsertBulk) SetUpdatedAt(v time.Time) *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChatHistoryUpsertBulk) UpdateUpdatedAt() *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeleted sets the "deleted" field.
func (u *ChatHistoryUpsertBulk) SetDeleted(v bool) *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *ChatHistoryUpsertBulk) UpdateDeleted() *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateDeleted()
	})
}

// SetUserID sets the "user_id" field.
func (u *ChatHistoryUpsertBulk) SetUserID(v int) *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *ChatHistoryUpsertBulk) AddUserID(v int) *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ChatHistoryUpsertBulk) UpdateUserID() *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateUserID()
	})
}

// SetConversationIdx sets the "conversation_idx" field.
func (u *ChatHistoryUpsertBulk) SetConversationIdx(v int) *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetConversationIdx(v)
	})
}

// AddConversationIdx adds v to the "conversation_idx" field.
func (u *ChatHistoryUpsertBulk) AddConversationIdx(v int) *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.AddConversationIdx(v)
	})
}

// UpdateConversationIdx sets the "conversation_idx" field to the value that was provided on create.
func (u *ChatHistoryUpsertBulk) UpdateConversationIdx() *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateConversationIdx()
	})
}

// SetConversationID sets the "conversation_id" field.
func (u *ChatHistoryUpsertBulk) SetConversationID(v uuid.UUID) *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetConversationID(v)
	})
}

// UpdateConversationID sets the "conversation_id" field to the value that was provided on create.
func (u *ChatHistoryUpsertBulk) UpdateConversationID() *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateConversationID()
	})
}

// SetMessageID sets the "message_id" field.
func (u *ChatHistoryUpsertBulk) SetMessageID(v string) *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetMessageID(v)
	})
}

// UpdateMessageID sets the "message_id" field to the value that was provided on create.
func (u *ChatHistoryUpsertBulk) UpdateMessageID() *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateMessageID()
	})
}

// ClearMessageID clears the value of the "message_id" field.
func (u *ChatHistoryUpsertBulk) ClearMessageID() *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.ClearMessageID()
	})
}

// SetMessageIdx sets the "message_idx" field.
func (u *ChatHistoryUpsertBulk) SetMessageIdx(v int) *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetMessageIdx(v)
	})
}

// AddMessageIdx adds v to the "message_idx" field.
func (u *ChatHistoryUpsertBulk) AddMessageIdx(v int) *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.AddMessageIdx(v)
	})
}

// UpdateMessageIdx sets the "message_idx" field to the value that was provided on create.
func (u *ChatHistoryUpsertBulk) UpdateMessageIdx() *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateMessageIdx()
	})
}

// ClearMessageIdx clears the value of the "message_idx" field.
func (u *ChatHistoryUpsertBulk) ClearMessageIdx() *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.ClearMessageIdx()
	})
}

// SetRequest sets the "request" field.
func (u *ChatHistoryUpsertBulk) SetRequest(v string) *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetRequest(v)
	})
}

// UpdateRequest sets the "request" field to the value that was provided on create.
func (u *ChatHistoryUpsertBulk) UpdateRequest() *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateRequest()
	})
}

// ClearRequest clears the value of the "request" field.
func (u *ChatHistoryUpsertBulk) ClearRequest() *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.ClearRequest()
	})
}

// SetResponse sets the "response" field.
func (u *ChatHistoryUpsertBulk) SetResponse(v string) *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetResponse(v)
	})
}

// UpdateResponse sets the "response" field to the value that was provided on create.
func (u *ChatHistoryUpsertBulk) UpdateResponse() *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateResponse()
	})
}

// ClearResponse clears the value of the "response" field.
func (u *ChatHistoryUpsertBulk) ClearResponse() *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.ClearResponse()
	})
}

// SetTokenUsage sets the "token_usage" field.
func (u *ChatHistoryUpsertBulk) SetTokenUsage(v int) *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.SetTokenUsage(v)
	})
}

// AddTokenUsage adds v to the "token_usage" field.
func (u *ChatHistoryUpsertBulk) AddTokenUsage(v int) *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.AddTokenUsage(v)
	})
}

// UpdateTokenUsage sets the "token_usage" field to the value that was provided on create.
func (u *ChatHistoryUpsertBulk) UpdateTokenUsage() *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.UpdateTokenUsage()
	})
}

// ClearTokenUsage clears the value of the "token_usage" field.
func (u *ChatHistoryUpsertBulk) ClearTokenUsage() *ChatHistoryUpsertBulk {
	return u.Update(func(s *ChatHistoryUpsert) {
		s.ClearTokenUsage()
	})
}

// Exec executes the query.
func (u *ChatHistoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ChatHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChatHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChatHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
