// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"notionboy/db/ent/account"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Account is the model entity for the Account schema.
type Account struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted bool `json:"deleted,omitempty"`
	// UUID
	UUID uuid.UUID `json:"uuid,omitempty"`
	// For wechat, it's openid, for telegram, it's telegram user id, for oauth, it's oauth user email
	UserID string `json:"user_id,omitempty"`
	// UserType holds the value of the "user_type" field.
	UserType account.UserType `json:"user_type,omitempty"`
	// Notion Database ID
	DatabaseID string `json:"database_id,omitempty"`
	// Notion Access Token
	AccessToken string `json:"-"`
	// Notion User ID
	NotionUserID string `json:"notion_user_id,omitempty"`
	// Notion User Email
	NotionUserEmail string `json:"notion_user_email,omitempty"`
	// If not the latest schema, need update notion page properies
	IsLatestSchema bool `json:"is_latest_schema,omitempty"`
	// Dose this user can use openai API instead of reverse session
	IsOpenaiAPIUser bool `json:"is_openai_api_user,omitempty"`
	// OpenAI API Key
	OpenaiAPIKey string `json:"-"`
	// API Key
	APIKey uuid.UUID `json:"api_key,omitempty"`
	// Is admin user
	IsAdmin bool `json:"is_admin,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Account) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case account.FieldDeleted, account.FieldIsLatestSchema, account.FieldIsOpenaiAPIUser, account.FieldIsAdmin:
			values[i] = new(sql.NullBool)
		case account.FieldID:
			values[i] = new(sql.NullInt64)
		case account.FieldUserID, account.FieldUserType, account.FieldDatabaseID, account.FieldAccessToken, account.FieldNotionUserID, account.FieldNotionUserEmail, account.FieldOpenaiAPIKey:
			values[i] = new(sql.NullString)
		case account.FieldCreatedAt, account.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case account.FieldUUID, account.FieldAPIKey:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Account", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Account fields.
func (a *Account) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case account.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case account.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case account.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case account.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				a.Deleted = value.Bool
			}
		case account.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				a.UUID = *value
			}
		case account.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				a.UserID = value.String
			}
		case account.FieldUserType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_type", values[i])
			} else if value.Valid {
				a.UserType = account.UserType(value.String)
			}
		case account.FieldDatabaseID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field database_id", values[i])
			} else if value.Valid {
				a.DatabaseID = value.String
			}
		case account.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				a.AccessToken = value.String
			}
		case account.FieldNotionUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notion_user_id", values[i])
			} else if value.Valid {
				a.NotionUserID = value.String
			}
		case account.FieldNotionUserEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notion_user_email", values[i])
			} else if value.Valid {
				a.NotionUserEmail = value.String
			}
		case account.FieldIsLatestSchema:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_latest_schema", values[i])
			} else if value.Valid {
				a.IsLatestSchema = value.Bool
			}
		case account.FieldIsOpenaiAPIUser:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_openai_api_user", values[i])
			} else if value.Valid {
				a.IsOpenaiAPIUser = value.Bool
			}
		case account.FieldOpenaiAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field openai_api_key", values[i])
			} else if value.Valid {
				a.OpenaiAPIKey = value.String
			}
		case account.FieldAPIKey:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value != nil {
				a.APIKey = *value
			}
		case account.FieldIsAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_admin", values[i])
			} else if value.Valid {
				a.IsAdmin = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Account.
// Note that you need to call Account.Unwrap() before calling this method if this Account
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Account) Update() *AccountUpdateOne {
	return NewAccountClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Account entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Account) Unwrap() *Account {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Account is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Account) String() string {
	var builder strings.Builder
	builder.WriteString("Account(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", a.Deleted))
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", a.UUID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(a.UserID)
	builder.WriteString(", ")
	builder.WriteString("user_type=")
	builder.WriteString(fmt.Sprintf("%v", a.UserType))
	builder.WriteString(", ")
	builder.WriteString("database_id=")
	builder.WriteString(a.DatabaseID)
	builder.WriteString(", ")
	builder.WriteString("access_token=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("notion_user_id=")
	builder.WriteString(a.NotionUserID)
	builder.WriteString(", ")
	builder.WriteString("notion_user_email=")
	builder.WriteString(a.NotionUserEmail)
	builder.WriteString(", ")
	builder.WriteString("is_latest_schema=")
	builder.WriteString(fmt.Sprintf("%v", a.IsLatestSchema))
	builder.WriteString(", ")
	builder.WriteString("is_openai_api_user=")
	builder.WriteString(fmt.Sprintf("%v", a.IsOpenaiAPIUser))
	builder.WriteString(", ")
	builder.WriteString("openai_api_key=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("api_key=")
	builder.WriteString(fmt.Sprintf("%v", a.APIKey))
	builder.WriteString(", ")
	builder.WriteString("is_admin=")
	builder.WriteString(fmt.Sprintf("%v", a.IsAdmin))
	builder.WriteByte(')')
	return builder.String()
}

// Accounts is a parsable slice of Account.
type Accounts []*Account
