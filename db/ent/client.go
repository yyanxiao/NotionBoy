// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"notionboy/db/ent/migrate"

	"notionboy/db/ent/account"
	"notionboy/db/ent/chathistory"
	"notionboy/db/ent/conversation"
	"notionboy/db/ent/conversationmessage"
	"notionboy/db/ent/order"
	"notionboy/db/ent/product"
	"notionboy/db/ent/prompt"
	"notionboy/db/ent/quota"
	"notionboy/db/ent/wechatsession"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Account is the client for interacting with the Account builders.
	Account *AccountClient
	// ChatHistory is the client for interacting with the ChatHistory builders.
	ChatHistory *ChatHistoryClient
	// Conversation is the client for interacting with the Conversation builders.
	Conversation *ConversationClient
	// ConversationMessage is the client for interacting with the ConversationMessage builders.
	ConversationMessage *ConversationMessageClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// Prompt is the client for interacting with the Prompt builders.
	Prompt *PromptClient
	// Quota is the client for interacting with the Quota builders.
	Quota *QuotaClient
	// WechatSession is the client for interacting with the WechatSession builders.
	WechatSession *WechatSessionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Account = NewAccountClient(c.config)
	c.ChatHistory = NewChatHistoryClient(c.config)
	c.Conversation = NewConversationClient(c.config)
	c.ConversationMessage = NewConversationMessageClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.Product = NewProductClient(c.config)
	c.Prompt = NewPromptClient(c.config)
	c.Quota = NewQuotaClient(c.config)
	c.WechatSession = NewWechatSessionClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Account:             NewAccountClient(cfg),
		ChatHistory:         NewChatHistoryClient(cfg),
		Conversation:        NewConversationClient(cfg),
		ConversationMessage: NewConversationMessageClient(cfg),
		Order:               NewOrderClient(cfg),
		Product:             NewProductClient(cfg),
		Prompt:              NewPromptClient(cfg),
		Quota:               NewQuotaClient(cfg),
		WechatSession:       NewWechatSessionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Account:             NewAccountClient(cfg),
		ChatHistory:         NewChatHistoryClient(cfg),
		Conversation:        NewConversationClient(cfg),
		ConversationMessage: NewConversationMessageClient(cfg),
		Order:               NewOrderClient(cfg),
		Product:             NewProductClient(cfg),
		Prompt:              NewPromptClient(cfg),
		Quota:               NewQuotaClient(cfg),
		WechatSession:       NewWechatSessionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Account.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Account, c.ChatHistory, c.Conversation, c.ConversationMessage, c.Order,
		c.Product, c.Prompt, c.Quota, c.WechatSession,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Account, c.ChatHistory, c.Conversation, c.ConversationMessage, c.Order,
		c.Product, c.Prompt, c.Quota, c.WechatSession,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AccountMutation:
		return c.Account.mutate(ctx, m)
	case *ChatHistoryMutation:
		return c.ChatHistory.mutate(ctx, m)
	case *ConversationMutation:
		return c.Conversation.mutate(ctx, m)
	case *ConversationMessageMutation:
		return c.ConversationMessage.mutate(ctx, m)
	case *OrderMutation:
		return c.Order.mutate(ctx, m)
	case *ProductMutation:
		return c.Product.mutate(ctx, m)
	case *PromptMutation:
		return c.Prompt.mutate(ctx, m)
	case *QuotaMutation:
		return c.Quota.mutate(ctx, m)
	case *WechatSessionMutation:
		return c.WechatSession.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AccountClient is a client for the Account schema.
type AccountClient struct {
	config
}

// NewAccountClient returns a client for the Account from the given config.
func NewAccountClient(c config) *AccountClient {
	return &AccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `account.Hooks(f(g(h())))`.
func (c *AccountClient) Use(hooks ...Hook) {
	c.hooks.Account = append(c.hooks.Account, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `account.Intercept(f(g(h())))`.
func (c *AccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.Account = append(c.inters.Account, interceptors...)
}

// Create returns a builder for creating a Account entity.
func (c *AccountClient) Create() *AccountCreate {
	mutation := newAccountMutation(c.config, OpCreate)
	return &AccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Account entities.
func (c *AccountClient) CreateBulk(builders ...*AccountCreate) *AccountCreateBulk {
	return &AccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Account.
func (c *AccountClient) Update() *AccountUpdate {
	mutation := newAccountMutation(c.config, OpUpdate)
	return &AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountClient) UpdateOne(a *Account) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccount(a))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountClient) UpdateOneID(id int) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccountID(id))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Account.
func (c *AccountClient) Delete() *AccountDelete {
	mutation := newAccountMutation(c.config, OpDelete)
	return &AccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccountClient) DeleteOne(a *Account) *AccountDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccountClient) DeleteOneID(id int) *AccountDeleteOne {
	builder := c.Delete().Where(account.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountDeleteOne{builder}
}

// Query returns a query builder for Account.
func (c *AccountClient) Query() *AccountQuery {
	return &AccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a Account entity by its id.
func (c *AccountClient) Get(ctx context.Context, id int) (*Account, error) {
	return c.Query().Where(account.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountClient) GetX(ctx context.Context, id int) *Account {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AccountClient) Hooks() []Hook {
	return c.hooks.Account
}

// Interceptors returns the client interceptors.
func (c *AccountClient) Interceptors() []Interceptor {
	return c.inters.Account
}

func (c *AccountClient) mutate(ctx context.Context, m *AccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Account mutation op: %q", m.Op())
	}
}

// ChatHistoryClient is a client for the ChatHistory schema.
type ChatHistoryClient struct {
	config
}

// NewChatHistoryClient returns a client for the ChatHistory from the given config.
func NewChatHistoryClient(c config) *ChatHistoryClient {
	return &ChatHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chathistory.Hooks(f(g(h())))`.
func (c *ChatHistoryClient) Use(hooks ...Hook) {
	c.hooks.ChatHistory = append(c.hooks.ChatHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chathistory.Intercept(f(g(h())))`.
func (c *ChatHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChatHistory = append(c.inters.ChatHistory, interceptors...)
}

// Create returns a builder for creating a ChatHistory entity.
func (c *ChatHistoryClient) Create() *ChatHistoryCreate {
	mutation := newChatHistoryMutation(c.config, OpCreate)
	return &ChatHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChatHistory entities.
func (c *ChatHistoryClient) CreateBulk(builders ...*ChatHistoryCreate) *ChatHistoryCreateBulk {
	return &ChatHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChatHistory.
func (c *ChatHistoryClient) Update() *ChatHistoryUpdate {
	mutation := newChatHistoryMutation(c.config, OpUpdate)
	return &ChatHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChatHistoryClient) UpdateOne(ch *ChatHistory) *ChatHistoryUpdateOne {
	mutation := newChatHistoryMutation(c.config, OpUpdateOne, withChatHistory(ch))
	return &ChatHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChatHistoryClient) UpdateOneID(id int) *ChatHistoryUpdateOne {
	mutation := newChatHistoryMutation(c.config, OpUpdateOne, withChatHistoryID(id))
	return &ChatHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChatHistory.
func (c *ChatHistoryClient) Delete() *ChatHistoryDelete {
	mutation := newChatHistoryMutation(c.config, OpDelete)
	return &ChatHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChatHistoryClient) DeleteOne(ch *ChatHistory) *ChatHistoryDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChatHistoryClient) DeleteOneID(id int) *ChatHistoryDeleteOne {
	builder := c.Delete().Where(chathistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChatHistoryDeleteOne{builder}
}

// Query returns a query builder for ChatHistory.
func (c *ChatHistoryClient) Query() *ChatHistoryQuery {
	return &ChatHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChatHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a ChatHistory entity by its id.
func (c *ChatHistoryClient) Get(ctx context.Context, id int) (*ChatHistory, error) {
	return c.Query().Where(chathistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChatHistoryClient) GetX(ctx context.Context, id int) *ChatHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ChatHistoryClient) Hooks() []Hook {
	return c.hooks.ChatHistory
}

// Interceptors returns the client interceptors.
func (c *ChatHistoryClient) Interceptors() []Interceptor {
	return c.inters.ChatHistory
}

func (c *ChatHistoryClient) mutate(ctx context.Context, m *ChatHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChatHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChatHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChatHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChatHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChatHistory mutation op: %q", m.Op())
	}
}

// ConversationClient is a client for the Conversation schema.
type ConversationClient struct {
	config
}

// NewConversationClient returns a client for the Conversation from the given config.
func NewConversationClient(c config) *ConversationClient {
	return &ConversationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `conversation.Hooks(f(g(h())))`.
func (c *ConversationClient) Use(hooks ...Hook) {
	c.hooks.Conversation = append(c.hooks.Conversation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `conversation.Intercept(f(g(h())))`.
func (c *ConversationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Conversation = append(c.inters.Conversation, interceptors...)
}

// Create returns a builder for creating a Conversation entity.
func (c *ConversationClient) Create() *ConversationCreate {
	mutation := newConversationMutation(c.config, OpCreate)
	return &ConversationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Conversation entities.
func (c *ConversationClient) CreateBulk(builders ...*ConversationCreate) *ConversationCreateBulk {
	return &ConversationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Conversation.
func (c *ConversationClient) Update() *ConversationUpdate {
	mutation := newConversationMutation(c.config, OpUpdate)
	return &ConversationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConversationClient) UpdateOne(co *Conversation) *ConversationUpdateOne {
	mutation := newConversationMutation(c.config, OpUpdateOne, withConversation(co))
	return &ConversationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConversationClient) UpdateOneID(id int) *ConversationUpdateOne {
	mutation := newConversationMutation(c.config, OpUpdateOne, withConversationID(id))
	return &ConversationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Conversation.
func (c *ConversationClient) Delete() *ConversationDelete {
	mutation := newConversationMutation(c.config, OpDelete)
	return &ConversationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConversationClient) DeleteOne(co *Conversation) *ConversationDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConversationClient) DeleteOneID(id int) *ConversationDeleteOne {
	builder := c.Delete().Where(conversation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConversationDeleteOne{builder}
}

// Query returns a query builder for Conversation.
func (c *ConversationClient) Query() *ConversationQuery {
	return &ConversationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConversation},
		inters: c.Interceptors(),
	}
}

// Get returns a Conversation entity by its id.
func (c *ConversationClient) Get(ctx context.Context, id int) (*Conversation, error) {
	return c.Query().Where(conversation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConversationClient) GetX(ctx context.Context, id int) *Conversation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConversationMessages queries the conversation_messages edge of a Conversation.
func (c *ConversationClient) QueryConversationMessages(co *Conversation) *ConversationMessageQuery {
	query := (&ConversationMessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(conversation.Table, conversation.FieldID, id),
			sqlgraph.To(conversationmessage.Table, conversationmessage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, conversation.ConversationMessagesTable, conversation.ConversationMessagesColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConversationClient) Hooks() []Hook {
	return c.hooks.Conversation
}

// Interceptors returns the client interceptors.
func (c *ConversationClient) Interceptors() []Interceptor {
	return c.inters.Conversation
}

func (c *ConversationClient) mutate(ctx context.Context, m *ConversationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConversationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConversationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConversationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConversationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Conversation mutation op: %q", m.Op())
	}
}

// ConversationMessageClient is a client for the ConversationMessage schema.
type ConversationMessageClient struct {
	config
}

// NewConversationMessageClient returns a client for the ConversationMessage from the given config.
func NewConversationMessageClient(c config) *ConversationMessageClient {
	return &ConversationMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `conversationmessage.Hooks(f(g(h())))`.
func (c *ConversationMessageClient) Use(hooks ...Hook) {
	c.hooks.ConversationMessage = append(c.hooks.ConversationMessage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `conversationmessage.Intercept(f(g(h())))`.
func (c *ConversationMessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.ConversationMessage = append(c.inters.ConversationMessage, interceptors...)
}

// Create returns a builder for creating a ConversationMessage entity.
func (c *ConversationMessageClient) Create() *ConversationMessageCreate {
	mutation := newConversationMessageMutation(c.config, OpCreate)
	return &ConversationMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ConversationMessage entities.
func (c *ConversationMessageClient) CreateBulk(builders ...*ConversationMessageCreate) *ConversationMessageCreateBulk {
	return &ConversationMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ConversationMessage.
func (c *ConversationMessageClient) Update() *ConversationMessageUpdate {
	mutation := newConversationMessageMutation(c.config, OpUpdate)
	return &ConversationMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConversationMessageClient) UpdateOne(cm *ConversationMessage) *ConversationMessageUpdateOne {
	mutation := newConversationMessageMutation(c.config, OpUpdateOne, withConversationMessage(cm))
	return &ConversationMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConversationMessageClient) UpdateOneID(id int) *ConversationMessageUpdateOne {
	mutation := newConversationMessageMutation(c.config, OpUpdateOne, withConversationMessageID(id))
	return &ConversationMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ConversationMessage.
func (c *ConversationMessageClient) Delete() *ConversationMessageDelete {
	mutation := newConversationMessageMutation(c.config, OpDelete)
	return &ConversationMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConversationMessageClient) DeleteOne(cm *ConversationMessage) *ConversationMessageDeleteOne {
	return c.DeleteOneID(cm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConversationMessageClient) DeleteOneID(id int) *ConversationMessageDeleteOne {
	builder := c.Delete().Where(conversationmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConversationMessageDeleteOne{builder}
}

// Query returns a query builder for ConversationMessage.
func (c *ConversationMessageClient) Query() *ConversationMessageQuery {
	return &ConversationMessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConversationMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a ConversationMessage entity by its id.
func (c *ConversationMessageClient) Get(ctx context.Context, id int) (*ConversationMessage, error) {
	return c.Query().Where(conversationmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConversationMessageClient) GetX(ctx context.Context, id int) *ConversationMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConversations queries the conversations edge of a ConversationMessage.
func (c *ConversationMessageClient) QueryConversations(cm *ConversationMessage) *ConversationQuery {
	query := (&ConversationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(conversationmessage.Table, conversationmessage.FieldID, id),
			sqlgraph.To(conversation.Table, conversation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, conversationmessage.ConversationsTable, conversationmessage.ConversationsColumn),
		)
		fromV = sqlgraph.Neighbors(cm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConversationMessageClient) Hooks() []Hook {
	return c.hooks.ConversationMessage
}

// Interceptors returns the client interceptors.
func (c *ConversationMessageClient) Interceptors() []Interceptor {
	return c.inters.ConversationMessage
}

func (c *ConversationMessageClient) mutate(ctx context.Context, m *ConversationMessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConversationMessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConversationMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConversationMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConversationMessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ConversationMessage mutation op: %q", m.Op())
	}
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `order.Intercept(f(g(h())))`.
func (c *OrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Order = append(c.inters.Order, interceptors...)
}

// Create returns a builder for creating a Order entity.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id int) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderClient) DeleteOneID(id int) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id int) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id int) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	return c.hooks.Order
}

// Interceptors returns the client interceptors.
func (c *OrderClient) Interceptors() []Interceptor {
	return c.inters.Order
}

func (c *OrderClient) mutate(ctx context.Context, m *OrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Order mutation op: %q", m.Op())
	}
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `product.Intercept(f(g(h())))`.
func (c *ProductClient) Intercept(interceptors ...Interceptor) {
	c.inters.Product = append(c.inters.Product, interceptors...)
}

// Create returns a builder for creating a Product entity.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductClient) DeleteOneID(id int) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProduct},
		inters: c.Interceptors(),
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// Interceptors returns the client interceptors.
func (c *ProductClient) Interceptors() []Interceptor {
	return c.inters.Product
}

func (c *ProductClient) mutate(ctx context.Context, m *ProductMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Product mutation op: %q", m.Op())
	}
}

// PromptClient is a client for the Prompt schema.
type PromptClient struct {
	config
}

// NewPromptClient returns a client for the Prompt from the given config.
func NewPromptClient(c config) *PromptClient {
	return &PromptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prompt.Hooks(f(g(h())))`.
func (c *PromptClient) Use(hooks ...Hook) {
	c.hooks.Prompt = append(c.hooks.Prompt, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `prompt.Intercept(f(g(h())))`.
func (c *PromptClient) Intercept(interceptors ...Interceptor) {
	c.inters.Prompt = append(c.inters.Prompt, interceptors...)
}

// Create returns a builder for creating a Prompt entity.
func (c *PromptClient) Create() *PromptCreate {
	mutation := newPromptMutation(c.config, OpCreate)
	return &PromptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Prompt entities.
func (c *PromptClient) CreateBulk(builders ...*PromptCreate) *PromptCreateBulk {
	return &PromptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Prompt.
func (c *PromptClient) Update() *PromptUpdate {
	mutation := newPromptMutation(c.config, OpUpdate)
	return &PromptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromptClient) UpdateOne(pr *Prompt) *PromptUpdateOne {
	mutation := newPromptMutation(c.config, OpUpdateOne, withPrompt(pr))
	return &PromptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromptClient) UpdateOneID(id int) *PromptUpdateOne {
	mutation := newPromptMutation(c.config, OpUpdateOne, withPromptID(id))
	return &PromptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Prompt.
func (c *PromptClient) Delete() *PromptDelete {
	mutation := newPromptMutation(c.config, OpDelete)
	return &PromptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromptClient) DeleteOne(pr *Prompt) *PromptDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromptClient) DeleteOneID(id int) *PromptDeleteOne {
	builder := c.Delete().Where(prompt.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromptDeleteOne{builder}
}

// Query returns a query builder for Prompt.
func (c *PromptClient) Query() *PromptQuery {
	return &PromptQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePrompt},
		inters: c.Interceptors(),
	}
}

// Get returns a Prompt entity by its id.
func (c *PromptClient) Get(ctx context.Context, id int) (*Prompt, error) {
	return c.Query().Where(prompt.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromptClient) GetX(ctx context.Context, id int) *Prompt {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PromptClient) Hooks() []Hook {
	return c.hooks.Prompt
}

// Interceptors returns the client interceptors.
func (c *PromptClient) Interceptors() []Interceptor {
	return c.inters.Prompt
}

func (c *PromptClient) mutate(ctx context.Context, m *PromptMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromptCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromptUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromptDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Prompt mutation op: %q", m.Op())
	}
}

// QuotaClient is a client for the Quota schema.
type QuotaClient struct {
	config
}

// NewQuotaClient returns a client for the Quota from the given config.
func NewQuotaClient(c config) *QuotaClient {
	return &QuotaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `quota.Hooks(f(g(h())))`.
func (c *QuotaClient) Use(hooks ...Hook) {
	c.hooks.Quota = append(c.hooks.Quota, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `quota.Intercept(f(g(h())))`.
func (c *QuotaClient) Intercept(interceptors ...Interceptor) {
	c.inters.Quota = append(c.inters.Quota, interceptors...)
}

// Create returns a builder for creating a Quota entity.
func (c *QuotaClient) Create() *QuotaCreate {
	mutation := newQuotaMutation(c.config, OpCreate)
	return &QuotaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Quota entities.
func (c *QuotaClient) CreateBulk(builders ...*QuotaCreate) *QuotaCreateBulk {
	return &QuotaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Quota.
func (c *QuotaClient) Update() *QuotaUpdate {
	mutation := newQuotaMutation(c.config, OpUpdate)
	return &QuotaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuotaClient) UpdateOne(q *Quota) *QuotaUpdateOne {
	mutation := newQuotaMutation(c.config, OpUpdateOne, withQuota(q))
	return &QuotaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuotaClient) UpdateOneID(id int) *QuotaUpdateOne {
	mutation := newQuotaMutation(c.config, OpUpdateOne, withQuotaID(id))
	return &QuotaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Quota.
func (c *QuotaClient) Delete() *QuotaDelete {
	mutation := newQuotaMutation(c.config, OpDelete)
	return &QuotaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuotaClient) DeleteOne(q *Quota) *QuotaDeleteOne {
	return c.DeleteOneID(q.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuotaClient) DeleteOneID(id int) *QuotaDeleteOne {
	builder := c.Delete().Where(quota.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuotaDeleteOne{builder}
}

// Query returns a query builder for Quota.
func (c *QuotaClient) Query() *QuotaQuery {
	return &QuotaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuota},
		inters: c.Interceptors(),
	}
}

// Get returns a Quota entity by its id.
func (c *QuotaClient) Get(ctx context.Context, id int) (*Quota, error) {
	return c.Query().Where(quota.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuotaClient) GetX(ctx context.Context, id int) *Quota {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *QuotaClient) Hooks() []Hook {
	return c.hooks.Quota
}

// Interceptors returns the client interceptors.
func (c *QuotaClient) Interceptors() []Interceptor {
	return c.inters.Quota
}

func (c *QuotaClient) mutate(ctx context.Context, m *QuotaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuotaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuotaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuotaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuotaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Quota mutation op: %q", m.Op())
	}
}

// WechatSessionClient is a client for the WechatSession schema.
type WechatSessionClient struct {
	config
}

// NewWechatSessionClient returns a client for the WechatSession from the given config.
func NewWechatSessionClient(c config) *WechatSessionClient {
	return &WechatSessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `wechatsession.Hooks(f(g(h())))`.
func (c *WechatSessionClient) Use(hooks ...Hook) {
	c.hooks.WechatSession = append(c.hooks.WechatSession, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `wechatsession.Intercept(f(g(h())))`.
func (c *WechatSessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.WechatSession = append(c.inters.WechatSession, interceptors...)
}

// Create returns a builder for creating a WechatSession entity.
func (c *WechatSessionClient) Create() *WechatSessionCreate {
	mutation := newWechatSessionMutation(c.config, OpCreate)
	return &WechatSessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WechatSession entities.
func (c *WechatSessionClient) CreateBulk(builders ...*WechatSessionCreate) *WechatSessionCreateBulk {
	return &WechatSessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WechatSession.
func (c *WechatSessionClient) Update() *WechatSessionUpdate {
	mutation := newWechatSessionMutation(c.config, OpUpdate)
	return &WechatSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WechatSessionClient) UpdateOne(ws *WechatSession) *WechatSessionUpdateOne {
	mutation := newWechatSessionMutation(c.config, OpUpdateOne, withWechatSession(ws))
	return &WechatSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WechatSessionClient) UpdateOneID(id int) *WechatSessionUpdateOne {
	mutation := newWechatSessionMutation(c.config, OpUpdateOne, withWechatSessionID(id))
	return &WechatSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WechatSession.
func (c *WechatSessionClient) Delete() *WechatSessionDelete {
	mutation := newWechatSessionMutation(c.config, OpDelete)
	return &WechatSessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WechatSessionClient) DeleteOne(ws *WechatSession) *WechatSessionDeleteOne {
	return c.DeleteOneID(ws.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WechatSessionClient) DeleteOneID(id int) *WechatSessionDeleteOne {
	builder := c.Delete().Where(wechatsession.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WechatSessionDeleteOne{builder}
}

// Query returns a query builder for WechatSession.
func (c *WechatSessionClient) Query() *WechatSessionQuery {
	return &WechatSessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWechatSession},
		inters: c.Interceptors(),
	}
}

// Get returns a WechatSession entity by its id.
func (c *WechatSessionClient) Get(ctx context.Context, id int) (*WechatSession, error) {
	return c.Query().Where(wechatsession.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WechatSessionClient) GetX(ctx context.Context, id int) *WechatSession {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *WechatSessionClient) Hooks() []Hook {
	return c.hooks.WechatSession
}

// Interceptors returns the client interceptors.
func (c *WechatSessionClient) Interceptors() []Interceptor {
	return c.inters.WechatSession
}

func (c *WechatSessionClient) mutate(ctx context.Context, m *WechatSessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WechatSessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WechatSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WechatSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WechatSessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WechatSession mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Account, ChatHistory, Conversation, ConversationMessage, Order, Product, Prompt,
		Quota, WechatSession []ent.Hook
	}
	inters struct {
		Account, ChatHistory, Conversation, ConversationMessage, Order, Product, Prompt,
		Quota, WechatSession []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
