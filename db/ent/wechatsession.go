// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"notionboy/db/ent/wechatsession"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// WechatSession is the model entity for the WechatSession schema.
type WechatSession struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted bool `json:"deleted,omitempty"`
	// wechat login session
	Session []byte `json:"session,omitempty"`
	// dummy user_id
	DummyUserID string `json:"dummy_user_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WechatSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case wechatsession.FieldSession:
			values[i] = new([]byte)
		case wechatsession.FieldDeleted:
			values[i] = new(sql.NullBool)
		case wechatsession.FieldID:
			values[i] = new(sql.NullInt64)
		case wechatsession.FieldDummyUserID:
			values[i] = new(sql.NullString)
		case wechatsession.FieldCreatedAt, wechatsession.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WechatSession", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WechatSession fields.
func (ws *WechatSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wechatsession.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ws.ID = int(value.Int64)
		case wechatsession.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ws.CreatedAt = value.Time
			}
		case wechatsession.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ws.UpdatedAt = value.Time
			}
		case wechatsession.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				ws.Deleted = value.Bool
			}
		case wechatsession.FieldSession:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field session", values[i])
			} else if value != nil {
				ws.Session = *value
			}
		case wechatsession.FieldDummyUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dummy_user_id", values[i])
			} else if value.Valid {
				ws.DummyUserID = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this WechatSession.
// Note that you need to call WechatSession.Unwrap() before calling this method if this WechatSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (ws *WechatSession) Update() *WechatSessionUpdateOne {
	return NewWechatSessionClient(ws.config).UpdateOne(ws)
}

// Unwrap unwraps the WechatSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ws *WechatSession) Unwrap() *WechatSession {
	_tx, ok := ws.config.driver.(*txDriver)
	if !ok {
		panic("ent: WechatSession is not a transactional entity")
	}
	ws.config.driver = _tx.drv
	return ws
}

// String implements the fmt.Stringer.
func (ws *WechatSession) String() string {
	var builder strings.Builder
	builder.WriteString("WechatSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ws.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ws.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ws.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", ws.Deleted))
	builder.WriteString(", ")
	builder.WriteString("session=")
	builder.WriteString(fmt.Sprintf("%v", ws.Session))
	builder.WriteString(", ")
	builder.WriteString("dummy_user_id=")
	builder.WriteString(ws.DummyUserID)
	builder.WriteByte(')')
	return builder.String()
}

// WechatSessions is a parsable slice of WechatSession.
type WechatSessions []*WechatSession
