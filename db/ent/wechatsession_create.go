// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notionboy/db/ent/wechatsession"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WechatSessionCreate is the builder for creating a WechatSession entity.
type WechatSessionCreate struct {
	config
	mutation *WechatSessionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (wsc *WechatSessionCreate) SetCreatedAt(t time.Time) *WechatSessionCreate {
	wsc.mutation.SetCreatedAt(t)
	return wsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wsc *WechatSessionCreate) SetNillableCreatedAt(t *time.Time) *WechatSessionCreate {
	if t != nil {
		wsc.SetCreatedAt(*t)
	}
	return wsc
}

// SetUpdatedAt sets the "updated_at" field.
func (wsc *WechatSessionCreate) SetUpdatedAt(t time.Time) *WechatSessionCreate {
	wsc.mutation.SetUpdatedAt(t)
	return wsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wsc *WechatSessionCreate) SetNillableUpdatedAt(t *time.Time) *WechatSessionCreate {
	if t != nil {
		wsc.SetUpdatedAt(*t)
	}
	return wsc
}

// SetDeleted sets the "deleted" field.
func (wsc *WechatSessionCreate) SetDeleted(b bool) *WechatSessionCreate {
	wsc.mutation.SetDeleted(b)
	return wsc
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (wsc *WechatSessionCreate) SetNillableDeleted(b *bool) *WechatSessionCreate {
	if b != nil {
		wsc.SetDeleted(*b)
	}
	return wsc
}

// SetSession sets the "session" field.
func (wsc *WechatSessionCreate) SetSession(b []byte) *WechatSessionCreate {
	wsc.mutation.SetSession(b)
	return wsc
}

// SetDummyUserID sets the "dummy_user_id" field.
func (wsc *WechatSessionCreate) SetDummyUserID(s string) *WechatSessionCreate {
	wsc.mutation.SetDummyUserID(s)
	return wsc
}

// Mutation returns the WechatSessionMutation object of the builder.
func (wsc *WechatSessionCreate) Mutation() *WechatSessionMutation {
	return wsc.mutation
}

// Save creates the WechatSession in the database.
func (wsc *WechatSessionCreate) Save(ctx context.Context) (*WechatSession, error) {
	wsc.defaults()
	return withHooks[*WechatSession, WechatSessionMutation](ctx, wsc.sqlSave, wsc.mutation, wsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wsc *WechatSessionCreate) SaveX(ctx context.Context) *WechatSession {
	v, err := wsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wsc *WechatSessionCreate) Exec(ctx context.Context) error {
	_, err := wsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsc *WechatSessionCreate) ExecX(ctx context.Context) {
	if err := wsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wsc *WechatSessionCreate) defaults() {
	if _, ok := wsc.mutation.CreatedAt(); !ok {
		v := wechatsession.DefaultCreatedAt()
		wsc.mutation.SetCreatedAt(v)
	}
	if _, ok := wsc.mutation.UpdatedAt(); !ok {
		v := wechatsession.DefaultUpdatedAt()
		wsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wsc.mutation.Deleted(); !ok {
		v := wechatsession.DefaultDeleted
		wsc.mutation.SetDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wsc *WechatSessionCreate) check() error {
	if _, ok := wsc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "WechatSession.deleted"`)}
	}
	if _, ok := wsc.mutation.Session(); !ok {
		return &ValidationError{Name: "session", err: errors.New(`ent: missing required field "WechatSession.session"`)}
	}
	if _, ok := wsc.mutation.DummyUserID(); !ok {
		return &ValidationError{Name: "dummy_user_id", err: errors.New(`ent: missing required field "WechatSession.dummy_user_id"`)}
	}
	return nil
}

func (wsc *WechatSessionCreate) sqlSave(ctx context.Context) (*WechatSession, error) {
	if err := wsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wsc.mutation.id = &_node.ID
	wsc.mutation.done = true
	return _node, nil
}

func (wsc *WechatSessionCreate) createSpec() (*WechatSession, *sqlgraph.CreateSpec) {
	var (
		_node = &WechatSession{config: wsc.config}
		_spec = sqlgraph.NewCreateSpec(wechatsession.Table, sqlgraph.NewFieldSpec(wechatsession.FieldID, field.TypeInt))
	)
	_spec.OnConflict = wsc.conflict
	if value, ok := wsc.mutation.CreatedAt(); ok {
		_spec.SetField(wechatsession.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wsc.mutation.UpdatedAt(); ok {
		_spec.SetField(wechatsession.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wsc.mutation.Deleted(); ok {
		_spec.SetField(wechatsession.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if value, ok := wsc.mutation.Session(); ok {
		_spec.SetField(wechatsession.FieldSession, field.TypeBytes, value)
		_node.Session = value
	}
	if value, ok := wsc.mutation.DummyUserID(); ok {
		_spec.SetField(wechatsession.FieldDummyUserID, field.TypeString, value)
		_node.DummyUserID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WechatSession.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WechatSessionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wsc *WechatSessionCreate) OnConflict(opts ...sql.ConflictOption) *WechatSessionUpsertOne {
	wsc.conflict = opts
	return &WechatSessionUpsertOne{
		create: wsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WechatSession.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wsc *WechatSessionCreate) OnConflictColumns(columns ...string) *WechatSessionUpsertOne {
	wsc.conflict = append(wsc.conflict, sql.ConflictColumns(columns...))
	return &WechatSessionUpsertOne{
		create: wsc,
	}
}

type (
	// WechatSessionUpsertOne is the builder for "upsert"-ing
	//  one WechatSession node.
	WechatSessionUpsertOne struct {
		create *WechatSessionCreate
	}

	// WechatSessionUpsert is the "OnConflict" setter.
	WechatSessionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *WechatSessionUpsert) SetUpdatedAt(v time.Time) *WechatSessionUpsert {
	u.Set(wechatsession.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WechatSessionUpsert) UpdateUpdatedAt() *WechatSessionUpsert {
	u.SetExcluded(wechatsession.FieldUpdatedAt)
	return u
}

// SetDeleted sets the "deleted" field.
func (u *WechatSessionUpsert) SetDeleted(v bool) *WechatSessionUpsert {
	u.Set(wechatsession.FieldDeleted, v)
	return u
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *WechatSessionUpsert) UpdateDeleted() *WechatSessionUpsert {
	u.SetExcluded(wechatsession.FieldDeleted)
	return u
}

// SetSession sets the "session" field.
func (u *WechatSessionUpsert) SetSession(v []byte) *WechatSessionUpsert {
	u.Set(wechatsession.FieldSession, v)
	return u
}

// UpdateSession sets the "session" field to the value that was provided on create.
func (u *WechatSessionUpsert) UpdateSession() *WechatSessionUpsert {
	u.SetExcluded(wechatsession.FieldSession)
	return u
}

// SetDummyUserID sets the "dummy_user_id" field.
func (u *WechatSessionUpsert) SetDummyUserID(v string) *WechatSessionUpsert {
	u.Set(wechatsession.FieldDummyUserID, v)
	return u
}

// UpdateDummyUserID sets the "dummy_user_id" field to the value that was provided on create.
func (u *WechatSessionUpsert) UpdateDummyUserID() *WechatSessionUpsert {
	u.SetExcluded(wechatsession.FieldDummyUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.WechatSession.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *WechatSessionUpsertOne) UpdateNewValues() *WechatSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(wechatsession.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WechatSession.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WechatSessionUpsertOne) Ignore() *WechatSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WechatSessionUpsertOne) DoNothing() *WechatSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WechatSessionCreate.OnConflict
// documentation for more info.
func (u *WechatSessionUpsertOne) Update(set func(*WechatSessionUpsert)) *WechatSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WechatSessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WechatSessionUpsertOne) SetUpdatedAt(v time.Time) *WechatSessionUpsertOne {
	return u.Update(func(s *WechatSessionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WechatSessionUpsertOne) UpdateUpdatedAt() *WechatSessionUpsertOne {
	return u.Update(func(s *WechatSessionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeleted sets the "deleted" field.
func (u *WechatSessionUpsertOne) SetDeleted(v bool) *WechatSessionUpsertOne {
	return u.Update(func(s *WechatSessionUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *WechatSessionUpsertOne) UpdateDeleted() *WechatSessionUpsertOne {
	return u.Update(func(s *WechatSessionUpsert) {
		s.UpdateDeleted()
	})
}

// SetSession sets the "session" field.
func (u *WechatSessionUpsertOne) SetSession(v []byte) *WechatSessionUpsertOne {
	return u.Update(func(s *WechatSessionUpsert) {
		s.SetSession(v)
	})
}

// UpdateSession sets the "session" field to the value that was provided on create.
func (u *WechatSessionUpsertOne) UpdateSession() *WechatSessionUpsertOne {
	return u.Update(func(s *WechatSessionUpsert) {
		s.UpdateSession()
	})
}

// SetDummyUserID sets the "dummy_user_id" field.
func (u *WechatSessionUpsertOne) SetDummyUserID(v string) *WechatSessionUpsertOne {
	return u.Update(func(s *WechatSessionUpsert) {
		s.SetDummyUserID(v)
	})
}

// UpdateDummyUserID sets the "dummy_user_id" field to the value that was provided on create.
func (u *WechatSessionUpsertOne) UpdateDummyUserID() *WechatSessionUpsertOne {
	return u.Update(func(s *WechatSessionUpsert) {
		s.UpdateDummyUserID()
	})
}

// Exec executes the query.
func (u *WechatSessionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WechatSessionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WechatSessionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WechatSessionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WechatSessionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WechatSessionCreateBulk is the builder for creating many WechatSession entities in bulk.
type WechatSessionCreateBulk struct {
	config
	builders []*WechatSessionCreate
	conflict []sql.ConflictOption
}

// Save creates the WechatSession entities in the database.
func (wscb *WechatSessionCreateBulk) Save(ctx context.Context) ([]*WechatSession, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wscb.builders))
	nodes := make([]*WechatSession, len(wscb.builders))
	mutators := make([]Mutator, len(wscb.builders))
	for i := range wscb.builders {
		func(i int, root context.Context) {
			builder := wscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WechatSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wscb *WechatSessionCreateBulk) SaveX(ctx context.Context) []*WechatSession {
	v, err := wscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wscb *WechatSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := wscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wscb *WechatSessionCreateBulk) ExecX(ctx context.Context) {
	if err := wscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WechatSession.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WechatSessionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wscb *WechatSessionCreateBulk) OnConflict(opts ...sql.ConflictOption) *WechatSessionUpsertBulk {
	wscb.conflict = opts
	return &WechatSessionUpsertBulk{
		create: wscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WechatSession.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wscb *WechatSessionCreateBulk) OnConflictColumns(columns ...string) *WechatSessionUpsertBulk {
	wscb.conflict = append(wscb.conflict, sql.ConflictColumns(columns...))
	return &WechatSessionUpsertBulk{
		create: wscb,
	}
}

// WechatSessionUpsertBulk is the builder for "upsert"-ing
// a bulk of WechatSession nodes.
type WechatSessionUpsertBulk struct {
	create *WechatSessionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WechatSession.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *WechatSessionUpsertBulk) UpdateNewValues() *WechatSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(wechatsession.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WechatSession.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WechatSessionUpsertBulk) Ignore() *WechatSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WechatSessionUpsertBulk) DoNothing() *WechatSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WechatSessionCreateBulk.OnConflict
// documentation for more info.
func (u *WechatSessionUpsertBulk) Update(set func(*WechatSessionUpsert)) *WechatSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WechatSessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WechatSessionUpsertBulk) SetUpdatedAt(v time.Time) *WechatSessionUpsertBulk {
	return u.Update(func(s *WechatSessionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WechatSessionUpsertBulk) UpdateUpdatedAt() *WechatSessionUpsertBulk {
	return u.Update(func(s *WechatSessionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeleted sets the "deleted" field.
func (u *WechatSessionUpsertBulk) SetDeleted(v bool) *WechatSessionUpsertBulk {
	return u.Update(func(s *WechatSessionUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *WechatSessionUpsertBulk) UpdateDeleted() *WechatSessionUpsertBulk {
	return u.Update(func(s *WechatSessionUpsert) {
		s.UpdateDeleted()
	})
}

// SetSession sets the "session" field.
func (u *WechatSessionUpsertBulk) SetSession(v []byte) *WechatSessionUpsertBulk {
	return u.Update(func(s *WechatSessionUpsert) {
		s.SetSession(v)
	})
}

// UpdateSession sets the "session" field to the value that was provided on create.
func (u *WechatSessionUpsertBulk) UpdateSession() *WechatSessionUpsertBulk {
	return u.Update(func(s *WechatSessionUpsert) {
		s.UpdateSession()
	})
}

// SetDummyUserID sets the "dummy_user_id" field.
func (u *WechatSessionUpsertBulk) SetDummyUserID(v string) *WechatSessionUpsertBulk {
	return u.Update(func(s *WechatSessionUpsert) {
		s.SetDummyUserID(v)
	})
}

// UpdateDummyUserID sets the "dummy_user_id" field to the value that was provided on create.
func (u *WechatSessionUpsertBulk) UpdateDummyUserID() *WechatSessionUpsertBulk {
	return u.Update(func(s *WechatSessionUpsert) {
		s.UpdateDummyUserID()
	})
}

// Exec executes the query.
func (u *WechatSessionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WechatSessionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WechatSessionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WechatSessionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
