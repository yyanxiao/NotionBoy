// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"notionboy/db/ent/conversation"
	"notionboy/db/ent/conversationmessage"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ConversationMessage is the model entity for the ConversationMessage schema.
type ConversationMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted bool `json:"deleted,omitempty"`
	// UUID
	UUID uuid.UUID `json:"uuid,omitempty"`
	// user id
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Conversation ID for the conversation
	ConversationID uuid.UUID `json:"conversation_id,omitempty"`
	// Request of the message
	Request string `json:"request,omitempty"`
	// Response of the message
	Response string `json:"response,omitempty"`
	// Token usage of the message in the conversation
	TokenUsage int64 `json:"token_usage,omitempty"`
	// Model used for the message
	Model string `json:"model,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConversationMessageQuery when eager-loading is set.
	Edges                              ConversationMessageEdges `json:"edges"`
	conversation_conversation_messages *int
}

// ConversationMessageEdges holds the relations/edges for other nodes in the graph.
type ConversationMessageEdges struct {
	// Conversations holds the value of the conversations edge.
	Conversations *Conversation `json:"conversations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ConversationsOrErr returns the Conversations value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConversationMessageEdges) ConversationsOrErr() (*Conversation, error) {
	if e.loadedTypes[0] {
		if e.Conversations == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: conversation.Label}
		}
		return e.Conversations, nil
	}
	return nil, &NotLoadedError{edge: "conversations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ConversationMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case conversationmessage.FieldDeleted:
			values[i] = new(sql.NullBool)
		case conversationmessage.FieldID, conversationmessage.FieldTokenUsage:
			values[i] = new(sql.NullInt64)
		case conversationmessage.FieldRequest, conversationmessage.FieldResponse, conversationmessage.FieldModel:
			values[i] = new(sql.NullString)
		case conversationmessage.FieldCreatedAt, conversationmessage.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case conversationmessage.FieldUUID, conversationmessage.FieldUserID, conversationmessage.FieldConversationID:
			values[i] = new(uuid.UUID)
		case conversationmessage.ForeignKeys[0]: // conversation_conversation_messages
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ConversationMessage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ConversationMessage fields.
func (cm *ConversationMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case conversationmessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cm.ID = int(value.Int64)
		case conversationmessage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cm.CreatedAt = value.Time
			}
		case conversationmessage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cm.UpdatedAt = value.Time
			}
		case conversationmessage.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				cm.Deleted = value.Bool
			}
		case conversationmessage.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				cm.UUID = *value
			}
		case conversationmessage.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				cm.UserID = *value
			}
		case conversationmessage.FieldConversationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field conversation_id", values[i])
			} else if value != nil {
				cm.ConversationID = *value
			}
		case conversationmessage.FieldRequest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request", values[i])
			} else if value.Valid {
				cm.Request = value.String
			}
		case conversationmessage.FieldResponse:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response", values[i])
			} else if value.Valid {
				cm.Response = value.String
			}
		case conversationmessage.FieldTokenUsage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field token_usage", values[i])
			} else if value.Valid {
				cm.TokenUsage = value.Int64
			}
		case conversationmessage.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				cm.Model = value.String
			}
		case conversationmessage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field conversation_conversation_messages", value)
			} else if value.Valid {
				cm.conversation_conversation_messages = new(int)
				*cm.conversation_conversation_messages = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryConversations queries the "conversations" edge of the ConversationMessage entity.
func (cm *ConversationMessage) QueryConversations() *ConversationQuery {
	return NewConversationMessageClient(cm.config).QueryConversations(cm)
}

// Update returns a builder for updating this ConversationMessage.
// Note that you need to call ConversationMessage.Unwrap() before calling this method if this ConversationMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *ConversationMessage) Update() *ConversationMessageUpdateOne {
	return NewConversationMessageClient(cm.config).UpdateOne(cm)
}

// Unwrap unwraps the ConversationMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *ConversationMessage) Unwrap() *ConversationMessage {
	_tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ConversationMessage is not a transactional entity")
	}
	cm.config.driver = _tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *ConversationMessage) String() string {
	var builder strings.Builder
	builder.WriteString("ConversationMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", cm.Deleted))
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", cm.UUID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", cm.UserID))
	builder.WriteString(", ")
	builder.WriteString("conversation_id=")
	builder.WriteString(fmt.Sprintf("%v", cm.ConversationID))
	builder.WriteString(", ")
	builder.WriteString("request=")
	builder.WriteString(cm.Request)
	builder.WriteString(", ")
	builder.WriteString("response=")
	builder.WriteString(cm.Response)
	builder.WriteString(", ")
	builder.WriteString("token_usage=")
	builder.WriteString(fmt.Sprintf("%v", cm.TokenUsage))
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(cm.Model)
	builder.WriteByte(')')
	return builder.String()
}

// ConversationMessages is a parsable slice of ConversationMessage.
type ConversationMessages []*ConversationMessage
