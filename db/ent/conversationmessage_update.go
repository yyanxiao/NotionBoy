// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notionboy/db/ent/conversation"
	"notionboy/db/ent/conversationmessage"
	"notionboy/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ConversationMessageUpdate is the builder for updating ConversationMessage entities.
type ConversationMessageUpdate struct {
	config
	hooks    []Hook
	mutation *ConversationMessageMutation
}

// Where appends a list predicates to the ConversationMessageUpdate builder.
func (cmu *ConversationMessageUpdate) Where(ps ...predicate.ConversationMessage) *ConversationMessageUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetUpdatedAt sets the "updated_at" field.
func (cmu *ConversationMessageUpdate) SetUpdatedAt(t time.Time) *ConversationMessageUpdate {
	cmu.mutation.SetUpdatedAt(t)
	return cmu
}

// SetDeleted sets the "deleted" field.
func (cmu *ConversationMessageUpdate) SetDeleted(b bool) *ConversationMessageUpdate {
	cmu.mutation.SetDeleted(b)
	return cmu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (cmu *ConversationMessageUpdate) SetNillableDeleted(b *bool) *ConversationMessageUpdate {
	if b != nil {
		cmu.SetDeleted(*b)
	}
	return cmu
}

// SetUserID sets the "user_id" field.
func (cmu *ConversationMessageUpdate) SetUserID(u uuid.UUID) *ConversationMessageUpdate {
	cmu.mutation.SetUserID(u)
	return cmu
}

// SetConversationID sets the "conversation_id" field.
func (cmu *ConversationMessageUpdate) SetConversationID(u uuid.UUID) *ConversationMessageUpdate {
	cmu.mutation.SetConversationID(u)
	return cmu
}

// SetRequest sets the "request" field.
func (cmu *ConversationMessageUpdate) SetRequest(s string) *ConversationMessageUpdate {
	cmu.mutation.SetRequest(s)
	return cmu
}

// SetNillableRequest sets the "request" field if the given value is not nil.
func (cmu *ConversationMessageUpdate) SetNillableRequest(s *string) *ConversationMessageUpdate {
	if s != nil {
		cmu.SetRequest(*s)
	}
	return cmu
}

// ClearRequest clears the value of the "request" field.
func (cmu *ConversationMessageUpdate) ClearRequest() *ConversationMessageUpdate {
	cmu.mutation.ClearRequest()
	return cmu
}

// SetResponse sets the "response" field.
func (cmu *ConversationMessageUpdate) SetResponse(s string) *ConversationMessageUpdate {
	cmu.mutation.SetResponse(s)
	return cmu
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (cmu *ConversationMessageUpdate) SetNillableResponse(s *string) *ConversationMessageUpdate {
	if s != nil {
		cmu.SetResponse(*s)
	}
	return cmu
}

// ClearResponse clears the value of the "response" field.
func (cmu *ConversationMessageUpdate) ClearResponse() *ConversationMessageUpdate {
	cmu.mutation.ClearResponse()
	return cmu
}

// SetTokenUsage sets the "token_usage" field.
func (cmu *ConversationMessageUpdate) SetTokenUsage(i int64) *ConversationMessageUpdate {
	cmu.mutation.ResetTokenUsage()
	cmu.mutation.SetTokenUsage(i)
	return cmu
}

// SetNillableTokenUsage sets the "token_usage" field if the given value is not nil.
func (cmu *ConversationMessageUpdate) SetNillableTokenUsage(i *int64) *ConversationMessageUpdate {
	if i != nil {
		cmu.SetTokenUsage(*i)
	}
	return cmu
}

// AddTokenUsage adds i to the "token_usage" field.
func (cmu *ConversationMessageUpdate) AddTokenUsage(i int64) *ConversationMessageUpdate {
	cmu.mutation.AddTokenUsage(i)
	return cmu
}

// ClearTokenUsage clears the value of the "token_usage" field.
func (cmu *ConversationMessageUpdate) ClearTokenUsage() *ConversationMessageUpdate {
	cmu.mutation.ClearTokenUsage()
	return cmu
}

// SetModel sets the "model" field.
func (cmu *ConversationMessageUpdate) SetModel(s string) *ConversationMessageUpdate {
	cmu.mutation.SetModel(s)
	return cmu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (cmu *ConversationMessageUpdate) SetNillableModel(s *string) *ConversationMessageUpdate {
	if s != nil {
		cmu.SetModel(*s)
	}
	return cmu
}

// SetConversationsID sets the "conversations" edge to the Conversation entity by ID.
func (cmu *ConversationMessageUpdate) SetConversationsID(id int) *ConversationMessageUpdate {
	cmu.mutation.SetConversationsID(id)
	return cmu
}

// SetNillableConversationsID sets the "conversations" edge to the Conversation entity by ID if the given value is not nil.
func (cmu *ConversationMessageUpdate) SetNillableConversationsID(id *int) *ConversationMessageUpdate {
	if id != nil {
		cmu = cmu.SetConversationsID(*id)
	}
	return cmu
}

// SetConversations sets the "conversations" edge to the Conversation entity.
func (cmu *ConversationMessageUpdate) SetConversations(c *Conversation) *ConversationMessageUpdate {
	return cmu.SetConversationsID(c.ID)
}

// Mutation returns the ConversationMessageMutation object of the builder.
func (cmu *ConversationMessageUpdate) Mutation() *ConversationMessageMutation {
	return cmu.mutation
}

// ClearConversations clears the "conversations" edge to the Conversation entity.
func (cmu *ConversationMessageUpdate) ClearConversations() *ConversationMessageUpdate {
	cmu.mutation.ClearConversations()
	return cmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *ConversationMessageUpdate) Save(ctx context.Context) (int, error) {
	cmu.defaults()
	return withHooks[int, ConversationMessageMutation](ctx, cmu.sqlSave, cmu.mutation, cmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *ConversationMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *ConversationMessageUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *ConversationMessageUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmu *ConversationMessageUpdate) defaults() {
	if _, ok := cmu.mutation.UpdatedAt(); !ok {
		v := conversationmessage.UpdateDefaultUpdatedAt()
		cmu.mutation.SetUpdatedAt(v)
	}
}

func (cmu *ConversationMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(conversationmessage.Table, conversationmessage.Columns, sqlgraph.NewFieldSpec(conversationmessage.FieldID, field.TypeInt))
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.UpdatedAt(); ok {
		_spec.SetField(conversationmessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cmu.mutation.Deleted(); ok {
		_spec.SetField(conversationmessage.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := cmu.mutation.UserID(); ok {
		_spec.SetField(conversationmessage.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := cmu.mutation.ConversationID(); ok {
		_spec.SetField(conversationmessage.FieldConversationID, field.TypeUUID, value)
	}
	if value, ok := cmu.mutation.Request(); ok {
		_spec.SetField(conversationmessage.FieldRequest, field.TypeString, value)
	}
	if cmu.mutation.RequestCleared() {
		_spec.ClearField(conversationmessage.FieldRequest, field.TypeString)
	}
	if value, ok := cmu.mutation.Response(); ok {
		_spec.SetField(conversationmessage.FieldResponse, field.TypeString, value)
	}
	if cmu.mutation.ResponseCleared() {
		_spec.ClearField(conversationmessage.FieldResponse, field.TypeString)
	}
	if value, ok := cmu.mutation.TokenUsage(); ok {
		_spec.SetField(conversationmessage.FieldTokenUsage, field.TypeInt64, value)
	}
	if value, ok := cmu.mutation.AddedTokenUsage(); ok {
		_spec.AddField(conversationmessage.FieldTokenUsage, field.TypeInt64, value)
	}
	if cmu.mutation.TokenUsageCleared() {
		_spec.ClearField(conversationmessage.FieldTokenUsage, field.TypeInt64)
	}
	if value, ok := cmu.mutation.Model(); ok {
		_spec.SetField(conversationmessage.FieldModel, field.TypeString, value)
	}
	if cmu.mutation.ConversationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversationmessage.ConversationsTable,
			Columns: []string{conversationmessage.ConversationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.ConversationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversationmessage.ConversationsTable,
			Columns: []string{conversationmessage.ConversationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversationmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmu.mutation.done = true
	return n, nil
}

// ConversationMessageUpdateOne is the builder for updating a single ConversationMessage entity.
type ConversationMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConversationMessageMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cmuo *ConversationMessageUpdateOne) SetUpdatedAt(t time.Time) *ConversationMessageUpdateOne {
	cmuo.mutation.SetUpdatedAt(t)
	return cmuo
}

// SetDeleted sets the "deleted" field.
func (cmuo *ConversationMessageUpdateOne) SetDeleted(b bool) *ConversationMessageUpdateOne {
	cmuo.mutation.SetDeleted(b)
	return cmuo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (cmuo *ConversationMessageUpdateOne) SetNillableDeleted(b *bool) *ConversationMessageUpdateOne {
	if b != nil {
		cmuo.SetDeleted(*b)
	}
	return cmuo
}

// SetUserID sets the "user_id" field.
func (cmuo *ConversationMessageUpdateOne) SetUserID(u uuid.UUID) *ConversationMessageUpdateOne {
	cmuo.mutation.SetUserID(u)
	return cmuo
}

// SetConversationID sets the "conversation_id" field.
func (cmuo *ConversationMessageUpdateOne) SetConversationID(u uuid.UUID) *ConversationMessageUpdateOne {
	cmuo.mutation.SetConversationID(u)
	return cmuo
}

// SetRequest sets the "request" field.
func (cmuo *ConversationMessageUpdateOne) SetRequest(s string) *ConversationMessageUpdateOne {
	cmuo.mutation.SetRequest(s)
	return cmuo
}

// SetNillableRequest sets the "request" field if the given value is not nil.
func (cmuo *ConversationMessageUpdateOne) SetNillableRequest(s *string) *ConversationMessageUpdateOne {
	if s != nil {
		cmuo.SetRequest(*s)
	}
	return cmuo
}

// ClearRequest clears the value of the "request" field.
func (cmuo *ConversationMessageUpdateOne) ClearRequest() *ConversationMessageUpdateOne {
	cmuo.mutation.ClearRequest()
	return cmuo
}

// SetResponse sets the "response" field.
func (cmuo *ConversationMessageUpdateOne) SetResponse(s string) *ConversationMessageUpdateOne {
	cmuo.mutation.SetResponse(s)
	return cmuo
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (cmuo *ConversationMessageUpdateOne) SetNillableResponse(s *string) *ConversationMessageUpdateOne {
	if s != nil {
		cmuo.SetResponse(*s)
	}
	return cmuo
}

// ClearResponse clears the value of the "response" field.
func (cmuo *ConversationMessageUpdateOne) ClearResponse() *ConversationMessageUpdateOne {
	cmuo.mutation.ClearResponse()
	return cmuo
}

// SetTokenUsage sets the "token_usage" field.
func (cmuo *ConversationMessageUpdateOne) SetTokenUsage(i int64) *ConversationMessageUpdateOne {
	cmuo.mutation.ResetTokenUsage()
	cmuo.mutation.SetTokenUsage(i)
	return cmuo
}

// SetNillableTokenUsage sets the "token_usage" field if the given value is not nil.
func (cmuo *ConversationMessageUpdateOne) SetNillableTokenUsage(i *int64) *ConversationMessageUpdateOne {
	if i != nil {
		cmuo.SetTokenUsage(*i)
	}
	return cmuo
}

// AddTokenUsage adds i to the "token_usage" field.
func (cmuo *ConversationMessageUpdateOne) AddTokenUsage(i int64) *ConversationMessageUpdateOne {
	cmuo.mutation.AddTokenUsage(i)
	return cmuo
}

// ClearTokenUsage clears the value of the "token_usage" field.
func (cmuo *ConversationMessageUpdateOne) ClearTokenUsage() *ConversationMessageUpdateOne {
	cmuo.mutation.ClearTokenUsage()
	return cmuo
}

// SetModel sets the "model" field.
func (cmuo *ConversationMessageUpdateOne) SetModel(s string) *ConversationMessageUpdateOne {
	cmuo.mutation.SetModel(s)
	return cmuo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (cmuo *ConversationMessageUpdateOne) SetNillableModel(s *string) *ConversationMessageUpdateOne {
	if s != nil {
		cmuo.SetModel(*s)
	}
	return cmuo
}

// SetConversationsID sets the "conversations" edge to the Conversation entity by ID.
func (cmuo *ConversationMessageUpdateOne) SetConversationsID(id int) *ConversationMessageUpdateOne {
	cmuo.mutation.SetConversationsID(id)
	return cmuo
}

// SetNillableConversationsID sets the "conversations" edge to the Conversation entity by ID if the given value is not nil.
func (cmuo *ConversationMessageUpdateOne) SetNillableConversationsID(id *int) *ConversationMessageUpdateOne {
	if id != nil {
		cmuo = cmuo.SetConversationsID(*id)
	}
	return cmuo
}

// SetConversations sets the "conversations" edge to the Conversation entity.
func (cmuo *ConversationMessageUpdateOne) SetConversations(c *Conversation) *ConversationMessageUpdateOne {
	return cmuo.SetConversationsID(c.ID)
}

// Mutation returns the ConversationMessageMutation object of the builder.
func (cmuo *ConversationMessageUpdateOne) Mutation() *ConversationMessageMutation {
	return cmuo.mutation
}

// ClearConversations clears the "conversations" edge to the Conversation entity.
func (cmuo *ConversationMessageUpdateOne) ClearConversations() *ConversationMessageUpdateOne {
	cmuo.mutation.ClearConversations()
	return cmuo
}

// Where appends a list predicates to the ConversationMessageUpdate builder.
func (cmuo *ConversationMessageUpdateOne) Where(ps ...predicate.ConversationMessage) *ConversationMessageUpdateOne {
	cmuo.mutation.Where(ps...)
	return cmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *ConversationMessageUpdateOne) Select(field string, fields ...string) *ConversationMessageUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated ConversationMessage entity.
func (cmuo *ConversationMessageUpdateOne) Save(ctx context.Context) (*ConversationMessage, error) {
	cmuo.defaults()
	return withHooks[*ConversationMessage, ConversationMessageMutation](ctx, cmuo.sqlSave, cmuo.mutation, cmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *ConversationMessageUpdateOne) SaveX(ctx context.Context) *ConversationMessage {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *ConversationMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *ConversationMessageUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmuo *ConversationMessageUpdateOne) defaults() {
	if _, ok := cmuo.mutation.UpdatedAt(); !ok {
		v := conversationmessage.UpdateDefaultUpdatedAt()
		cmuo.mutation.SetUpdatedAt(v)
	}
}

func (cmuo *ConversationMessageUpdateOne) sqlSave(ctx context.Context) (_node *ConversationMessage, err error) {
	_spec := sqlgraph.NewUpdateSpec(conversationmessage.Table, conversationmessage.Columns, sqlgraph.NewFieldSpec(conversationmessage.FieldID, field.TypeInt))
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConversationMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, conversationmessage.FieldID)
		for _, f := range fields {
			if !conversationmessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != conversationmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(conversationmessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cmuo.mutation.Deleted(); ok {
		_spec.SetField(conversationmessage.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := cmuo.mutation.UserID(); ok {
		_spec.SetField(conversationmessage.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := cmuo.mutation.ConversationID(); ok {
		_spec.SetField(conversationmessage.FieldConversationID, field.TypeUUID, value)
	}
	if value, ok := cmuo.mutation.Request(); ok {
		_spec.SetField(conversationmessage.FieldRequest, field.TypeString, value)
	}
	if cmuo.mutation.RequestCleared() {
		_spec.ClearField(conversationmessage.FieldRequest, field.TypeString)
	}
	if value, ok := cmuo.mutation.Response(); ok {
		_spec.SetField(conversationmessage.FieldResponse, field.TypeString, value)
	}
	if cmuo.mutation.ResponseCleared() {
		_spec.ClearField(conversationmessage.FieldResponse, field.TypeString)
	}
	if value, ok := cmuo.mutation.TokenUsage(); ok {
		_spec.SetField(conversationmessage.FieldTokenUsage, field.TypeInt64, value)
	}
	if value, ok := cmuo.mutation.AddedTokenUsage(); ok {
		_spec.AddField(conversationmessage.FieldTokenUsage, field.TypeInt64, value)
	}
	if cmuo.mutation.TokenUsageCleared() {
		_spec.ClearField(conversationmessage.FieldTokenUsage, field.TypeInt64)
	}
	if value, ok := cmuo.mutation.Model(); ok {
		_spec.SetField(conversationmessage.FieldModel, field.TypeString, value)
	}
	if cmuo.mutation.ConversationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversationmessage.ConversationsTable,
			Columns: []string{conversationmessage.ConversationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.ConversationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversationmessage.ConversationsTable,
			Columns: []string{conversationmessage.ConversationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ConversationMessage{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversationmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmuo.mutation.done = true
	return _node, nil
}
