// Code generated by ent, DO NOT EDIT.

package prompt

import (
	"notionboy/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Prompt {
	return predicate.Prompt(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Prompt {
	return predicate.Prompt(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Prompt {
	return predicate.Prompt(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Prompt {
	return predicate.Prompt(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Prompt {
	return predicate.Prompt(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Prompt {
	return predicate.Prompt(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Prompt {
	return predicate.Prompt(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldUpdatedAt, v))
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v bool) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldDeleted, v))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldUUID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldUserID, v))
}

// Act applies equality check predicate on the "act" field. It's identical to ActEQ.
func Act(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldAct, v))
}

// Prompt applies equality check predicate on the "prompt" field. It's identical to PromptEQ.
func Prompt(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldPrompt, v))
}

// IsCustom applies equality check predicate on the "is_custom" field. It's identical to IsCustomEQ.
func IsCustom(v bool) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldIsCustom, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Prompt {
	return predicate.Prompt(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v bool) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldDeleted, v))
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v bool) predicate.Prompt {
	return predicate.Prompt(sql.FieldNEQ(FieldDeleted, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldLTE(FieldUUID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.Prompt {
	return predicate.Prompt(sql.FieldLTE(FieldUserID, v))
}

// ActEQ applies the EQ predicate on the "act" field.
func ActEQ(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldAct, v))
}

// ActNEQ applies the NEQ predicate on the "act" field.
func ActNEQ(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldNEQ(FieldAct, v))
}

// ActIn applies the In predicate on the "act" field.
func ActIn(vs ...string) predicate.Prompt {
	return predicate.Prompt(sql.FieldIn(FieldAct, vs...))
}

// ActNotIn applies the NotIn predicate on the "act" field.
func ActNotIn(vs ...string) predicate.Prompt {
	return predicate.Prompt(sql.FieldNotIn(FieldAct, vs...))
}

// ActGT applies the GT predicate on the "act" field.
func ActGT(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldGT(FieldAct, v))
}

// ActGTE applies the GTE predicate on the "act" field.
func ActGTE(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldGTE(FieldAct, v))
}

// ActLT applies the LT predicate on the "act" field.
func ActLT(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldLT(FieldAct, v))
}

// ActLTE applies the LTE predicate on the "act" field.
func ActLTE(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldLTE(FieldAct, v))
}

// ActContains applies the Contains predicate on the "act" field.
func ActContains(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldContains(FieldAct, v))
}

// ActHasPrefix applies the HasPrefix predicate on the "act" field.
func ActHasPrefix(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldHasPrefix(FieldAct, v))
}

// ActHasSuffix applies the HasSuffix predicate on the "act" field.
func ActHasSuffix(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldHasSuffix(FieldAct, v))
}

// ActEqualFold applies the EqualFold predicate on the "act" field.
func ActEqualFold(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldEqualFold(FieldAct, v))
}

// ActContainsFold applies the ContainsFold predicate on the "act" field.
func ActContainsFold(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldContainsFold(FieldAct, v))
}

// PromptEQ applies the EQ predicate on the "prompt" field.
func PromptEQ(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldPrompt, v))
}

// PromptNEQ applies the NEQ predicate on the "prompt" field.
func PromptNEQ(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldNEQ(FieldPrompt, v))
}

// PromptIn applies the In predicate on the "prompt" field.
func PromptIn(vs ...string) predicate.Prompt {
	return predicate.Prompt(sql.FieldIn(FieldPrompt, vs...))
}

// PromptNotIn applies the NotIn predicate on the "prompt" field.
func PromptNotIn(vs ...string) predicate.Prompt {
	return predicate.Prompt(sql.FieldNotIn(FieldPrompt, vs...))
}

// PromptGT applies the GT predicate on the "prompt" field.
func PromptGT(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldGT(FieldPrompt, v))
}

// PromptGTE applies the GTE predicate on the "prompt" field.
func PromptGTE(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldGTE(FieldPrompt, v))
}

// PromptLT applies the LT predicate on the "prompt" field.
func PromptLT(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldLT(FieldPrompt, v))
}

// PromptLTE applies the LTE predicate on the "prompt" field.
func PromptLTE(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldLTE(FieldPrompt, v))
}

// PromptContains applies the Contains predicate on the "prompt" field.
func PromptContains(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldContains(FieldPrompt, v))
}

// PromptHasPrefix applies the HasPrefix predicate on the "prompt" field.
func PromptHasPrefix(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldHasPrefix(FieldPrompt, v))
}

// PromptHasSuffix applies the HasSuffix predicate on the "prompt" field.
func PromptHasSuffix(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldHasSuffix(FieldPrompt, v))
}

// PromptEqualFold applies the EqualFold predicate on the "prompt" field.
func PromptEqualFold(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldEqualFold(FieldPrompt, v))
}

// PromptContainsFold applies the ContainsFold predicate on the "prompt" field.
func PromptContainsFold(v string) predicate.Prompt {
	return predicate.Prompt(sql.FieldContainsFold(FieldPrompt, v))
}

// IsCustomEQ applies the EQ predicate on the "is_custom" field.
func IsCustomEQ(v bool) predicate.Prompt {
	return predicate.Prompt(sql.FieldEQ(FieldIsCustom, v))
}

// IsCustomNEQ applies the NEQ predicate on the "is_custom" field.
func IsCustomNEQ(v bool) predicate.Prompt {
	return predicate.Prompt(sql.FieldNEQ(FieldIsCustom, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Prompt) predicate.Prompt {
	return predicate.Prompt(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Prompt) predicate.Prompt {
	return predicate.Prompt(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Prompt) predicate.Prompt {
	return predicate.Prompt(func(s *sql.Selector) {
		p(s.Not())
	})
}
