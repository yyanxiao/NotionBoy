// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"notionboy/db/ent/chathistory"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ChatHistory is the model entity for the ChatHistory schema.
type ChatHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted bool `json:"deleted,omitempty"`
	// user id
	UserID int `json:"user_id,omitempty"`
	// conversation idx for the whole chat history
	ConversationIdx int `json:"conversation_idx,omitempty"`
	// Conversation ID for the whole conversation
	ConversationID uuid.UUID `json:"conversation_id,omitempty"`
	// Message ID inside the conversation
	MessageID string `json:"message_id,omitempty"`
	// Index of the message inside the conversation
	MessageIdx int `json:"message_idx,omitempty"`
	// Request of the conversation
	Request string `json:"request,omitempty"`
	// Response of the conversation
	Response string `json:"response,omitempty"`
	// Token usage of the conversation
	TokenUsage int `json:"token_usage,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chathistory.FieldDeleted:
			values[i] = new(sql.NullBool)
		case chathistory.FieldID, chathistory.FieldUserID, chathistory.FieldConversationIdx, chathistory.FieldMessageIdx, chathistory.FieldTokenUsage:
			values[i] = new(sql.NullInt64)
		case chathistory.FieldMessageID, chathistory.FieldRequest, chathistory.FieldResponse:
			values[i] = new(sql.NullString)
		case chathistory.FieldCreatedAt, chathistory.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case chathistory.FieldConversationID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ChatHistory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatHistory fields.
func (ch *ChatHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chathistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ch.ID = int(value.Int64)
		case chathistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ch.CreatedAt = value.Time
			}
		case chathistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ch.UpdatedAt = value.Time
			}
		case chathistory.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				ch.Deleted = value.Bool
			}
		case chathistory.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ch.UserID = int(value.Int64)
			}
		case chathistory.FieldConversationIdx:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field conversation_idx", values[i])
			} else if value.Valid {
				ch.ConversationIdx = int(value.Int64)
			}
		case chathistory.FieldConversationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field conversation_id", values[i])
			} else if value != nil {
				ch.ConversationID = *value
			}
		case chathistory.FieldMessageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message_id", values[i])
			} else if value.Valid {
				ch.MessageID = value.String
			}
		case chathistory.FieldMessageIdx:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field message_idx", values[i])
			} else if value.Valid {
				ch.MessageIdx = int(value.Int64)
			}
		case chathistory.FieldRequest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request", values[i])
			} else if value.Valid {
				ch.Request = value.String
			}
		case chathistory.FieldResponse:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response", values[i])
			} else if value.Valid {
				ch.Response = value.String
			}
		case chathistory.FieldTokenUsage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field token_usage", values[i])
			} else if value.Valid {
				ch.TokenUsage = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ChatHistory.
// Note that you need to call ChatHistory.Unwrap() before calling this method if this ChatHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ch *ChatHistory) Update() *ChatHistoryUpdateOne {
	return NewChatHistoryClient(ch.config).UpdateOne(ch)
}

// Unwrap unwraps the ChatHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ch *ChatHistory) Unwrap() *ChatHistory {
	_tx, ok := ch.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatHistory is not a transactional entity")
	}
	ch.config.driver = _tx.drv
	return ch
}

// String implements the fmt.Stringer.
func (ch *ChatHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ChatHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ch.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ch.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ch.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", ch.Deleted))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ch.UserID))
	builder.WriteString(", ")
	builder.WriteString("conversation_idx=")
	builder.WriteString(fmt.Sprintf("%v", ch.ConversationIdx))
	builder.WriteString(", ")
	builder.WriteString("conversation_id=")
	builder.WriteString(fmt.Sprintf("%v", ch.ConversationID))
	builder.WriteString(", ")
	builder.WriteString("message_id=")
	builder.WriteString(ch.MessageID)
	builder.WriteString(", ")
	builder.WriteString("message_idx=")
	builder.WriteString(fmt.Sprintf("%v", ch.MessageIdx))
	builder.WriteString(", ")
	builder.WriteString("request=")
	builder.WriteString(ch.Request)
	builder.WriteString(", ")
	builder.WriteString("response=")
	builder.WriteString(ch.Response)
	builder.WriteString(", ")
	builder.WriteString("token_usage=")
	builder.WriteString(fmt.Sprintf("%v", ch.TokenUsage))
	builder.WriteByte(')')
	return builder.String()
}

// ChatHistories is a parsable slice of ChatHistory.
type ChatHistories []*ChatHistory
