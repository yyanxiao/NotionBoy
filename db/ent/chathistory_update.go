// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notionboy/db/ent/chathistory"
	"notionboy/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ChatHistoryUpdate is the builder for updating ChatHistory entities.
type ChatHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *ChatHistoryMutation
}

// Where appends a list predicates to the ChatHistoryUpdate builder.
func (chu *ChatHistoryUpdate) Where(ps ...predicate.ChatHistory) *ChatHistoryUpdate {
	chu.mutation.Where(ps...)
	return chu
}

// SetUpdatedAt sets the "updated_at" field.
func (chu *ChatHistoryUpdate) SetUpdatedAt(t time.Time) *ChatHistoryUpdate {
	chu.mutation.SetUpdatedAt(t)
	return chu
}

// SetDeleted sets the "deleted" field.
func (chu *ChatHistoryUpdate) SetDeleted(b bool) *ChatHistoryUpdate {
	chu.mutation.SetDeleted(b)
	return chu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (chu *ChatHistoryUpdate) SetNillableDeleted(b *bool) *ChatHistoryUpdate {
	if b != nil {
		chu.SetDeleted(*b)
	}
	return chu
}

// SetUserID sets the "user_id" field.
func (chu *ChatHistoryUpdate) SetUserID(i int) *ChatHistoryUpdate {
	chu.mutation.ResetUserID()
	chu.mutation.SetUserID(i)
	return chu
}

// AddUserID adds i to the "user_id" field.
func (chu *ChatHistoryUpdate) AddUserID(i int) *ChatHistoryUpdate {
	chu.mutation.AddUserID(i)
	return chu
}

// SetConversationIdx sets the "conversation_idx" field.
func (chu *ChatHistoryUpdate) SetConversationIdx(i int) *ChatHistoryUpdate {
	chu.mutation.ResetConversationIdx()
	chu.mutation.SetConversationIdx(i)
	return chu
}

// AddConversationIdx adds i to the "conversation_idx" field.
func (chu *ChatHistoryUpdate) AddConversationIdx(i int) *ChatHistoryUpdate {
	chu.mutation.AddConversationIdx(i)
	return chu
}

// SetConversationID sets the "conversation_id" field.
func (chu *ChatHistoryUpdate) SetConversationID(u uuid.UUID) *ChatHistoryUpdate {
	chu.mutation.SetConversationID(u)
	return chu
}

// SetMessageID sets the "message_id" field.
func (chu *ChatHistoryUpdate) SetMessageID(s string) *ChatHistoryUpdate {
	chu.mutation.SetMessageID(s)
	return chu
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (chu *ChatHistoryUpdate) SetNillableMessageID(s *string) *ChatHistoryUpdate {
	if s != nil {
		chu.SetMessageID(*s)
	}
	return chu
}

// ClearMessageID clears the value of the "message_id" field.
func (chu *ChatHistoryUpdate) ClearMessageID() *ChatHistoryUpdate {
	chu.mutation.ClearMessageID()
	return chu
}

// SetMessageIdx sets the "message_idx" field.
func (chu *ChatHistoryUpdate) SetMessageIdx(i int) *ChatHistoryUpdate {
	chu.mutation.ResetMessageIdx()
	chu.mutation.SetMessageIdx(i)
	return chu
}

// SetNillableMessageIdx sets the "message_idx" field if the given value is not nil.
func (chu *ChatHistoryUpdate) SetNillableMessageIdx(i *int) *ChatHistoryUpdate {
	if i != nil {
		chu.SetMessageIdx(*i)
	}
	return chu
}

// AddMessageIdx adds i to the "message_idx" field.
func (chu *ChatHistoryUpdate) AddMessageIdx(i int) *ChatHistoryUpdate {
	chu.mutation.AddMessageIdx(i)
	return chu
}

// ClearMessageIdx clears the value of the "message_idx" field.
func (chu *ChatHistoryUpdate) ClearMessageIdx() *ChatHistoryUpdate {
	chu.mutation.ClearMessageIdx()
	return chu
}

// SetRequest sets the "request" field.
func (chu *ChatHistoryUpdate) SetRequest(s string) *ChatHistoryUpdate {
	chu.mutation.SetRequest(s)
	return chu
}

// SetNillableRequest sets the "request" field if the given value is not nil.
func (chu *ChatHistoryUpdate) SetNillableRequest(s *string) *ChatHistoryUpdate {
	if s != nil {
		chu.SetRequest(*s)
	}
	return chu
}

// ClearRequest clears the value of the "request" field.
func (chu *ChatHistoryUpdate) ClearRequest() *ChatHistoryUpdate {
	chu.mutation.ClearRequest()
	return chu
}

// SetResponse sets the "response" field.
func (chu *ChatHistoryUpdate) SetResponse(s string) *ChatHistoryUpdate {
	chu.mutation.SetResponse(s)
	return chu
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (chu *ChatHistoryUpdate) SetNillableResponse(s *string) *ChatHistoryUpdate {
	if s != nil {
		chu.SetResponse(*s)
	}
	return chu
}

// ClearResponse clears the value of the "response" field.
func (chu *ChatHistoryUpdate) ClearResponse() *ChatHistoryUpdate {
	chu.mutation.ClearResponse()
	return chu
}

// SetTokenUsage sets the "token_usage" field.
func (chu *ChatHistoryUpdate) SetTokenUsage(i int) *ChatHistoryUpdate {
	chu.mutation.ResetTokenUsage()
	chu.mutation.SetTokenUsage(i)
	return chu
}

// SetNillableTokenUsage sets the "token_usage" field if the given value is not nil.
func (chu *ChatHistoryUpdate) SetNillableTokenUsage(i *int) *ChatHistoryUpdate {
	if i != nil {
		chu.SetTokenUsage(*i)
	}
	return chu
}

// AddTokenUsage adds i to the "token_usage" field.
func (chu *ChatHistoryUpdate) AddTokenUsage(i int) *ChatHistoryUpdate {
	chu.mutation.AddTokenUsage(i)
	return chu
}

// ClearTokenUsage clears the value of the "token_usage" field.
func (chu *ChatHistoryUpdate) ClearTokenUsage() *ChatHistoryUpdate {
	chu.mutation.ClearTokenUsage()
	return chu
}

// Mutation returns the ChatHistoryMutation object of the builder.
func (chu *ChatHistoryUpdate) Mutation() *ChatHistoryMutation {
	return chu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (chu *ChatHistoryUpdate) Save(ctx context.Context) (int, error) {
	chu.defaults()
	return withHooks[int, ChatHistoryMutation](ctx, chu.sqlSave, chu.mutation, chu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chu *ChatHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := chu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (chu *ChatHistoryUpdate) Exec(ctx context.Context) error {
	_, err := chu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chu *ChatHistoryUpdate) ExecX(ctx context.Context) {
	if err := chu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (chu *ChatHistoryUpdate) defaults() {
	if _, ok := chu.mutation.UpdatedAt(); !ok {
		v := chathistory.UpdateDefaultUpdatedAt()
		chu.mutation.SetUpdatedAt(v)
	}
}

func (chu *ChatHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(chathistory.Table, chathistory.Columns, sqlgraph.NewFieldSpec(chathistory.FieldID, field.TypeInt))
	if ps := chu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := chu.mutation.UpdatedAt(); ok {
		_spec.SetField(chathistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := chu.mutation.Deleted(); ok {
		_spec.SetField(chathistory.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := chu.mutation.UserID(); ok {
		_spec.SetField(chathistory.FieldUserID, field.TypeInt, value)
	}
	if value, ok := chu.mutation.AddedUserID(); ok {
		_spec.AddField(chathistory.FieldUserID, field.TypeInt, value)
	}
	if value, ok := chu.mutation.ConversationIdx(); ok {
		_spec.SetField(chathistory.FieldConversationIdx, field.TypeInt, value)
	}
	if value, ok := chu.mutation.AddedConversationIdx(); ok {
		_spec.AddField(chathistory.FieldConversationIdx, field.TypeInt, value)
	}
	if value, ok := chu.mutation.ConversationID(); ok {
		_spec.SetField(chathistory.FieldConversationID, field.TypeUUID, value)
	}
	if value, ok := chu.mutation.MessageID(); ok {
		_spec.SetField(chathistory.FieldMessageID, field.TypeString, value)
	}
	if chu.mutation.MessageIDCleared() {
		_spec.ClearField(chathistory.FieldMessageID, field.TypeString)
	}
	if value, ok := chu.mutation.MessageIdx(); ok {
		_spec.SetField(chathistory.FieldMessageIdx, field.TypeInt, value)
	}
	if value, ok := chu.mutation.AddedMessageIdx(); ok {
		_spec.AddField(chathistory.FieldMessageIdx, field.TypeInt, value)
	}
	if chu.mutation.MessageIdxCleared() {
		_spec.ClearField(chathistory.FieldMessageIdx, field.TypeInt)
	}
	if value, ok := chu.mutation.Request(); ok {
		_spec.SetField(chathistory.FieldRequest, field.TypeString, value)
	}
	if chu.mutation.RequestCleared() {
		_spec.ClearField(chathistory.FieldRequest, field.TypeString)
	}
	if value, ok := chu.mutation.Response(); ok {
		_spec.SetField(chathistory.FieldResponse, field.TypeString, value)
	}
	if chu.mutation.ResponseCleared() {
		_spec.ClearField(chathistory.FieldResponse, field.TypeString)
	}
	if value, ok := chu.mutation.TokenUsage(); ok {
		_spec.SetField(chathistory.FieldTokenUsage, field.TypeInt, value)
	}
	if value, ok := chu.mutation.AddedTokenUsage(); ok {
		_spec.AddField(chathistory.FieldTokenUsage, field.TypeInt, value)
	}
	if chu.mutation.TokenUsageCleared() {
		_spec.ClearField(chathistory.FieldTokenUsage, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, chu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chathistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	chu.mutation.done = true
	return n, nil
}

// ChatHistoryUpdateOne is the builder for updating a single ChatHistory entity.
type ChatHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (chuo *ChatHistoryUpdateOne) SetUpdatedAt(t time.Time) *ChatHistoryUpdateOne {
	chuo.mutation.SetUpdatedAt(t)
	return chuo
}

// SetDeleted sets the "deleted" field.
func (chuo *ChatHistoryUpdateOne) SetDeleted(b bool) *ChatHistoryUpdateOne {
	chuo.mutation.SetDeleted(b)
	return chuo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (chuo *ChatHistoryUpdateOne) SetNillableDeleted(b *bool) *ChatHistoryUpdateOne {
	if b != nil {
		chuo.SetDeleted(*b)
	}
	return chuo
}

// SetUserID sets the "user_id" field.
func (chuo *ChatHistoryUpdateOne) SetUserID(i int) *ChatHistoryUpdateOne {
	chuo.mutation.ResetUserID()
	chuo.mutation.SetUserID(i)
	return chuo
}

// AddUserID adds i to the "user_id" field.
func (chuo *ChatHistoryUpdateOne) AddUserID(i int) *ChatHistoryUpdateOne {
	chuo.mutation.AddUserID(i)
	return chuo
}

// SetConversationIdx sets the "conversation_idx" field.
func (chuo *ChatHistoryUpdateOne) SetConversationIdx(i int) *ChatHistoryUpdateOne {
	chuo.mutation.ResetConversationIdx()
	chuo.mutation.SetConversationIdx(i)
	return chuo
}

// AddConversationIdx adds i to the "conversation_idx" field.
func (chuo *ChatHistoryUpdateOne) AddConversationIdx(i int) *ChatHistoryUpdateOne {
	chuo.mutation.AddConversationIdx(i)
	return chuo
}

// SetConversationID sets the "conversation_id" field.
func (chuo *ChatHistoryUpdateOne) SetConversationID(u uuid.UUID) *ChatHistoryUpdateOne {
	chuo.mutation.SetConversationID(u)
	return chuo
}

// SetMessageID sets the "message_id" field.
func (chuo *ChatHistoryUpdateOne) SetMessageID(s string) *ChatHistoryUpdateOne {
	chuo.mutation.SetMessageID(s)
	return chuo
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (chuo *ChatHistoryUpdateOne) SetNillableMessageID(s *string) *ChatHistoryUpdateOne {
	if s != nil {
		chuo.SetMessageID(*s)
	}
	return chuo
}

// ClearMessageID clears the value of the "message_id" field.
func (chuo *ChatHistoryUpdateOne) ClearMessageID() *ChatHistoryUpdateOne {
	chuo.mutation.ClearMessageID()
	return chuo
}

// SetMessageIdx sets the "message_idx" field.
func (chuo *ChatHistoryUpdateOne) SetMessageIdx(i int) *ChatHistoryUpdateOne {
	chuo.mutation.ResetMessageIdx()
	chuo.mutation.SetMessageIdx(i)
	return chuo
}

// SetNillableMessageIdx sets the "message_idx" field if the given value is not nil.
func (chuo *ChatHistoryUpdateOne) SetNillableMessageIdx(i *int) *ChatHistoryUpdateOne {
	if i != nil {
		chuo.SetMessageIdx(*i)
	}
	return chuo
}

// AddMessageIdx adds i to the "message_idx" field.
func (chuo *ChatHistoryUpdateOne) AddMessageIdx(i int) *ChatHistoryUpdateOne {
	chuo.mutation.AddMessageIdx(i)
	return chuo
}

// ClearMessageIdx clears the value of the "message_idx" field.
func (chuo *ChatHistoryUpdateOne) ClearMessageIdx() *ChatHistoryUpdateOne {
	chuo.mutation.ClearMessageIdx()
	return chuo
}

// SetRequest sets the "request" field.
func (chuo *ChatHistoryUpdateOne) SetRequest(s string) *ChatHistoryUpdateOne {
	chuo.mutation.SetRequest(s)
	return chuo
}

// SetNillableRequest sets the "request" field if the given value is not nil.
func (chuo *ChatHistoryUpdateOne) SetNillableRequest(s *string) *ChatHistoryUpdateOne {
	if s != nil {
		chuo.SetRequest(*s)
	}
	return chuo
}

// ClearRequest clears the value of the "request" field.
func (chuo *ChatHistoryUpdateOne) ClearRequest() *ChatHistoryUpdateOne {
	chuo.mutation.ClearRequest()
	return chuo
}

// SetResponse sets the "response" field.
func (chuo *ChatHistoryUpdateOne) SetResponse(s string) *ChatHistoryUpdateOne {
	chuo.mutation.SetResponse(s)
	return chuo
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (chuo *ChatHistoryUpdateOne) SetNillableResponse(s *string) *ChatHistoryUpdateOne {
	if s != nil {
		chuo.SetResponse(*s)
	}
	return chuo
}

// ClearResponse clears the value of the "response" field.
func (chuo *ChatHistoryUpdateOne) ClearResponse() *ChatHistoryUpdateOne {
	chuo.mutation.ClearResponse()
	return chuo
}

// SetTokenUsage sets the "token_usage" field.
func (chuo *ChatHistoryUpdateOne) SetTokenUsage(i int) *ChatHistoryUpdateOne {
	chuo.mutation.ResetTokenUsage()
	chuo.mutation.SetTokenUsage(i)
	return chuo
}

// SetNillableTokenUsage sets the "token_usage" field if the given value is not nil.
func (chuo *ChatHistoryUpdateOne) SetNillableTokenUsage(i *int) *ChatHistoryUpdateOne {
	if i != nil {
		chuo.SetTokenUsage(*i)
	}
	return chuo
}

// AddTokenUsage adds i to the "token_usage" field.
func (chuo *ChatHistoryUpdateOne) AddTokenUsage(i int) *ChatHistoryUpdateOne {
	chuo.mutation.AddTokenUsage(i)
	return chuo
}

// ClearTokenUsage clears the value of the "token_usage" field.
func (chuo *ChatHistoryUpdateOne) ClearTokenUsage() *ChatHistoryUpdateOne {
	chuo.mutation.ClearTokenUsage()
	return chuo
}

// Mutation returns the ChatHistoryMutation object of the builder.
func (chuo *ChatHistoryUpdateOne) Mutation() *ChatHistoryMutation {
	return chuo.mutation
}

// Where appends a list predicates to the ChatHistoryUpdate builder.
func (chuo *ChatHistoryUpdateOne) Where(ps ...predicate.ChatHistory) *ChatHistoryUpdateOne {
	chuo.mutation.Where(ps...)
	return chuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (chuo *ChatHistoryUpdateOne) Select(field string, fields ...string) *ChatHistoryUpdateOne {
	chuo.fields = append([]string{field}, fields...)
	return chuo
}

// Save executes the query and returns the updated ChatHistory entity.
func (chuo *ChatHistoryUpdateOne) Save(ctx context.Context) (*ChatHistory, error) {
	chuo.defaults()
	return withHooks[*ChatHistory, ChatHistoryMutation](ctx, chuo.sqlSave, chuo.mutation, chuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chuo *ChatHistoryUpdateOne) SaveX(ctx context.Context) *ChatHistory {
	node, err := chuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (chuo *ChatHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := chuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chuo *ChatHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := chuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (chuo *ChatHistoryUpdateOne) defaults() {
	if _, ok := chuo.mutation.UpdatedAt(); !ok {
		v := chathistory.UpdateDefaultUpdatedAt()
		chuo.mutation.SetUpdatedAt(v)
	}
}

func (chuo *ChatHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ChatHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(chathistory.Table, chathistory.Columns, sqlgraph.NewFieldSpec(chathistory.FieldID, field.TypeInt))
	id, ok := chuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChatHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := chuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chathistory.FieldID)
		for _, f := range fields {
			if !chathistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chathistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := chuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := chuo.mutation.UpdatedAt(); ok {
		_spec.SetField(chathistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := chuo.mutation.Deleted(); ok {
		_spec.SetField(chathistory.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := chuo.mutation.UserID(); ok {
		_spec.SetField(chathistory.FieldUserID, field.TypeInt, value)
	}
	if value, ok := chuo.mutation.AddedUserID(); ok {
		_spec.AddField(chathistory.FieldUserID, field.TypeInt, value)
	}
	if value, ok := chuo.mutation.ConversationIdx(); ok {
		_spec.SetField(chathistory.FieldConversationIdx, field.TypeInt, value)
	}
	if value, ok := chuo.mutation.AddedConversationIdx(); ok {
		_spec.AddField(chathistory.FieldConversationIdx, field.TypeInt, value)
	}
	if value, ok := chuo.mutation.ConversationID(); ok {
		_spec.SetField(chathistory.FieldConversationID, field.TypeUUID, value)
	}
	if value, ok := chuo.mutation.MessageID(); ok {
		_spec.SetField(chathistory.FieldMessageID, field.TypeString, value)
	}
	if chuo.mutation.MessageIDCleared() {
		_spec.ClearField(chathistory.FieldMessageID, field.TypeString)
	}
	if value, ok := chuo.mutation.MessageIdx(); ok {
		_spec.SetField(chathistory.FieldMessageIdx, field.TypeInt, value)
	}
	if value, ok := chuo.mutation.AddedMessageIdx(); ok {
		_spec.AddField(chathistory.FieldMessageIdx, field.TypeInt, value)
	}
	if chuo.mutation.MessageIdxCleared() {
		_spec.ClearField(chathistory.FieldMessageIdx, field.TypeInt)
	}
	if value, ok := chuo.mutation.Request(); ok {
		_spec.SetField(chathistory.FieldRequest, field.TypeString, value)
	}
	if chuo.mutation.RequestCleared() {
		_spec.ClearField(chathistory.FieldRequest, field.TypeString)
	}
	if value, ok := chuo.mutation.Response(); ok {
		_spec.SetField(chathistory.FieldResponse, field.TypeString, value)
	}
	if chuo.mutation.ResponseCleared() {
		_spec.ClearField(chathistory.FieldResponse, field.TypeString)
	}
	if value, ok := chuo.mutation.TokenUsage(); ok {
		_spec.SetField(chathistory.FieldTokenUsage, field.TypeInt, value)
	}
	if value, ok := chuo.mutation.AddedTokenUsage(); ok {
		_spec.AddField(chathistory.FieldTokenUsage, field.TypeInt, value)
	}
	if chuo.mutation.TokenUsageCleared() {
		_spec.ClearField(chathistory.FieldTokenUsage, field.TypeInt)
	}
	_node = &ChatHistory{config: chuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, chuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chathistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	chuo.mutation.done = true
	return _node, nil
}
