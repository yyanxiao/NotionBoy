// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notionboy/db/ent/conversation"
	"notionboy/db/ent/conversationmessage"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ConversationMessageCreate is the builder for creating a ConversationMessage entity.
type ConversationMessageCreate struct {
	config
	mutation *ConversationMessageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cmc *ConversationMessageCreate) SetCreatedAt(t time.Time) *ConversationMessageCreate {
	cmc.mutation.SetCreatedAt(t)
	return cmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cmc *ConversationMessageCreate) SetNillableCreatedAt(t *time.Time) *ConversationMessageCreate {
	if t != nil {
		cmc.SetCreatedAt(*t)
	}
	return cmc
}

// SetUpdatedAt sets the "updated_at" field.
func (cmc *ConversationMessageCreate) SetUpdatedAt(t time.Time) *ConversationMessageCreate {
	cmc.mutation.SetUpdatedAt(t)
	return cmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cmc *ConversationMessageCreate) SetNillableUpdatedAt(t *time.Time) *ConversationMessageCreate {
	if t != nil {
		cmc.SetUpdatedAt(*t)
	}
	return cmc
}

// SetDeleted sets the "deleted" field.
func (cmc *ConversationMessageCreate) SetDeleted(b bool) *ConversationMessageCreate {
	cmc.mutation.SetDeleted(b)
	return cmc
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (cmc *ConversationMessageCreate) SetNillableDeleted(b *bool) *ConversationMessageCreate {
	if b != nil {
		cmc.SetDeleted(*b)
	}
	return cmc
}

// SetUUID sets the "uuid" field.
func (cmc *ConversationMessageCreate) SetUUID(u uuid.UUID) *ConversationMessageCreate {
	cmc.mutation.SetUUID(u)
	return cmc
}

// SetUserID sets the "user_id" field.
func (cmc *ConversationMessageCreate) SetUserID(u uuid.UUID) *ConversationMessageCreate {
	cmc.mutation.SetUserID(u)
	return cmc
}

// SetConversationID sets the "conversation_id" field.
func (cmc *ConversationMessageCreate) SetConversationID(u uuid.UUID) *ConversationMessageCreate {
	cmc.mutation.SetConversationID(u)
	return cmc
}

// SetRequest sets the "request" field.
func (cmc *ConversationMessageCreate) SetRequest(s string) *ConversationMessageCreate {
	cmc.mutation.SetRequest(s)
	return cmc
}

// SetNillableRequest sets the "request" field if the given value is not nil.
func (cmc *ConversationMessageCreate) SetNillableRequest(s *string) *ConversationMessageCreate {
	if s != nil {
		cmc.SetRequest(*s)
	}
	return cmc
}

// SetResponse sets the "response" field.
func (cmc *ConversationMessageCreate) SetResponse(s string) *ConversationMessageCreate {
	cmc.mutation.SetResponse(s)
	return cmc
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (cmc *ConversationMessageCreate) SetNillableResponse(s *string) *ConversationMessageCreate {
	if s != nil {
		cmc.SetResponse(*s)
	}
	return cmc
}

// SetTokenUsage sets the "token_usage" field.
func (cmc *ConversationMessageCreate) SetTokenUsage(i int64) *ConversationMessageCreate {
	cmc.mutation.SetTokenUsage(i)
	return cmc
}

// SetNillableTokenUsage sets the "token_usage" field if the given value is not nil.
func (cmc *ConversationMessageCreate) SetNillableTokenUsage(i *int64) *ConversationMessageCreate {
	if i != nil {
		cmc.SetTokenUsage(*i)
	}
	return cmc
}

// SetModel sets the "model" field.
func (cmc *ConversationMessageCreate) SetModel(s string) *ConversationMessageCreate {
	cmc.mutation.SetModel(s)
	return cmc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (cmc *ConversationMessageCreate) SetNillableModel(s *string) *ConversationMessageCreate {
	if s != nil {
		cmc.SetModel(*s)
	}
	return cmc
}

// SetConversationsID sets the "conversations" edge to the Conversation entity by ID.
func (cmc *ConversationMessageCreate) SetConversationsID(id int) *ConversationMessageCreate {
	cmc.mutation.SetConversationsID(id)
	return cmc
}

// SetNillableConversationsID sets the "conversations" edge to the Conversation entity by ID if the given value is not nil.
func (cmc *ConversationMessageCreate) SetNillableConversationsID(id *int) *ConversationMessageCreate {
	if id != nil {
		cmc = cmc.SetConversationsID(*id)
	}
	return cmc
}

// SetConversations sets the "conversations" edge to the Conversation entity.
func (cmc *ConversationMessageCreate) SetConversations(c *Conversation) *ConversationMessageCreate {
	return cmc.SetConversationsID(c.ID)
}

// Mutation returns the ConversationMessageMutation object of the builder.
func (cmc *ConversationMessageCreate) Mutation() *ConversationMessageMutation {
	return cmc.mutation
}

// Save creates the ConversationMessage in the database.
func (cmc *ConversationMessageCreate) Save(ctx context.Context) (*ConversationMessage, error) {
	cmc.defaults()
	return withHooks[*ConversationMessage, ConversationMessageMutation](ctx, cmc.sqlSave, cmc.mutation, cmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *ConversationMessageCreate) SaveX(ctx context.Context) *ConversationMessage {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *ConversationMessageCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *ConversationMessageCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmc *ConversationMessageCreate) defaults() {
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		v := conversationmessage.DefaultCreatedAt()
		cmc.mutation.SetCreatedAt(v)
	}
	if _, ok := cmc.mutation.UpdatedAt(); !ok {
		v := conversationmessage.DefaultUpdatedAt()
		cmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cmc.mutation.Deleted(); !ok {
		v := conversationmessage.DefaultDeleted
		cmc.mutation.SetDeleted(v)
	}
	if _, ok := cmc.mutation.Model(); !ok {
		v := conversationmessage.DefaultModel
		cmc.mutation.SetModel(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *ConversationMessageCreate) check() error {
	if _, ok := cmc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "ConversationMessage.deleted"`)}
	}
	if _, ok := cmc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "ConversationMessage.uuid"`)}
	}
	if _, ok := cmc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ConversationMessage.user_id"`)}
	}
	if _, ok := cmc.mutation.ConversationID(); !ok {
		return &ValidationError{Name: "conversation_id", err: errors.New(`ent: missing required field "ConversationMessage.conversation_id"`)}
	}
	if _, ok := cmc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "ConversationMessage.model"`)}
	}
	return nil
}

func (cmc *ConversationMessageCreate) sqlSave(ctx context.Context) (*ConversationMessage, error) {
	if err := cmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cmc.mutation.id = &_node.ID
	cmc.mutation.done = true
	return _node, nil
}

func (cmc *ConversationMessageCreate) createSpec() (*ConversationMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &ConversationMessage{config: cmc.config}
		_spec = sqlgraph.NewCreateSpec(conversationmessage.Table, sqlgraph.NewFieldSpec(conversationmessage.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cmc.conflict
	if value, ok := cmc.mutation.CreatedAt(); ok {
		_spec.SetField(conversationmessage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cmc.mutation.UpdatedAt(); ok {
		_spec.SetField(conversationmessage.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cmc.mutation.Deleted(); ok {
		_spec.SetField(conversationmessage.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if value, ok := cmc.mutation.UUID(); ok {
		_spec.SetField(conversationmessage.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := cmc.mutation.UserID(); ok {
		_spec.SetField(conversationmessage.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := cmc.mutation.ConversationID(); ok {
		_spec.SetField(conversationmessage.FieldConversationID, field.TypeUUID, value)
		_node.ConversationID = value
	}
	if value, ok := cmc.mutation.Request(); ok {
		_spec.SetField(conversationmessage.FieldRequest, field.TypeString, value)
		_node.Request = value
	}
	if value, ok := cmc.mutation.Response(); ok {
		_spec.SetField(conversationmessage.FieldResponse, field.TypeString, value)
		_node.Response = value
	}
	if value, ok := cmc.mutation.TokenUsage(); ok {
		_spec.SetField(conversationmessage.FieldTokenUsage, field.TypeInt64, value)
		_node.TokenUsage = value
	}
	if value, ok := cmc.mutation.Model(); ok {
		_spec.SetField(conversationmessage.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if nodes := cmc.mutation.ConversationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversationmessage.ConversationsTable,
			Columns: []string{conversationmessage.ConversationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.conversation_conversation_messages = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ConversationMessage.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConversationMessageUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cmc *ConversationMessageCreate) OnConflict(opts ...sql.ConflictOption) *ConversationMessageUpsertOne {
	cmc.conflict = opts
	return &ConversationMessageUpsertOne{
		create: cmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ConversationMessage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cmc *ConversationMessageCreate) OnConflictColumns(columns ...string) *ConversationMessageUpsertOne {
	cmc.conflict = append(cmc.conflict, sql.ConflictColumns(columns...))
	return &ConversationMessageUpsertOne{
		create: cmc,
	}
}

type (
	// ConversationMessageUpsertOne is the builder for "upsert"-ing
	//  one ConversationMessage node.
	ConversationMessageUpsertOne struct {
		create *ConversationMessageCreate
	}

	// ConversationMessageUpsert is the "OnConflict" setter.
	ConversationMessageUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ConversationMessageUpsert) SetUpdatedAt(v time.Time) *ConversationMessageUpsert {
	u.Set(conversationmessage.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ConversationMessageUpsert) UpdateUpdatedAt() *ConversationMessageUpsert {
	u.SetExcluded(conversationmessage.FieldUpdatedAt)
	return u
}

// SetDeleted sets the "deleted" field.
func (u *ConversationMessageUpsert) SetDeleted(v bool) *ConversationMessageUpsert {
	u.Set(conversationmessage.FieldDeleted, v)
	return u
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *ConversationMessageUpsert) UpdateDeleted() *ConversationMessageUpsert {
	u.SetExcluded(conversationmessage.FieldDeleted)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ConversationMessageUpsert) SetUserID(v uuid.UUID) *ConversationMessageUpsert {
	u.Set(conversationmessage.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ConversationMessageUpsert) UpdateUserID() *ConversationMessageUpsert {
	u.SetExcluded(conversationmessage.FieldUserID)
	return u
}

// SetConversationID sets the "conversation_id" field.
func (u *ConversationMessageUpsert) SetConversationID(v uuid.UUID) *ConversationMessageUpsert {
	u.Set(conversationmessage.FieldConversationID, v)
	return u
}

// UpdateConversationID sets the "conversation_id" field to the value that was provided on create.
func (u *ConversationMessageUpsert) UpdateConversationID() *ConversationMessageUpsert {
	u.SetExcluded(conversationmessage.FieldConversationID)
	return u
}

// SetRequest sets the "request" field.
func (u *ConversationMessageUpsert) SetRequest(v string) *ConversationMessageUpsert {
	u.Set(conversationmessage.FieldRequest, v)
	return u
}

// UpdateRequest sets the "request" field to the value that was provided on create.
func (u *ConversationMessageUpsert) UpdateRequest() *ConversationMessageUpsert {
	u.SetExcluded(conversationmessage.FieldRequest)
	return u
}

// ClearRequest clears the value of the "request" field.
func (u *ConversationMessageUpsert) ClearRequest() *ConversationMessageUpsert {
	u.SetNull(conversationmessage.FieldRequest)
	return u
}

// SetResponse sets the "response" field.
func (u *ConversationMessageUpsert) SetResponse(v string) *ConversationMessageUpsert {
	u.Set(conversationmessage.FieldResponse, v)
	return u
}

// UpdateResponse sets the "response" field to the value that was provided on create.
func (u *ConversationMessageUpsert) UpdateResponse() *ConversationMessageUpsert {
	u.SetExcluded(conversationmessage.FieldResponse)
	return u
}

// ClearResponse clears the value of the "response" field.
func (u *ConversationMessageUpsert) ClearResponse() *ConversationMessageUpsert {
	u.SetNull(conversationmessage.FieldResponse)
	return u
}

// SetTokenUsage sets the "token_usage" field.
func (u *ConversationMessageUpsert) SetTokenUsage(v int64) *ConversationMessageUpsert {
	u.Set(conversationmessage.FieldTokenUsage, v)
	return u
}

// UpdateTokenUsage sets the "token_usage" field to the value that was provided on create.
func (u *ConversationMessageUpsert) UpdateTokenUsage() *ConversationMessageUpsert {
	u.SetExcluded(conversationmessage.FieldTokenUsage)
	return u
}

// AddTokenUsage adds v to the "token_usage" field.
func (u *ConversationMessageUpsert) AddTokenUsage(v int64) *ConversationMessageUpsert {
	u.Add(conversationmessage.FieldTokenUsage, v)
	return u
}

// ClearTokenUsage clears the value of the "token_usage" field.
func (u *ConversationMessageUpsert) ClearTokenUsage() *ConversationMessageUpsert {
	u.SetNull(conversationmessage.FieldTokenUsage)
	return u
}

// SetModel sets the "model" field.
func (u *ConversationMessageUpsert) SetModel(v string) *ConversationMessageUpsert {
	u.Set(conversationmessage.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *ConversationMessageUpsert) UpdateModel() *ConversationMessageUpsert {
	u.SetExcluded(conversationmessage.FieldModel)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ConversationMessage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ConversationMessageUpsertOne) UpdateNewValues() *ConversationMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(conversationmessage.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UUID(); exists {
			s.SetIgnore(conversationmessage.FieldUUID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ConversationMessage.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ConversationMessageUpsertOne) Ignore() *ConversationMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConversationMessageUpsertOne) DoNothing() *ConversationMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConversationMessageCreate.OnConflict
// documentation for more info.
func (u *ConversationMessageUpsertOne) Update(set func(*ConversationMessageUpsert)) *ConversationMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConversationMessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ConversationMessageUpsertOne) SetUpdatedAt(v time.Time) *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ConversationMessageUpsertOne) UpdateUpdatedAt() *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeleted sets the "deleted" field.
func (u *ConversationMessageUpsertOne) SetDeleted(v bool) *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *ConversationMessageUpsertOne) UpdateDeleted() *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.UpdateDeleted()
	})
}

// SetUserID sets the "user_id" field.
func (u *ConversationMessageUpsertOne) SetUserID(v uuid.UUID) *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ConversationMessageUpsertOne) UpdateUserID() *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.UpdateUserID()
	})
}

// SetConversationID sets the "conversation_id" field.
func (u *ConversationMessageUpsertOne) SetConversationID(v uuid.UUID) *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.SetConversationID(v)
	})
}

// UpdateConversationID sets the "conversation_id" field to the value that was provided on create.
func (u *ConversationMessageUpsertOne) UpdateConversationID() *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.UpdateConversationID()
	})
}

// SetRequest sets the "request" field.
func (u *ConversationMessageUpsertOne) SetRequest(v string) *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.SetRequest(v)
	})
}

// UpdateRequest sets the "request" field to the value that was provided on create.
func (u *ConversationMessageUpsertOne) UpdateRequest() *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.UpdateRequest()
	})
}

// ClearRequest clears the value of the "request" field.
func (u *ConversationMessageUpsertOne) ClearRequest() *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.ClearRequest()
	})
}

// SetResponse sets the "response" field.
func (u *ConversationMessageUpsertOne) SetResponse(v string) *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.SetResponse(v)
	})
}

// UpdateResponse sets the "response" field to the value that was provided on create.
func (u *ConversationMessageUpsertOne) UpdateResponse() *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.UpdateResponse()
	})
}

// ClearResponse clears the value of the "response" field.
func (u *ConversationMessageUpsertOne) ClearResponse() *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.ClearResponse()
	})
}

// SetTokenUsage sets the "token_usage" field.
func (u *ConversationMessageUpsertOne) SetTokenUsage(v int64) *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.SetTokenUsage(v)
	})
}

// AddTokenUsage adds v to the "token_usage" field.
func (u *ConversationMessageUpsertOne) AddTokenUsage(v int64) *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.AddTokenUsage(v)
	})
}

// UpdateTokenUsage sets the "token_usage" field to the value that was provided on create.
func (u *ConversationMessageUpsertOne) UpdateTokenUsage() *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.UpdateTokenUsage()
	})
}

// ClearTokenUsage clears the value of the "token_usage" field.
func (u *ConversationMessageUpsertOne) ClearTokenUsage() *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.ClearTokenUsage()
	})
}

// SetModel sets the "model" field.
func (u *ConversationMessageUpsertOne) SetModel(v string) *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *ConversationMessageUpsertOne) UpdateModel() *ConversationMessageUpsertOne {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.UpdateModel()
	})
}

// Exec executes the query.
func (u *ConversationMessageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConversationMessageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConversationMessageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ConversationMessageUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ConversationMessageUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ConversationMessageCreateBulk is the builder for creating many ConversationMessage entities in bulk.
type ConversationMessageCreateBulk struct {
	config
	builders []*ConversationMessageCreate
	conflict []sql.ConflictOption
}

// Save creates the ConversationMessage entities in the database.
func (cmcb *ConversationMessageCreateBulk) Save(ctx context.Context) ([]*ConversationMessage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*ConversationMessage, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConversationMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *ConversationMessageCreateBulk) SaveX(ctx context.Context) []*ConversationMessage {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *ConversationMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *ConversationMessageCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ConversationMessage.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConversationMessageUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cmcb *ConversationMessageCreateBulk) OnConflict(opts ...sql.ConflictOption) *ConversationMessageUpsertBulk {
	cmcb.conflict = opts
	return &ConversationMessageUpsertBulk{
		create: cmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ConversationMessage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cmcb *ConversationMessageCreateBulk) OnConflictColumns(columns ...string) *ConversationMessageUpsertBulk {
	cmcb.conflict = append(cmcb.conflict, sql.ConflictColumns(columns...))
	return &ConversationMessageUpsertBulk{
		create: cmcb,
	}
}

// ConversationMessageUpsertBulk is the builder for "upsert"-ing
// a bulk of ConversationMessage nodes.
type ConversationMessageUpsertBulk struct {
	create *ConversationMessageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ConversationMessage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ConversationMessageUpsertBulk) UpdateNewValues() *ConversationMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(conversationmessage.FieldCreatedAt)
			}
			if _, exists := b.mutation.UUID(); exists {
				s.SetIgnore(conversationmessage.FieldUUID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ConversationMessage.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ConversationMessageUpsertBulk) Ignore() *ConversationMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConversationMessageUpsertBulk) DoNothing() *ConversationMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConversationMessageCreateBulk.OnConflict
// documentation for more info.
func (u *ConversationMessageUpsertBulk) Update(set func(*ConversationMessageUpsert)) *ConversationMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConversationMessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ConversationMessageUpsertBulk) SetUpdatedAt(v time.Time) *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ConversationMessageUpsertBulk) UpdateUpdatedAt() *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeleted sets the "deleted" field.
func (u *ConversationMessageUpsertBulk) SetDeleted(v bool) *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *ConversationMessageUpsertBulk) UpdateDeleted() *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.UpdateDeleted()
	})
}

// SetUserID sets the "user_id" field.
func (u *ConversationMessageUpsertBulk) SetUserID(v uuid.UUID) *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ConversationMessageUpsertBulk) UpdateUserID() *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.UpdateUserID()
	})
}

// SetConversationID sets the "conversation_id" field.
func (u *ConversationMessageUpsertBulk) SetConversationID(v uuid.UUID) *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.SetConversationID(v)
	})
}

// UpdateConversationID sets the "conversation_id" field to the value that was provided on create.
func (u *ConversationMessageUpsertBulk) UpdateConversationID() *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.UpdateConversationID()
	})
}

// SetRequest sets the "request" field.
func (u *ConversationMessageUpsertBulk) SetRequest(v string) *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.SetRequest(v)
	})
}

// UpdateRequest sets the "request" field to the value that was provided on create.
func (u *ConversationMessageUpsertBulk) UpdateRequest() *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.UpdateRequest()
	})
}

// ClearRequest clears the value of the "request" field.
func (u *ConversationMessageUpsertBulk) ClearRequest() *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.ClearRequest()
	})
}

// SetResponse sets the "response" field.
func (u *ConversationMessageUpsertBulk) SetResponse(v string) *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.SetResponse(v)
	})
}

// UpdateResponse sets the "response" field to the value that was provided on create.
func (u *ConversationMessageUpsertBulk) UpdateResponse() *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.UpdateResponse()
	})
}

// ClearResponse clears the value of the "response" field.
func (u *ConversationMessageUpsertBulk) ClearResponse() *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.ClearResponse()
	})
}

// SetTokenUsage sets the "token_usage" field.
func (u *ConversationMessageUpsertBulk) SetTokenUsage(v int64) *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.SetTokenUsage(v)
	})
}

// AddTokenUsage adds v to the "token_usage" field.
func (u *ConversationMessageUpsertBulk) AddTokenUsage(v int64) *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.AddTokenUsage(v)
	})
}

// UpdateTokenUsage sets the "token_usage" field to the value that was provided on create.
func (u *ConversationMessageUpsertBulk) UpdateTokenUsage() *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.UpdateTokenUsage()
	})
}

// ClearTokenUsage clears the value of the "token_usage" field.
func (u *ConversationMessageUpsertBulk) ClearTokenUsage() *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.ClearTokenUsage()
	})
}

// SetModel sets the "model" field.
func (u *ConversationMessageUpsertBulk) SetModel(v string) *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *ConversationMessageUpsertBulk) UpdateModel() *ConversationMessageUpsertBulk {
	return u.Update(func(s *ConversationMessageUpsert) {
		s.UpdateModel()
	})
}

// Exec executes the query.
func (u *ConversationMessageUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ConversationMessageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConversationMessageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConversationMessageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
